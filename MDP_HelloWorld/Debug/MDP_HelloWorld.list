
MDP_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bec  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c3c  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a18  08009a18  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08009a18  08009a18  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a18  08009a18  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a18  08009a18  00019a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a1c  08009a1c  00019a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002544  20000080  08009a9c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200025c4  08009a9c  000225c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afe5  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003979  00000000  00000000  0003b08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0003ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001480  00000000  00000000  0003ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a58  00000000  00000000  00041450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017feb  00000000  00000000  00044ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a422f  00000000  00000000  0005ce93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001010c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d4  00000000  00000000  00101118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000080 	.word	0x20000080
 800020c:	00000000 	.word	0x00000000
 8000210:	08008dc4 	.word	0x08008dc4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000084 	.word	0x20000084
 800022c:	08008dc4 	.word	0x08008dc4

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2uiz>:
 8000adc:	004a      	lsls	r2, r1, #1
 8000ade:	d211      	bcs.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d211      	bcs.n	8000b0a <__aeabi_d2uiz+0x2e>
 8000ae6:	d50d      	bpl.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d40e      	bmi.n	8000b10 <__aeabi_d2uiz+0x34>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_d2uiz+0x3a>
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	4770      	bx	lr
 8000b1c:	0000      	movs	r0, r0
	...

08000b20 <my_PID_init>:
//sending lock
uint8_t sending_size_in_transmit_fun = 0;


void my_PID_init()
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	; 0x38
 8000b24:	af06      	add	r7, sp, #24
	double m_kp = 0.3;
 8000b26:	a322      	add	r3, pc, #136	; (adr r3, 8000bb0 <my_PID_init+0x90>)
 8000b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double m_ki = 0.1;
 8000b30:	a321      	add	r3, pc, #132	; (adr r3, 8000bb8 <my_PID_init+0x98>)
 8000b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b36:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double m_kd = 0.1;
 8000b3a:	a31f      	add	r3, pc, #124	; (adr r3, 8000bb8 <my_PID_init+0x98>)
 8000b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b40:	e9c7 2302 	strd	r2, r3, [r7, #8]
	ctrlDir_t m_controllerDir = PID_DIRECT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	71fb      	strb	r3, [r7, #7]
	uint32_t m_samplePeriodMs = 200;
 8000b48:	23c8      	movs	r3, #200	; 0xc8
 8000b4a:	603b      	str	r3, [r7, #0]

	m_pidData_p = &m_pidData;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <my_PID_init+0xa0>)
 8000b4e:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <my_PID_init+0xa4>)
 8000b50:	601a      	str	r2, [r3, #0]
	Pid_Init(m_pidData_p, m_kp, m_ki, m_kd, m_controllerDir, m_samplePeriodMs);
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <my_PID_init+0xa0>)
 8000b54:	6819      	ldr	r1, [r3, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	9305      	str	r3, [sp, #20]
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	9304      	str	r3, [sp, #16]
 8000b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b6a:	e9cd 2300 	strd	r2, r3, [sp]
 8000b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000b72:	4608      	mov	r0, r1
 8000b74:	f001 fc40 	bl	80023f8 <Pid_Init>

	m_pidData_right_p = &m_pidData_right;
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <my_PID_init+0xa8>)
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <my_PID_init+0xac>)
 8000b7c:	601a      	str	r2, [r3, #0]
	Pid_Init(m_pidData_right_p, m_kp, m_ki, m_kd, m_controllerDir, m_samplePeriodMs);
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <my_PID_init+0xa8>)
 8000b80:	6819      	ldr	r1, [r3, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	9305      	str	r3, [sp, #20]
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	9304      	str	r3, [sp, #16]
 8000b8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b96:	e9cd 2300 	strd	r2, r3, [sp]
 8000b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	f001 fc2a 	bl	80023f8 <Pid_Init>
}
 8000ba4:	bf00      	nop
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	f3af 8000 	nop.w
 8000bb0:	33333333 	.word	0x33333333
 8000bb4:	3fd33333 	.word	0x3fd33333
 8000bb8:	9999999a 	.word	0x9999999a
 8000bbc:	3fb99999 	.word	0x3fb99999
 8000bc0:	20002110 	.word	0x20002110
 8000bc4:	20001e70 	.word	0x20001e70
 8000bc8:	20001d08 	.word	0x20001d08
 8000bcc:	200019d8 	.word	0x200019d8

08000bd0 <Queue_init>:
};

struct commandQueue command_queue;

void Queue_init()
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	command_queue.size = 0;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <Queue_init+0x28>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
	command_queue.capacity = 25;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <Queue_init+0x28>)
 8000bdc:	2219      	movs	r2, #25
 8000bde:	605a      	str	r2, [r3, #4]
	command_queue.front = 0;//index of first command
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <Queue_init+0x28>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
	command_queue.rear = command_queue.capacity-1; // index of last command
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <Queue_init+0x28>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	4a02      	ldr	r2, [pc, #8]	; (8000bf8 <Queue_init+0x28>)
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20001f0c 	.word	0x20001f0c

08000bfc <isEmpty>:

int isEmpty()
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	return (command_queue.size == 0);
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <isEmpty+0x1c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	bf0c      	ite	eq
 8000c08:	2301      	moveq	r3, #1
 8000c0a:	2300      	movne	r3, #0
 8000c0c:	b2db      	uxtb	r3, r3
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20001f0c 	.word	0x20001f0c

08000c1c <isFull>:
int isFull()
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
	return (command_queue.size == command_queue.capacity);
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <isFull+0x20>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <isFull+0x20>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	bf0c      	ite	eq
 8000c2c:	2301      	moveq	r3, #1
 8000c2e:	2300      	movne	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20001f0c 	.word	0x20001f0c

08000c40 <Enqueue>:
	return command_queue.size;
}


void Enqueue(uint8_t* command_in)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8000c46:	af7e      	add	r7, sp, #504	; 0x1f8
 8000c48:	6078      	str	r0, [r7, #4]
	//put a command at index rear
	if (isFull(command_queue))
 8000c4a:	4c20      	ldr	r4, [pc, #128]	; (8000ccc <Enqueue+0x8c>)
 8000c4c:	4668      	mov	r0, sp
 8000c4e:	f104 0310 	add.w	r3, r4, #16
 8000c52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c56:	4619      	mov	r1, r3
 8000c58:	f007 fc72 	bl	8008540 <memcpy>
 8000c5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c60:	f7ff ffdc 	bl	8000c1c <isFull>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d12b      	bne.n	8000cc2 <Enqueue+0x82>
	   return;
	command_queue.rear = (command_queue.rear + 1) % command_queue.capacity;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <Enqueue+0x8c>)
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <Enqueue+0x8c>)
 8000c72:	6852      	ldr	r2, [r2, #4]
 8000c74:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c78:	fb02 f201 	mul.w	r2, r2, r1
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <Enqueue+0x8c>)
 8000c80:	60d3      	str	r3, [r2, #12]
	//queue->commandSet[queue->rear] = command1_in;
	command_queue.size += 1;
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <Enqueue+0x8c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <Enqueue+0x8c>)
 8000c8a:	6013      	str	r3, [r2, #0]

	for(int i=0;i<20;i++){
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e013      	b.n	8000cba <Enqueue+0x7a>
		command_queue.command_set[command_queue.rear].mesg[i] = command_in[i];
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <Enqueue+0x8c>)
 8000c9a:	68d2      	ldr	r2, [r2, #12]
 8000c9c:	7818      	ldrb	r0, [r3, #0]
 8000c9e:	490b      	ldr	r1, [pc, #44]	; (8000ccc <Enqueue+0x8c>)
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	18ca      	adds	r2, r1, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4413      	add	r3, r2
 8000cae:	3310      	adds	r3, #16
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<20;i++){
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b13      	cmp	r3, #19
 8000cbe:	dde8      	ble.n	8000c92 <Enqueue+0x52>
 8000cc0:	e000      	b.n	8000cc4 <Enqueue+0x84>
	   return;
 8000cc2:	bf00      	nop
	}
	//printf("%d enqueued to queue\n", item);
}
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20001f0c 	.word	0x20001f0c

08000cd0 <Dequeue>:

struct command1 Dequeue()
{
 8000cd0:	b4b0      	push	{r4, r5, r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	/*
    if (isEmpty(command_queue))
        return command_queue.command_set[command_queue.front];
       */
    struct command1 command_out = command_queue.command_set[command_queue.front];
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <Dequeue+0x6c>)
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	4917      	ldr	r1, [pc, #92]	; (8000d3c <Dequeue+0x6c>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3310      	adds	r3, #16
 8000cea:	f107 040c 	add.w	r4, r7, #12
 8000cee:	461d      	mov	r5, r3
 8000cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	6023      	str	r3, [r4, #0]
    command_queue.front = (command_queue.front + 1) % command_queue.capacity;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <Dequeue+0x6c>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <Dequeue+0x6c>)
 8000d00:	6852      	ldr	r2, [r2, #4]
 8000d02:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d06:	fb02 f201 	mul.w	r2, r2, r1
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <Dequeue+0x6c>)
 8000d0e:	6093      	str	r3, [r2, #8]
    command_queue.size = command_queue.size - 1;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <Dequeue+0x6c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <Dequeue+0x6c>)
 8000d18:	6013      	str	r3, [r2, #0]

    return command_out;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	461d      	mov	r5, r3
 8000d1e:	f107 040c 	add.w	r4, r7, #12
 8000d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d24:	6028      	str	r0, [r5, #0]
 8000d26:	6069      	str	r1, [r5, #4]
 8000d28:	60aa      	str	r2, [r5, #8]
 8000d2a:	60eb      	str	r3, [r5, #12]
 8000d2c:	6820      	ldr	r0, [r4, #0]
 8000d2e:	6128      	str	r0, [r5, #16]
}
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	3724      	adds	r7, #36	; 0x24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bcb0      	pop	{r4, r5, r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20001f0c 	.word	0x20001f0c

08000d40 <array_to_uint16_angel.6989>:
void process_command()
{

	uint8_t out_msg[20];
	uint16_t array_to_uint16_angel(uint8_t* uint8_array)
	{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	f8c7 c000 	str.w	ip, [r7]
		uint16_t res = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	81fb      	strh	r3, [r7, #14]
		for(int i=0;i<3;i++){
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	e012      	b.n	8000d7c <array_to_uint16_angel.6989+0x3c>
			res*=10;
 8000d56:	89fb      	ldrh	r3, [r7, #14]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	81fb      	strh	r3, [r7, #14]
			res+=(uint8_array[i]-(uint8_t)48);
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	4413      	add	r3, r2
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	89fb      	ldrh	r3, [r7, #14]
 8000d6e:	4413      	add	r3, r2
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	3b30      	subs	r3, #48	; 0x30
 8000d74:	81fb      	strh	r3, [r7, #14]
		for(int i=0;i<3;i++){
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	dde9      	ble.n	8000d56 <array_to_uint16_angel.6989+0x16>
		}
		return res;
 8000d82:	89fb      	ldrh	r3, [r7, #14]
	}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
	...

08000d90 <process_command>:
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b099      	sub	sp, #100	; 0x64
 8000d94:	af02      	add	r7, sp, #8
void process_command()
 8000d96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
			res+=(uint8_array[i]-(uint8_t)48);
		}
		return res;
	}

	if(!isEmpty())
 8000d9c:	f7ff ff2e 	bl	8000bfc <isEmpty>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 80fe 	bne.w	8000fa4 <process_command+0x214>
	{
		struct command1 command_in_struct = Dequeue();
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff8f 	bl	8000cd0 <Dequeue>
		uint8_t command_in[20];
		for(int i=0; i<20;i++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	657b      	str	r3, [r7, #84]	; 0x54
 8000db6:	e00d      	b.n	8000dd4 <process_command+0x44>
		{
			command_in[i] = command_in_struct.mesg[i];
 8000db8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dbe:	4413      	add	r3, r2
 8000dc0:	7819      	ldrb	r1, [r3, #0]
 8000dc2:	f107 0210 	add.w	r2, r7, #16
 8000dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dc8:	4413      	add	r3, r2
 8000dca:	460a      	mov	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<20;i++)
 8000dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8000dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dd6:	2b13      	cmp	r3, #19
 8000dd8:	ddee      	ble.n	8000db8 <process_command+0x28>
		}
		command_in[19]='\0';
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23



		//get angel
		uint8_t cmd1[3] = {command_in[0],command_in[1],command_in[2]};
 8000de0:	7c3b      	ldrb	r3, [r7, #16]
 8000de2:	733b      	strb	r3, [r7, #12]
 8000de4:	7c7b      	ldrb	r3, [r7, #17]
 8000de6:	737b      	strb	r3, [r7, #13]
 8000de8:	7cbb      	ldrb	r3, [r7, #18]
 8000dea:	73bb      	strb	r3, [r7, #14]
		//sscanf(cmd1, "%d", &angel);
		angel = array_to_uint16_angel(cmd1);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000df4:	4694      	mov	ip, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffa2 	bl	8000d40 <array_to_uint16_angel.6989>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b6d      	ldr	r3, [pc, #436]	; (8000fb8 <process_command+0x228>)
 8000e02:	801a      	strh	r2, [r3, #0]

		sprintf(out_msg,"%s",command_in);//"%s",command_in);
 8000e04:	f107 0210 	add.w	r2, r7, #16
 8000e08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e0c:	496b      	ldr	r1, [pc, #428]	; (8000fbc <process_command+0x22c>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f007 fbac 	bl	800856c <siprintf>
		OLED_ShowString(0,0,out_msg);
 8000e14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e18:	461a      	mov	r2, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f007 faa7 	bl	8008370 <OLED_ShowString>


		if(angel<59 ||angel>90)
 8000e22:	4b65      	ldr	r3, [pc, #404]	; (8000fb8 <process_command+0x228>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	2b3a      	cmp	r3, #58	; 0x3a
 8000e28:	d903      	bls.n	8000e32 <process_command+0xa2>
 8000e2a:	4b63      	ldr	r3, [pc, #396]	; (8000fb8 <process_command+0x228>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	2b5a      	cmp	r3, #90	; 0x5a
 8000e30:	d902      	bls.n	8000e38 <process_command+0xa8>
			angel=72;
 8000e32:	4b61      	ldr	r3, [pc, #388]	; (8000fb8 <process_command+0x228>)
 8000e34:	2248      	movs	r2, #72	; 0x48
 8000e36:	801a      	strh	r2, [r3, #0]




		//control for left wheel
		left_dir = command_in[3];
 8000e38:	7cfb      	ldrb	r3, [r7, #19]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b60      	ldr	r3, [pc, #384]	; (8000fc0 <process_command+0x230>)
 8000e3e:	801a      	strh	r2, [r3, #0]
		right_dir = command_in[8];
 8000e40:	7e3b      	ldrb	r3, [r7, #24]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b5f      	ldr	r3, [pc, #380]	; (8000fc4 <process_command+0x234>)
 8000e46:	801a      	strh	r2, [r3, #0]


		uint8_t cmd2[4] = {command_in[4],command_in[5],command_in[6],command_in[7]};
 8000e48:	7d3b      	ldrb	r3, [r7, #20]
 8000e4a:	723b      	strb	r3, [r7, #8]
 8000e4c:	7d7b      	ldrb	r3, [r7, #21]
 8000e4e:	727b      	strb	r3, [r7, #9]
 8000e50:	7dbb      	ldrb	r3, [r7, #22]
 8000e52:	72bb      	strb	r3, [r7, #10]
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
 8000e56:	72fb      	strb	r3, [r7, #11]
		uint8_t cmd3[4] = {command_in[9], command_in[10], command_in[11],command_in[12]};
 8000e58:	7e7b      	ldrb	r3, [r7, #25]
 8000e5a:	713b      	strb	r3, [r7, #4]
 8000e5c:	7ebb      	ldrb	r3, [r7, #26]
 8000e5e:	717b      	strb	r3, [r7, #5]
 8000e60:	7efb      	ldrb	r3, [r7, #27]
 8000e62:	71bb      	strb	r3, [r7, #6]
 8000e64:	7f3b      	ldrb	r3, [r7, #28]
 8000e66:	71fb      	strb	r3, [r7, #7]

		tar_left_speed = array_to_uint16(cmd2);
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e70:	4694      	mov	ip, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f8b8 	bl	8000fe8 <array_to_uint16.6997>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <process_command+0x238>)
 8000e7e:	801a      	strh	r2, [r3, #0]
		left_speed = tar_left_speed;
 8000e80:	4b51      	ldr	r3, [pc, #324]	; (8000fc8 <process_command+0x238>)
 8000e82:	881a      	ldrh	r2, [r3, #0]
 8000e84:	4b51      	ldr	r3, [pc, #324]	; (8000fcc <process_command+0x23c>)
 8000e86:	801a      	strh	r2, [r3, #0]
		left_ignore_time = 0;
 8000e88:	4b51      	ldr	r3, [pc, #324]	; (8000fd0 <process_command+0x240>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	801a      	strh	r2, [r3, #0]
		m_pidData_p->output = tar_left_speed;
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <process_command+0x238>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	4a50      	ldr	r2, [pc, #320]	; (8000fd4 <process_command+0x244>)
 8000e94:	6814      	ldr	r4, [r2, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fb0c 	bl	80004b4 <__aeabi_ui2d>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
		m_pidData_p->prevOutput = tar_left_speed;
 8000ea4:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <process_command+0x238>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	4a4a      	ldr	r2, [pc, #296]	; (8000fd4 <process_command+0x244>)
 8000eaa:	6814      	ldr	r4, [r2, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fb01 	bl	80004b4 <__aeabi_ui2d>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
		Pid_SetSetPoint(m_pidData_p ,(double)tar_left_speed);
 8000eba:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <process_command+0x244>)
 8000ebc:	681c      	ldr	r4, [r3, #0]
 8000ebe:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <process_command+0x238>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff faf6 	bl	80004b4 <__aeabi_ui2d>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f001 fad5 	bl	800247c <Pid_SetSetPoint>
		Pid_SetOutputLimits(m_pidData_p, 0, 6000);
 8000ed2:	4b40      	ldr	r3, [pc, #256]	; (8000fd4 <process_command+0x244>)
 8000ed4:	6819      	ldr	r1, [r3, #0]
 8000ed6:	a336      	add	r3, pc, #216	; (adr r3, 8000fb0 <process_command+0x220>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	e9cd 2300 	strd	r2, r3, [sp]
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	4608      	mov	r0, r1
 8000eea:	f001 fb6b 	bl	80025c4 <Pid_SetOutputLimits>


		tar_right_speed = array_to_uint16(cmd3);
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ef4:	4694      	mov	ip, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f876 	bl	8000fe8 <array_to_uint16.6997>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <process_command+0x248>)
 8000f02:	801a      	strh	r2, [r3, #0]
		right_speed = tar_right_speed;
 8000f04:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <process_command+0x248>)
 8000f06:	881a      	ldrh	r2, [r3, #0]
 8000f08:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <process_command+0x24c>)
 8000f0a:	801a      	strh	r2, [r3, #0]
		right_ignore_time = 0;
 8000f0c:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <process_command+0x250>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	801a      	strh	r2, [r3, #0]
		m_pidData_right_p->output = tar_right_speed;
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <process_command+0x248>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	4a33      	ldr	r2, [pc, #204]	; (8000fe4 <process_command+0x254>)
 8000f18:	6814      	ldr	r4, [r2, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff faca 	bl	80004b4 <__aeabi_ui2d>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
		m_pidData_right_p->prevOutput = tar_right_speed;
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <process_command+0x248>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	4a2d      	ldr	r2, [pc, #180]	; (8000fe4 <process_command+0x254>)
 8000f2e:	6814      	ldr	r4, [r2, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fabf 	bl	80004b4 <__aeabi_ui2d>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
		Pid_SetSetPoint(m_pidData_right_p ,(double)tar_right_speed);
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <process_command+0x254>)
 8000f40:	681c      	ldr	r4, [r3, #0]
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <process_command+0x248>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fab4 	bl	80004b4 <__aeabi_ui2d>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4620      	mov	r0, r4
 8000f52:	f001 fa93 	bl	800247c <Pid_SetSetPoint>
		Pid_SetOutputLimits(m_pidData_right_p, 0, 6000);
 8000f56:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <process_command+0x254>)
 8000f58:	6819      	ldr	r1, [r3, #0]
 8000f5a:	a315      	add	r3, pc, #84	; (adr r3, 8000fb0 <process_command+0x220>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	e9cd 2300 	strd	r2, r3, [sp]
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	f001 fb29 	bl	80025c4 <Pid_SetOutputLimits>


		//Pid_SetOutputLimits(m_pidData_p,(tar_left_speed*0.5), (tar_left_speed*1.5));

		uint8_t cmd4[4] = {command_in[13], command_in[14], command_in[15],'0'};
 8000f72:	7f7b      	ldrb	r3, [r7, #29]
 8000f74:	703b      	strb	r3, [r7, #0]
 8000f76:	7fbb      	ldrb	r3, [r7, #30]
 8000f78:	707b      	strb	r3, [r7, #1]
 8000f7a:	7ffb      	ldrb	r3, [r7, #31]
 8000f7c:	70bb      	strb	r3, [r7, #2]
 8000f7e:	2330      	movs	r3, #48	; 0x30
 8000f80:	70fb      	strb	r3, [r7, #3]
		uint16_t time = array_to_uint16(cmd4);
 8000f82:	463b      	mov	r3, r7
 8000f84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f88:	4694      	mov	ip, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f82c 	bl	8000fe8 <array_to_uint16.6997>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

		//call all the functions to quickly change all settings
		update();
 8000f96:	f000 f851 	bl	800103c <update>


		osDelay(time);
 8000f9a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fbea 	bl	8005778 <osDelay>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	375c      	adds	r7, #92	; 0x5c
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	f3af 8000 	nop.w
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	40b77000 	.word	0x40b77000
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	08008e24 	.word	0x08008e24
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000002 	.word	0x20000002
 8000fc8:	200000ac 	.word	0x200000ac
 8000fcc:	200000aa 	.word	0x200000aa
 8000fd0:	20001d50 	.word	0x20001d50
 8000fd4:	20002110 	.word	0x20002110
 8000fd8:	200000b0 	.word	0x200000b0
 8000fdc:	200000ae 	.word	0x200000ae
 8000fe0:	20001f08 	.word	0x20001f08
 8000fe4:	20001d08 	.word	0x20001d08

08000fe8 <array_to_uint16.6997>:
	{
 8000fe8:	b480      	push	{r7}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	f8c7 c000 	str.w	ip, [r7]
		uint16_t res = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	82fb      	strh	r3, [r7, #22]
		int len = sizeof(uint8_array)/sizeof(uint8_array[0]);
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<len;i++){
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	e012      	b.n	8001028 <array_to_uint16.6997+0x40>
			res*=10;
 8001002:	8afb      	ldrh	r3, [r7, #22]
 8001004:	461a      	mov	r2, r3
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	4413      	add	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	82fb      	strh	r3, [r7, #22]
			res+=(uint8_array[i]-(uint8_t)48);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b29a      	uxth	r2, r3
 8001018:	8afb      	ldrh	r3, [r7, #22]
 800101a:	4413      	add	r3, r2
 800101c:	b29b      	uxth	r3, r3
 800101e:	3b30      	subs	r3, #48	; 0x30
 8001020:	82fb      	strh	r3, [r7, #22]
		for(int i=0;i<len;i++){
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	3301      	adds	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbe8      	blt.n	8001002 <array_to_uint16.6997+0x1a>
		return res;
 8001030:	8afb      	ldrh	r3, [r7, #22]
	}
 8001032:	4618      	mov	r0, r3
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <update>:


void update()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
//motor
	if(left_dir=='0')
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <update+0x8c>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	2b30      	cmp	r3, #48	; 0x30
 8001046:	d10a      	bne.n	800105e <update+0x22>
	{
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2104      	movs	r1, #4
 800104c:	481f      	ldr	r0, [pc, #124]	; (80010cc <update+0x90>)
 800104e:	f001 ff7f 	bl	8002f50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2108      	movs	r1, #8
 8001056:	481d      	ldr	r0, [pc, #116]	; (80010cc <update+0x90>)
 8001058:	f001 ff7a 	bl	8002f50 <HAL_GPIO_WritePin>
 800105c:	e009      	b.n	8001072 <update+0x36>
	}else{
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2104      	movs	r1, #4
 8001062:	481a      	ldr	r0, [pc, #104]	; (80010cc <update+0x90>)
 8001064:	f001 ff74 	bl	8002f50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2108      	movs	r1, #8
 800106c:	4817      	ldr	r0, [pc, #92]	; (80010cc <update+0x90>)
 800106e:	f001 ff6f 	bl	8002f50 <HAL_GPIO_WritePin>




	// Modify the comparison value for the duty cycle
	if(right_dir=='0')
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <update+0x94>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	2b30      	cmp	r3, #48	; 0x30
 8001078:	d10a      	bne.n	8001090 <update+0x54>
	{
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2120      	movs	r1, #32
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <update+0x90>)
 8001080:	f001 ff66 	bl	8002f50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2110      	movs	r1, #16
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <update+0x90>)
 800108a:	f001 ff61 	bl	8002f50 <HAL_GPIO_WritePin>
 800108e:	e009      	b.n	80010a4 <update+0x68>
	}else{
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2120      	movs	r1, #32
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <update+0x90>)
 8001096:	f001 ff5b 	bl	8002f50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2110      	movs	r1, #16
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <update+0x90>)
 80010a0:	f001 ff56 	bl	8002f50 <HAL_GPIO_WritePin>
	}
	// Modify the comparison value for the duty cycle
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,left_speed);
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <update+0x98>)
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <update+0x9c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,right_speed);
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <update+0xa0>)
 80010b0:	881a      	ldrh	r2, [r3, #0]
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <update+0xa4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38


//turn

	htim1.Instance->CCR4 = angel;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <update+0xa8>)
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <update+0xac>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000000 	.word	0x20000000
 80010cc:	40010800 	.word	0x40010800
 80010d0:	20000002 	.word	0x20000002
 80010d4:	200000aa 	.word	0x200000aa
 80010d8:	20001c74 	.word	0x20001c74
 80010dc:	200000ae 	.word	0x200000ae
 80010e0:	20001d70 	.word	0x20001d70
 80010e4:	20000004 	.word	0x20000004
 80010e8:	20001dc0 	.word	0x20001dc0

080010ec <HCSR04_Read>:

void HCSR04_Read()
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Sonic_Trig_GPIO_Port, Sonic_Trig_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2110      	movs	r1, #16
 80010f4:	480a      	ldr	r0, [pc, #40]	; (8001120 <HCSR04_Read+0x34>)
 80010f6:	f001 ff2b 	bl	8002f50 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f001 fb20 	bl	8002740 <HAL_Delay>
	HAL_GPIO_WritePin(Sonic_Trig_GPIO_Port, Sonic_Trig_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2110      	movs	r1, #16
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <HCSR04_Read+0x34>)
 8001106:	f001 ff23 	bl	8002f50 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HCSR04_Read+0x38>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HCSR04_Read+0x38>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0202 	orr.w	r2, r2, #2
 8001118:	60da      	str	r2, [r3, #12]
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40010c00 	.word	0x40010c00
 8001124:	20001dc0 	.word	0x20001dc0

08001128 <send_queue_size>:
void send_queue_size()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	if(command_queue.size>=10)
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <send_queue_size+0x58>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b09      	cmp	r3, #9
 8001134:	dd10      	ble.n	8001158 <send_queue_size+0x30>
		{//send two bytes, first is 0, next is the number, which ranges from 0-9
			uint8_t out_msg[1];
			sprintf(out_msg,"%d",(uint8_t)command_queue.size);
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <send_queue_size+0x58>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4910      	ldr	r1, [pc, #64]	; (8001184 <send_queue_size+0x5c>)
 8001142:	4618      	mov	r0, r3
 8001144:	f007 fa12 	bl	800856c <siprintf>
			HAL_UART_Transmit(&huart3,(uint8_t *)out_msg,2,0xFFFF);
 8001148:	1d39      	adds	r1, r7, #4
 800114a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114e:	2202      	movs	r2, #2
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <send_queue_size+0x60>)
 8001152:	f003 fd17 	bl	8004b84 <HAL_UART_Transmit>
			//send two byte, directly
			uint16_t out_msg[2];
			sprintf(out_msg,"0%d",(uint8_t)command_queue.size);
			HAL_UART_Transmit(&huart3,(uint8_t *)out_msg,2,0xFFFF);
		}
}
 8001156:	e00f      	b.n	8001178 <send_queue_size+0x50>
			sprintf(out_msg,"0%d",(uint8_t)command_queue.size);
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <send_queue_size+0x58>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	463b      	mov	r3, r7
 8001162:	490a      	ldr	r1, [pc, #40]	; (800118c <send_queue_size+0x64>)
 8001164:	4618      	mov	r0, r3
 8001166:	f007 fa01 	bl	800856c <siprintf>
			HAL_UART_Transmit(&huart3,(uint8_t *)out_msg,2,0xFFFF);
 800116a:	4639      	mov	r1, r7
 800116c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001170:	2202      	movs	r2, #2
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <send_queue_size+0x60>)
 8001174:	f003 fd06 	bl	8004b84 <HAL_UART_Transmit>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20001f0c 	.word	0x20001f0c
 8001184:	08008e28 	.word	0x08008e28
 8001188:	20001d0c 	.word	0x20001d0c
 800118c:	08008e2c 	.word	0x08008e2c

08001190 <send_complete>:

void send_complete()//98
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint16_t out_msg[2];
	sprintf(out_msg,"%d",98);
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2262      	movs	r2, #98	; 0x62
 800119a:	4907      	ldr	r1, [pc, #28]	; (80011b8 <send_complete+0x28>)
 800119c:	4618      	mov	r0, r3
 800119e:	f007 f9e5 	bl	800856c <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)out_msg,2,0xFFFF);
 80011a2:	1d39      	adds	r1, r7, #4
 80011a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a8:	2202      	movs	r2, #2
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <send_complete+0x2c>)
 80011ac:	f003 fcea 	bl	8004b84 <HAL_UART_Transmit>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	08008e28 	.word	0x08008e28
 80011bc:	20001d0c 	.word	0x20001d0c

080011c0 <send_fin>:

void send_fin()//99
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
	uint16_t out_msg[2];
	sprintf(out_msg,"%d",99);
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2263      	movs	r2, #99	; 0x63
 80011ca:	4907      	ldr	r1, [pc, #28]	; (80011e8 <send_fin+0x28>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f007 f9cd 	bl	800856c <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)out_msg,2,0xFFFF);
 80011d2:	1d39      	adds	r1, r7, #4
 80011d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d8:	2202      	movs	r2, #2
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <send_fin+0x2c>)
 80011dc:	f003 fcd2 	bl	8004b84 <HAL_UART_Transmit>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08008e28 	.word	0x08008e28
 80011ec:	20001d0c 	.word	0x20001d0c

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  index=0;
 80011f4:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <main+0xb0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fa:	f001 fa3f 	bl	800267c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fe:	f000 f877 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001202:	f000 fb19 	bl	8001838 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001206:	f000 fa43 	bl	8001690 <MX_TIM8_Init>
  MX_TIM2_Init();
 800120a:	f000 f94b 	bl	80014a4 <MX_TIM2_Init>
  MX_TIM1_Init();
 800120e:	f000 f8ab 	bl	8001368 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001212:	f000 fae7 	bl	80017e4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001216:	f000 f999 	bl	800154c <MX_TIM3_Init>
  MX_TIM4_Init();
 800121a:	f000 f9eb 	bl	80015f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800121e:	f007 f8d9 	bl	80083d4 <OLED_Init>

  HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,20);
 8001222:	2214      	movs	r2, #20
 8001224:	491f      	ldr	r1, [pc, #124]	; (80012a4 <main+0xb4>)
 8001226:	4820      	ldr	r0, [pc, #128]	; (80012a8 <main+0xb8>)
 8001228:	f003 fd3e 	bl	8004ca8 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800122c:	f004 f994 	bl	8005558 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8001230:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <main+0xbc>)
 8001232:	2102      	movs	r1, #2
 8001234:	2010      	movs	r0, #16
 8001236:	f004 facd 	bl	80057d4 <osMessageQueueNew>
 800123a:	4603      	mov	r3, r0
 800123c:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <main+0xc0>)
 800123e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  Queue_init();
 8001240:	f7ff fcc6 	bl	8000bd0 <Queue_init>
  my_PID_init();
 8001244:	f7ff fc6c 	bl	8000b20 <my_PID_init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(receiveAndTransmit, NULL, &defaultTask_attributes);
 8001248:	4a1a      	ldr	r2, [pc, #104]	; (80012b4 <main+0xc4>)
 800124a:	2100      	movs	r1, #0
 800124c:	481a      	ldr	r0, [pc, #104]	; (80012b8 <main+0xc8>)
 800124e:	f004 f9e9 	bl	8005624 <osThreadNew>
 8001252:	4603      	mov	r3, r0
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <main+0xcc>)
 8001256:	6013      	str	r3, [r2, #0]

  /* creation of ShowTask */
  ShowTaskHandle = osThreadNew(show, NULL, &ShowTask_attributes);
 8001258:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <main+0xd0>)
 800125a:	2100      	movs	r1, #0
 800125c:	4819      	ldr	r0, [pc, #100]	; (80012c4 <main+0xd4>)
 800125e:	f004 f9e1 	bl	8005624 <osThreadNew>
 8001262:	4603      	mov	r3, r0
 8001264:	4a18      	ldr	r2, [pc, #96]	; (80012c8 <main+0xd8>)
 8001266:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motors, NULL, &MotorTask_attributes);
 8001268:	4a18      	ldr	r2, [pc, #96]	; (80012cc <main+0xdc>)
 800126a:	2100      	movs	r1, #0
 800126c:	4818      	ldr	r0, [pc, #96]	; (80012d0 <main+0xe0>)
 800126e:	f004 f9d9 	bl	8005624 <osThreadNew>
 8001272:	4603      	mov	r3, r0
 8001274:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <main+0xe4>)
 8001276:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 8001278:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <main+0xe8>)
 800127a:	2100      	movs	r1, #0
 800127c:	4817      	ldr	r0, [pc, #92]	; (80012dc <main+0xec>)
 800127e:	f004 f9d1 	bl	8005624 <osThreadNew>
 8001282:	4603      	mov	r3, r0
 8001284:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <main+0xf0>)
 8001286:	6013      	str	r3, [r2, #0]

  /* creation of Motor_Turn */
  Motor_TurnHandle = osThreadNew(Turn, NULL, &Motor_Turn_attributes);
 8001288:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <main+0xf4>)
 800128a:	2100      	movs	r1, #0
 800128c:	4816      	ldr	r0, [pc, #88]	; (80012e8 <main+0xf8>)
 800128e:	f004 f9c9 	bl	8005624 <osThreadNew>
 8001292:	4603      	mov	r3, r0
 8001294:	4a15      	ldr	r2, [pc, #84]	; (80012ec <main+0xfc>)
 8001296:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001298:	f004 f990 	bl	80055bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800129c:	e7fe      	b.n	800129c <main+0xac>
 800129e:	bf00      	nop
 80012a0:	2000009c 	.word	0x2000009c
 80012a4:	20001e0c 	.word	0x20001e0c
 80012a8:	20001d0c 	.word	0x20001d0c
 80012ac:	08008f50 	.word	0x08008f50
 80012b0:	20001e20 	.word	0x20001e20
 80012b4:	08008e9c 	.word	0x08008e9c
 80012b8:	08001b85 	.word	0x08001b85
 80012bc:	20001c70 	.word	0x20001c70
 80012c0:	08008ec0 	.word	0x08008ec0
 80012c4:	08001bf1 	.word	0x08001bf1
 80012c8:	20001d04 	.word	0x20001d04
 80012cc:	08008ee4 	.word	0x08008ee4
 80012d0:	08001ce9 	.word	0x08001ce9
 80012d4:	20001d68 	.word	0x20001d68
 80012d8:	08008f08 	.word	0x08008f08
 80012dc:	08001d99 	.word	0x08001d99
 80012e0:	20001d6c 	.word	0x20001d6c
 80012e4:	08008f2c 	.word	0x08008f2c
 80012e8:	08001ea5 	.word	0x08001ea5
 80012ec:	20001dbc 	.word	0x20001dbc

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b090      	sub	sp, #64	; 0x40
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0318 	add.w	r3, r7, #24
 80012fa:	2228      	movs	r2, #40	; 0x28
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f007 f92c 	bl	800855c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001316:	2301      	movs	r3, #1
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131a:	2310      	movs	r3, #16
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800131e:	2300      	movs	r3, #0
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fe74 	bl	8003014 <HAL_RCC_OscConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001332:	f000 fdcd 	bl	8001ed0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001336:	230f      	movs	r3, #15
 8001338:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f002 f8e0 	bl	8003514 <HAL_RCC_ClockConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800135a:	f000 fdb9 	bl	8001ed0 <Error_Handler>
  }
}
 800135e:	bf00      	nop
 8001360:	3740      	adds	r7, #64	; 0x40
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	; 0x58
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2220      	movs	r2, #32
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f007 f8db 	bl	800855c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <MX_TIM1_Init+0x134>)
 80013a8:	4a3d      	ldr	r2, [pc, #244]	; (80014a0 <MX_TIM1_Init+0x138>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <MX_TIM1_Init+0x134>)
 80013ae:	22a0      	movs	r2, #160	; 0xa0
 80013b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b3a      	ldr	r3, [pc, #232]	; (800149c <MX_TIM1_Init+0x134>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80013b8:	4b38      	ldr	r3, [pc, #224]	; (800149c <MX_TIM1_Init+0x134>)
 80013ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b36      	ldr	r3, [pc, #216]	; (800149c <MX_TIM1_Init+0x134>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <MX_TIM1_Init+0x134>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013cc:	4b33      	ldr	r3, [pc, #204]	; (800149c <MX_TIM1_Init+0x134>)
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d2:	4832      	ldr	r0, [pc, #200]	; (800149c <MX_TIM1_Init+0x134>)
 80013d4:	f002 fa38 	bl	8003848 <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013de:	f000 fd77 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ec:	4619      	mov	r1, r3
 80013ee:	482b      	ldr	r0, [pc, #172]	; (800149c <MX_TIM1_Init+0x134>)
 80013f0:	f002 feda 	bl	80041a8 <HAL_TIM_ConfigClockSource>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013fa:	f000 fd69 	bl	8001ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013fe:	4827      	ldr	r0, [pc, #156]	; (800149c <MX_TIM1_Init+0x134>)
 8001400:	f002 faca 	bl	8003998 <HAL_TIM_PWM_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800140a:	f000 fd61 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001416:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800141a:	4619      	mov	r1, r3
 800141c:	481f      	ldr	r0, [pc, #124]	; (800149c <MX_TIM1_Init+0x134>)
 800141e:	f003 fa95 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001428:	f000 fd52 	bl	8001ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142c:	2360      	movs	r3, #96	; 0x60
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	220c      	movs	r2, #12
 800144a:	4619      	mov	r1, r3
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <MX_TIM1_Init+0x134>)
 800144e:	f002 fded 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001458:	f000 fd3a 	bl	8001ed0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001474:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <MX_TIM1_Init+0x134>)
 8001480:	f003 fad0 	bl	8004a24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800148a:	f000 fd21 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <MX_TIM1_Init+0x134>)
 8001490:	f000 fe62 	bl	8002158 <HAL_TIM_MspPostInit>

}
 8001494:	bf00      	nop
 8001496:	3758      	adds	r7, #88	; 0x58
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20001dc0 	.word	0x20001dc0
 80014a0:	40012c00 	.word	0x40012c00

080014a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	; 0x30
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	2224      	movs	r2, #36	; 0x24
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f007 f852 	bl	800855c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <MX_TIM2_Init+0xa4>)
 80014c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <MX_TIM2_Init+0xa4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <MX_TIM2_Init+0xa4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <MX_TIM2_Init+0xa4>)
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_TIM2_Init+0xa4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <MX_TIM2_Init+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014e8:	2303      	movs	r3, #3
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f0:	2301      	movs	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014f8:	230a      	movs	r3, #10
 80014fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001500:	2301      	movs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001508:	230a      	movs	r3, #10
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4619      	mov	r1, r3
 8001512:	480d      	ldr	r0, [pc, #52]	; (8001548 <MX_TIM2_Init+0xa4>)
 8001514:	f002 fb52 	bl	8003bbc <HAL_TIM_Encoder_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800151e:	f000 fcd7 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <MX_TIM2_Init+0xa4>)
 8001530:	f003 fa0c 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800153a:	f000 fcc9 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	3730      	adds	r7, #48	; 0x30
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20001e24 	.word	0x20001e24

0800154c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	; 0x30
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2224      	movs	r2, #36	; 0x24
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f006 fffe 	bl	800855c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <MX_TIM3_Init+0xa0>)
 800156a:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <MX_TIM3_Init+0xa4>)
 800156c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <MX_TIM3_Init+0xa0>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <MX_TIM3_Init+0xa0>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <MX_TIM3_Init+0xa0>)
 800157c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001580:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_TIM3_Init+0xa0>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_TIM3_Init+0xa0>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800158e:	2303      	movs	r3, #3
 8001590:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001596:	2301      	movs	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800159e:	230a      	movs	r3, #10
 80015a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015a6:	2301      	movs	r3, #1
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80015ae:	230a      	movs	r3, #10
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <MX_TIM3_Init+0xa0>)
 80015ba:	f002 faff 	bl	8003bbc <HAL_TIM_Encoder_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015c4:	f000 fc84 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_TIM3_Init+0xa0>)
 80015d6:	f003 f9b9 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015e0:	f000 fc76 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	3730      	adds	r7, #48	; 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20001d70 	.word	0x20001d70
 80015f0:	40000400 	.word	0x40000400

080015f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_TIM4_Init+0x94>)
 8001612:	4a1e      	ldr	r2, [pc, #120]	; (800168c <MX_TIM4_Init+0x98>)
 8001614:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_TIM4_Init+0x94>)
 8001618:	2248      	movs	r2, #72	; 0x48
 800161a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_TIM4_Init+0x94>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_TIM4_Init+0x94>)
 8001624:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001628:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_TIM4_Init+0x94>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_TIM4_Init+0x94>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001636:	4814      	ldr	r0, [pc, #80]	; (8001688 <MX_TIM4_Init+0x94>)
 8001638:	f002 f906 	bl	8003848 <HAL_TIM_Base_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001642:	f000 fc45 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	4619      	mov	r1, r3
 8001652:	480d      	ldr	r0, [pc, #52]	; (8001688 <MX_TIM4_Init+0x94>)
 8001654:	f002 fda8 	bl	80041a8 <HAL_TIM_ConfigClockSource>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800165e:	f000 fc37 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_TIM4_Init+0x94>)
 8001670:	f003 f96c 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800167a:	f000 fc29 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20001cbc 	.word	0x20001cbc
 800168c:	40000800 	.word	0x40000800

08001690 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b096      	sub	sp, #88	; 0x58
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2220      	movs	r2, #32
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f006 ff47 	bl	800855c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016ce:	4b43      	ldr	r3, [pc, #268]	; (80017dc <MX_TIM8_Init+0x14c>)
 80016d0:	4a43      	ldr	r2, [pc, #268]	; (80017e0 <MX_TIM8_Init+0x150>)
 80016d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016d4:	4b41      	ldr	r3, [pc, #260]	; (80017dc <MX_TIM8_Init+0x14c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b40      	ldr	r3, [pc, #256]	; (80017dc <MX_TIM8_Init+0x14c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80016e0:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <MX_TIM8_Init+0x14c>)
 80016e2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <MX_TIM8_Init+0x14c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <MX_TIM8_Init+0x14c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f4:	4b39      	ldr	r3, [pc, #228]	; (80017dc <MX_TIM8_Init+0x14c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016fa:	4838      	ldr	r0, [pc, #224]	; (80017dc <MX_TIM8_Init+0x14c>)
 80016fc:	f002 f8a4 	bl	8003848 <HAL_TIM_Base_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001706:	f000 fbe3 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001710:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001714:	4619      	mov	r1, r3
 8001716:	4831      	ldr	r0, [pc, #196]	; (80017dc <MX_TIM8_Init+0x14c>)
 8001718:	f002 fd46 	bl	80041a8 <HAL_TIM_ConfigClockSource>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001722:	f000 fbd5 	bl	8001ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001726:	482d      	ldr	r0, [pc, #180]	; (80017dc <MX_TIM8_Init+0x14c>)
 8001728:	f002 f936 	bl	8003998 <HAL_TIM_PWM_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001732:	f000 fbcd 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800173e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001742:	4619      	mov	r1, r3
 8001744:	4825      	ldr	r0, [pc, #148]	; (80017dc <MX_TIM8_Init+0x14c>)
 8001746:	f003 f901 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001750:	f000 fbbe 	bl	8001ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001754:	2360      	movs	r3, #96	; 0x60
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001760:	2300      	movs	r3, #0
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	2200      	movs	r2, #0
 8001776:	4619      	mov	r1, r3
 8001778:	4818      	ldr	r0, [pc, #96]	; (80017dc <MX_TIM8_Init+0x14c>)
 800177a:	f002 fc57 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001784:	f000 fba4 	bl	8001ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	2204      	movs	r2, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4812      	ldr	r0, [pc, #72]	; (80017dc <MX_TIM8_Init+0x14c>)
 8001792:	f002 fc4b 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800179c:	f000 fb98 	bl	8001ed0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <MX_TIM8_Init+0x14c>)
 80017c4:	f003 f92e 	bl	8004a24 <HAL_TIMEx_ConfigBreakDeadTime>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80017ce:	f000 fb7f 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	3758      	adds	r7, #88	; 0x58
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20001c74 	.word	0x20001c74
 80017e0:	40013400 	.word	0x40013400

080017e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <MX_USART3_UART_Init+0x50>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 80017f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 800181c:	f003 f965 	bl	8004aea <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001826:	f000 fb53 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20001d0c 	.word	0x20001d0c
 8001834:	40004800 	.word	0x40004800

08001838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800184c:	4b41      	ldr	r3, [pc, #260]	; (8001954 <MX_GPIO_Init+0x11c>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a40      	ldr	r2, [pc, #256]	; (8001954 <MX_GPIO_Init+0x11c>)
 8001852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <MX_GPIO_Init+0x11c>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <MX_GPIO_Init+0x11c>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a3a      	ldr	r2, [pc, #232]	; (8001954 <MX_GPIO_Init+0x11c>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b38      	ldr	r3, [pc, #224]	; (8001954 <MX_GPIO_Init+0x11c>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187c:	4b35      	ldr	r3, [pc, #212]	; (8001954 <MX_GPIO_Init+0x11c>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a34      	ldr	r2, [pc, #208]	; (8001954 <MX_GPIO_Init+0x11c>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <MX_GPIO_Init+0x11c>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <MX_GPIO_Init+0x11c>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a2e      	ldr	r2, [pc, #184]	; (8001954 <MX_GPIO_Init+0x11c>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <MX_GPIO_Init+0x11c>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80018b2:	4829      	ldr	r0, [pc, #164]	; (8001958 <MX_GPIO_Init+0x120>)
 80018b4:	f001 fb4c 	bl	8002f50 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	213c      	movs	r1, #60	; 0x3c
 80018bc:	4827      	ldr	r0, [pc, #156]	; (800195c <MX_GPIO_Init+0x124>)
 80018be:	f001 fb47 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sonic_Trig_GPIO_Port, Sonic_Trig_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2110      	movs	r1, #16
 80018c6:	4826      	ldr	r0, [pc, #152]	; (8001960 <MX_GPIO_Init+0x128>)
 80018c8:	f001 fb42 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80018cc:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80018d0:	613b      	str	r3, [r7, #16]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2302      	movs	r3, #2
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	4619      	mov	r1, r3
 80018e4:	481c      	ldr	r0, [pc, #112]	; (8001958 <MX_GPIO_Init+0x120>)
 80018e6:	f001 f99f 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80018ea:	233c      	movs	r3, #60	; 0x3c
 80018ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 0310 	add.w	r3, r7, #16
 80018fe:	4619      	mov	r1, r3
 8001900:	4816      	ldr	r0, [pc, #88]	; (800195c <MX_GPIO_Init+0x124>)
 8001902:	f001 f991 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sonic_Echo_Pin */
  GPIO_InitStruct.Pin = Sonic_Echo_Pin;
 8001906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800190a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_GPIO_Init+0x12c>)
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Sonic_Echo_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	4619      	mov	r1, r3
 800191a:	480f      	ldr	r0, [pc, #60]	; (8001958 <MX_GPIO_Init+0x120>)
 800191c:	f001 f984 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sonic_Trig_Pin */
  GPIO_InitStruct.Pin = Sonic_Trig_Pin;
 8001920:	2310      	movs	r3, #16
 8001922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2302      	movs	r3, #2
 800192e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sonic_Trig_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4619      	mov	r1, r3
 8001936:	480a      	ldr	r0, [pc, #40]	; (8001960 <MX_GPIO_Init+0x128>)
 8001938:	f001 f976 	bl	8002c28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2105      	movs	r1, #5
 8001940:	2017      	movs	r0, #23
 8001942:	f000 fff8 	bl	8002936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001946:	2017      	movs	r0, #23
 8001948:	f001 f811 	bl	800296e <HAL_NVIC_EnableIRQ>

}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	40011800 	.word	0x40011800
 800195c:	40010800 	.word	0x40010800
 8001960:	40010c00 	.word	0x40010c00
 8001964:	10310000 	.word	0x10310000

08001968 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b090      	sub	sp, #64	; 0x40
 800196c:	af00      	add	r7, sp, #0
 800196e:	61f8      	str	r0, [r7, #28]
	/*Prevent unused argument(s) compilation warning */
	//UNUSED(huart);
	//to show that the device has successful connection, we toggle the LED when new data is received
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001974:	4836      	ldr	r0, [pc, #216]	; (8001a50 <HAL_UART_RxCpltCallback+0xe8>)
 8001976:	f001 fb03 	bl	8002f80 <HAL_GPIO_TogglePin>

	//get the data received
	HAL_UART_Receive_IT(&huart3, (uint8_t *)receive_msg, 1);
 800197a:	2201      	movs	r2, #1
 800197c:	4935      	ldr	r1, [pc, #212]	; (8001a54 <HAL_UART_RxCpltCallback+0xec>)
 800197e:	4836      	ldr	r0, [pc, #216]	; (8001a58 <HAL_UART_RxCpltCallback+0xf0>)
 8001980:	f003 f992 	bl	8004ca8 <HAL_UART_Receive_IT>

	//"|" is a special character that marks the end of the command
	if(receive_msg[0]=='|')
 8001984:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <HAL_UART_RxCpltCallback+0xec>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b7c      	cmp	r3, #124	; 0x7c
 800198a:	d118      	bne.n	80019be <HAL_UART_RxCpltCallback+0x56>
	{
		//ensure the least length of the received command
		//if enough, enqueue the command to task queue
		//and set index to first to receive new data
		if (command[15]!=' ')
 800198c:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_UART_RxCpltCallback+0xf4>)
 800198e:	7bdb      	ldrb	r3, [r3, #15]
 8001990:	2b20      	cmp	r3, #32
 8001992:	d002      	beq.n	800199a <HAL_UART_RxCpltCallback+0x32>
			Enqueue(command);
 8001994:	4831      	ldr	r0, [pc, #196]	; (8001a5c <HAL_UART_RxCpltCallback+0xf4>)
 8001996:	f7ff f953 	bl	8000c40 <Enqueue>
		index=0;
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_UART_RxCpltCallback+0xf8>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
		//if not enough, it is viewed as invalid
		for(int i=0; i<20;i++) command[i] = ' ';
 80019a0:	2300      	movs	r3, #0
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019a4:	e007      	b.n	80019b6 <HAL_UART_RxCpltCallback+0x4e>
 80019a6:	4a2d      	ldr	r2, [pc, #180]	; (8001a5c <HAL_UART_RxCpltCallback+0xf4>)
 80019a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019aa:	4413      	add	r3, r2
 80019ac:	2220      	movs	r2, #32
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b2:	3301      	adds	r3, #1
 80019b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b8:	2b13      	cmp	r3, #19
 80019ba:	ddf4      	ble.n	80019a6 <HAL_UART_RxCpltCallback+0x3e>
			//not "|" or "?", then receiving part command,
			command[index] = receive_msg[0];
			index++;
		}
	}
}
 80019bc:	e044      	b.n	8001a48 <HAL_UART_RxCpltCallback+0xe0>
		if(receive_msg[0]=='?' || index==20){
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_UART_RxCpltCallback+0xec>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b3f      	cmp	r3, #63	; 0x3f
 80019c4:	d003      	beq.n	80019ce <HAL_UART_RxCpltCallback+0x66>
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_UART_RxCpltCallback+0xf8>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b14      	cmp	r3, #20
 80019cc:	d12f      	bne.n	8001a2e <HAL_UART_RxCpltCallback+0xc6>
			index=0;
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_UART_RxCpltCallback+0xf8>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<20;i++) command[i] = ' ';
 80019d4:	2300      	movs	r3, #0
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80019d8:	e007      	b.n	80019ea <HAL_UART_RxCpltCallback+0x82>
 80019da:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <HAL_UART_RxCpltCallback+0xf4>)
 80019dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019de:	4413      	add	r3, r2
 80019e0:	2220      	movs	r2, #32
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e6:	3301      	adds	r3, #1
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80019ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ec:	2b13      	cmp	r3, #19
 80019ee:	ddf4      	ble.n	80019da <HAL_UART_RxCpltCallback+0x72>
			while(command_queue.size>0) Dequeue();
 80019f0:	e003      	b.n	80019fa <HAL_UART_RxCpltCallback+0x92>
 80019f2:	463b      	mov	r3, r7
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f96b 	bl	8000cd0 <Dequeue>
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_UART_RxCpltCallback+0xfc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	dcf7      	bgt.n	80019f2 <HAL_UART_RxCpltCallback+0x8a>
			uint8_t default_command[20] = "0760000000000300";
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_UART_RxCpltCallback+0x100>)
 8001a04:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001a08:	461d      	mov	r5, r3
 8001a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a0e:	682b      	ldr	r3, [r5, #0]
 8001a10:	7023      	strb	r3, [r4, #0]
 8001a12:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8001a16:	2200      	movs	r2, #0
 8001a18:	801a      	strh	r2, [r3, #0]
 8001a1a:	709a      	strb	r2, [r3, #2]
			Enqueue(default_command);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f90d 	bl	8000c40 <Enqueue>
		    process_command();
 8001a26:	f7ff f9b3 	bl	8000d90 <process_command>
		if(receive_msg[0]=='?' || index==20){
 8001a2a:	bf00      	nop
}
 8001a2c:	e00c      	b.n	8001a48 <HAL_UART_RxCpltCallback+0xe0>
			command[index] = receive_msg[0];
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_UART_RxCpltCallback+0xf8>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_UART_RxCpltCallback+0xec>)
 8001a36:	7819      	ldrb	r1, [r3, #0]
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_UART_RxCpltCallback+0xf4>)
 8001a3a:	5499      	strb	r1, [r3, r2]
			index++;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_UART_RxCpltCallback+0xf8>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_UART_RxCpltCallback+0xf8>)
 8001a46:	701a      	strb	r2, [r3, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	3740      	adds	r7, #64	; 0x40
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a50:	40011800 	.word	0x40011800
 8001a54:	200000a0 	.word	0x200000a0
 8001a58:	20001d0c 	.word	0x20001d0c
 8001a5c:	20001d54 	.word	0x20001d54
 8001a60:	2000009c 	.word	0x2000009c
 8001a64:	20001f0c 	.word	0x20001f0c
 8001a68:	08008e30 	.word	0x08008e30
 8001a6c:	00000000 	.word	0x00000000

08001a70 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Sonic_Echo_Pin)
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a80:	d164      	bne.n	8001b4c <HAL_GPIO_EXTI_Callback+0xdc>
	{
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001a82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a86:	4836      	ldr	r0, [pc, #216]	; (8001b60 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a88:	f001 fa7a 	bl	8002f80 <HAL_GPIO_TogglePin>
		if(Is_First_Capture==0)
 8001a8c:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d108      	bne.n	8001aa6 <HAL_GPIO_EXTI_Callback+0x36>
		{
			//IC_Val1 = HAL_TIM_ReadCaptureValue(htim, TIM_CHANNEL_1);
			IC_Val1 = __HAL_TIM_GET_COUNTER(&htim4);
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	4a34      	ldr	r2, [pc, #208]	; (8001b6c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001a9c:	6013      	str	r3, [r2, #0]
			Is_First_Capture=1;
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
			Distance = ((Difference *0.68)*10)/45;
			Is_First_Capture = 0;
		}
	}

}
 8001aa4:	e052      	b.n	8001b4c <HAL_GPIO_EXTI_Callback+0xdc>
		}else if(Is_First_Capture==1)
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d14e      	bne.n	8001b4c <HAL_GPIO_EXTI_Callback+0xdc>
			IC_Val2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	4a2e      	ldr	r2, [pc, #184]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x100>)
 8001ab6:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
			if(IC_Val2 > IC_Val1)
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x100>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d907      	bls.n	8001adc <HAL_GPIO_EXTI_Callback+0x6c>
				Difference = IC_Val2 - IC_Val1;
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x100>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x104>)
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00e      	b.n	8001afa <HAL_GPIO_EXTI_Callback+0x8a>
			}else if(IC_Val1 >IC_Val2)
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x100>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d908      	bls.n	8001afa <HAL_GPIO_EXTI_Callback+0x8a>
				Difference = ((1000) - IC_Val1 ) + IC_Val2;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x100>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001af6:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x104>)
 8001af8:	6013      	str	r3, [r2, #0]
			Distance = ((Difference *0.68)*10)/45;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x104>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fcd8 	bl	80004b4 <__aeabi_ui2d>
 8001b04:	a314      	add	r3, pc, #80	; (adr r3, 8001b58 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fd4d 	bl	80005a8 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x108>)
 8001b1c:	f7fe fd44 	bl	80005a8 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_GPIO_EXTI_Callback+0x10c>)
 8001b2e:	f7fe fe65 	bl	80007fc <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7fe ffcf 	bl	8000adc <__aeabi_d2uiz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_GPIO_EXTI_Callback+0x110>)
 8001b44:	701a      	strb	r2, [r3, #0]
			Is_First_Capture = 0;
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	f3af 8000 	nop.w
 8001b58:	5c28f5c3 	.word	0x5c28f5c3
 8001b5c:	3fe5c28f 	.word	0x3fe5c28f
 8001b60:	40011800 	.word	0x40011800
 8001b64:	200000c0 	.word	0x200000c0
 8001b68:	20001cbc 	.word	0x20001cbc
 8001b6c:	200000b4 	.word	0x200000b4
 8001b70:	200000b8 	.word	0x200000b8
 8001b74:	200000bc 	.word	0x200000bc
 8001b78:	40240000 	.word	0x40240000
 8001b7c:	40468000 	.word	0x40468000
 8001b80:	200000c1 	.word	0x200000c1

08001b84 <receiveAndTransmit>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_receiveAndTransmit */
void receiveAndTransmit(void *argument)
{
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  //default command, front wheels forward, back wheels stop, as idol state
 //continues for 3s
  uint8_t default_command[20] = "0760000000000300";
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <receiveAndTransmit+0x60>)
 8001b8e:	f107 040c 	add.w	r4, r7, #12
 8001b92:	461d      	mov	r5, r3
 8001b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	7023      	strb	r3, [r4, #0]
 8001b9c:	f107 031d 	add.w	r3, r7, #29
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
 8001ba4:	709a      	strb	r2, [r3, #2]
  {

	  //central part for checking command
	  //one command finished, then come here to see if got new command
	  //if no new command, it will just enqueue a default idol command for robot to execute
	  if(!isEmpty())
 8001ba6:	f7ff f829 	bl	8000bfc <isEmpty>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d111      	bne.n	8001bd4 <receiveAndTransmit+0x50>
	  {
		  //got command undone, do the command in task queue
		  process_command();
 8001bb0:	f7ff f8ee 	bl	8000d90 <process_command>
		  sending_size_in_transmit_fun=1;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <receiveAndTransmit+0x64>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
		  if(command_queue.size==0)
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <receiveAndTransmit+0x68>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <receiveAndTransmit+0x44>
		  {
			  send_fin();
 8001bc2:	f7ff fafd 	bl	80011c0 <send_fin>
 8001bc6:	e001      	b.n	8001bcc <receiveAndTransmit+0x48>
		  }else
		  {
			  send_complete();
 8001bc8:	f7ff fae2 	bl	8001190 <send_complete>
		  }
		  sending_size_in_transmit_fun=0;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <receiveAndTransmit+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	e7e8      	b.n	8001ba6 <receiveAndTransmit+0x22>
	  }else
	  {
		  //no new undone command, execute the default command
		  Enqueue(default_command);
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff f831 	bl	8000c40 <Enqueue>
		  process_command();
 8001bde:	f7ff f8d7 	bl	8000d90 <process_command>
	  if(!isEmpty())
 8001be2:	e7e0      	b.n	8001ba6 <receiveAndTransmit+0x22>
 8001be4:	08008e30 	.word	0x08008e30
 8001be8:	200000c2 	.word	0x200000c2
 8001bec:	20001f0c 	.word	0x20001f0c

08001bf0 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b098      	sub	sp, #96	; 0x60
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
  //uint8_t hello[20] = "Hello World!\0";
	HAL_TIM_Base_Start(&htim4);
 8001bf8:	4832      	ldr	r0, [pc, #200]	; (8001cc4 <show+0xd4>)
 8001bfa:	f001 fe75 	bl	80038e8 <HAL_TIM_Base_Start>
	//we pad a 0 before

	  //display dis and tick

	  uint32_t out_msg_sonic[20];
	  sprintf(out_msg_sonic,"                ");
 8001bfe:	f107 0308 	add.w	r3, r7, #8
 8001c02:	4931      	ldr	r1, [pc, #196]	; (8001cc8 <show+0xd8>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f006 fcb1 	bl	800856c <siprintf>
	  OLED_ShowString(0,30,out_msg_sonic);
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	461a      	mov	r2, r3
 8001c10:	211e      	movs	r1, #30
 8001c12:	2000      	movs	r0, #0
 8001c14:	f006 fbac 	bl	8008370 <OLED_ShowString>
	  OLED_ShowString(0,40,out_msg_sonic);
 8001c18:	f107 0308 	add.w	r3, r7, #8
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2128      	movs	r1, #40	; 0x28
 8001c20:	2000      	movs	r0, #0
 8001c22:	f006 fba5 	bl	8008370 <OLED_ShowString>
	  OLED_ShowString(0,50,out_msg_sonic);
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2132      	movs	r1, #50	; 0x32
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f006 fb9e 	bl	8008370 <OLED_ShowString>
	  sprintf(out_msg_sonic,"distance :%d",Distance+100);
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <show+0xdc>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	4923      	ldr	r1, [pc, #140]	; (8001cd0 <show+0xe0>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f006 fc92 	bl	800856c <siprintf>
	  OLED_ShowString(0,30,out_msg_sonic);
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	211e      	movs	r1, #30
 8001c50:	2000      	movs	r0, #0
 8001c52:	f006 fb8d 	bl	8008370 <OLED_ShowString>
	  sprintf(out_msg_sonic,"tick :%d",HAL_GetTick());
 8001c56:	f000 fd69 	bl	800272c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	491c      	ldr	r1, [pc, #112]	; (8001cd4 <show+0xe4>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f006 fc82 	bl	800856c <siprintf>
	  OLED_ShowString(0,40,out_msg_sonic);
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2128      	movs	r1, #40	; 0x28
 8001c70:	2000      	movs	r0, #0
 8001c72:	f006 fb7d 	bl	8008370 <OLED_ShowString>



	  Is_First_Capture=0;
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <show+0xe8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
	  HCSR04_Read();
 8001c7c:	f7ff fa36 	bl	80010ec <HCSR04_Read>

	  if(sending_size_in_transmit_fun==0)
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <show+0xec>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <show+0x9c>
	  {
		  send_queue_size();
 8001c88:	f7ff fa4e 	bl	8001128 <send_queue_size>


	  }
	  osDelay(100);
 8001c8c:	2064      	movs	r0, #100	; 0x64
 8001c8e:	f003 fd73 	bl	8005778 <osDelay>

	  uint16_t out_msg[3];
	  sprintf(out_msg,"%d",Distance+100);
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <show+0xdc>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001c9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c9e:	4910      	ldr	r1, [pc, #64]	; (8001ce0 <show+0xf0>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f006 fc63 	bl	800856c <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t *)out_msg,3,0xFFFF);
 8001ca6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cae:	2203      	movs	r2, #3
 8001cb0:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <show+0xf4>)
 8001cb2:	f002 ff67 	bl	8004b84 <HAL_UART_Transmit>


	  OLED_Refresh_Gram();
 8001cb6:	f006 f9e9 	bl	800808c <OLED_Refresh_Gram>
	  osDelay(400);
 8001cba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001cbe:	f003 fd5b 	bl	8005778 <osDelay>
  {
 8001cc2:	e79c      	b.n	8001bfe <show+0xe>
 8001cc4:	20001cbc 	.word	0x20001cbc
 8001cc8:	08008e44 	.word	0x08008e44
 8001ccc:	200000c1 	.word	0x200000c1
 8001cd0:	08008e58 	.word	0x08008e58
 8001cd4:	08008e68 	.word	0x08008e68
 8001cd8:	200000c0 	.word	0x200000c0
 8001cdc:	200000c2 	.word	0x200000c2
 8001ce0:	08008e28 	.word	0x08008e28
 8001ce4:	20001d0c 	.word	0x20001d0c

08001ce8 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	//the setting is modified in update() function
	//this thread, changes speed  every 2s, but this change is not needed


//start the PWM signal
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4823      	ldr	r0, [pc, #140]	; (8001d80 <motors+0x98>)
 8001cf4:	f001 fea8 	bl	8003a48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	4821      	ldr	r0, [pc, #132]	; (8001d80 <motors+0x98>)
 8001cfc:	f001 fea4 	bl	8003a48 <HAL_TIM_PWM_Start>
	  OLED_ShowString(0,40,out_msg);
	  OLED_Refresh_Gram();
	  */

	  //set the direction of the left wheel, 0 for forward and 1 for backward
	  if(left_dir=='0')
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <motors+0x9c>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	2b30      	cmp	r3, #48	; 0x30
 8001d06:	d10a      	bne.n	8001d1e <motors+0x36>
	  {
		  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	481e      	ldr	r0, [pc, #120]	; (8001d88 <motors+0xa0>)
 8001d0e:	f001 f91f 	bl	8002f50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2108      	movs	r1, #8
 8001d16:	481c      	ldr	r0, [pc, #112]	; (8001d88 <motors+0xa0>)
 8001d18:	f001 f91a 	bl	8002f50 <HAL_GPIO_WritePin>
 8001d1c:	e009      	b.n	8001d32 <motors+0x4a>
	  }else{
		  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2104      	movs	r1, #4
 8001d22:	4819      	ldr	r0, [pc, #100]	; (8001d88 <motors+0xa0>)
 8001d24:	f001 f914 	bl	8002f50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2108      	movs	r1, #8
 8001d2c:	4816      	ldr	r0, [pc, #88]	; (8001d88 <motors+0xa0>)
 8001d2e:	f001 f90f 	bl	8002f50 <HAL_GPIO_WritePin>




	  //set the direction of the right wheel, 0 for forward and 1 for backward
	  if(right_dir=='0')
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <motors+0xa4>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	2b30      	cmp	r3, #48	; 0x30
 8001d38:	d10a      	bne.n	8001d50 <motors+0x68>
	  {
		  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	4812      	ldr	r0, [pc, #72]	; (8001d88 <motors+0xa0>)
 8001d40:	f001 f906 	bl	8002f50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2110      	movs	r1, #16
 8001d48:	480f      	ldr	r0, [pc, #60]	; (8001d88 <motors+0xa0>)
 8001d4a:	f001 f901 	bl	8002f50 <HAL_GPIO_WritePin>
 8001d4e:	e009      	b.n	8001d64 <motors+0x7c>
	  }else{
		  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2120      	movs	r1, #32
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <motors+0xa0>)
 8001d56:	f001 f8fb 	bl	8002f50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	480a      	ldr	r0, [pc, #40]	; (8001d88 <motors+0xa0>)
 8001d60:	f001 f8f6 	bl	8002f50 <HAL_GPIO_WritePin>
	  }
	  //set the speed of the right wheel
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,left_speed);
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <motors+0xa8>)
 8001d66:	881a      	ldrh	r2, [r3, #0]
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <motors+0x98>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,right_speed);
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <motors+0xac>)
 8001d70:	881a      	ldrh	r2, [r3, #0]
 8001d72:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <motors+0x98>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	639a      	str	r2, [r3, #56]	; 0x38
	  osDelay(200);
 8001d78:	20c8      	movs	r0, #200	; 0xc8
 8001d7a:	f003 fcfd 	bl	8005778 <osDelay>
	  if(left_dir=='0')
 8001d7e:	e7bf      	b.n	8001d00 <motors+0x18>
 8001d80:	20001c74 	.word	0x20001c74
 8001d84:	20000000 	.word	0x20000000
 8001d88:	40010800 	.word	0x40010800
 8001d8c:	20000002 	.word	0x20000002
 8001d90:	200000aa 	.word	0x200000aa
 8001d94:	200000ae 	.word	0x200000ae

08001d98 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08e      	sub	sp, #56	; 0x38
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  //this allows us to get roughly how much the wheel has turned



  //start the timer
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001da0:	213c      	movs	r1, #60	; 0x3c
 8001da2:	483e      	ldr	r0, [pc, #248]	; (8001e9c <encoder_task+0x104>)
 8001da4:	f001 ffac 	bl	8003d00 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001da8:	213c      	movs	r1, #60	; 0x3c
 8001daa:	483d      	ldr	r0, [pc, #244]	; (8001ea0 <encoder_task+0x108>)
 8001dac:	f001 ffa8 	bl	8003d00 <HAL_TIM_Encoder_Start>

  //mesg buffer for sending for showing the mesg on OLED
  uint8_t hello[20];

  //get the tick of the system
  tick = HAL_GetTick();
 8001db0:	f000 fcbc 	bl	800272c <HAL_GetTick>
 8001db4:	6378      	str	r0, [r7, #52]	; 0x34

  //get the counter1
  left_cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001db6:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <encoder_task+0x104>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  right_cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <encoder_task+0x108>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30

  //we will only explain the left wheel encoder, left wheel is the same idea
  for(;;)
  {
	//make sure the time passed 1000L, this is the system timer
	if(HAL_GetTick()-tick > 1000L){
 8001dc6:	f000 fcb1 	bl	800272c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dd4:	d95e      	bls.n	8001e94 <encoder_task+0xfc>
		//get the value of the counter 2
		left_cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001dd6:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <encoder_task+0x104>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8001dde:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <encoder_task+0x104>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d110      	bne.n	8001e0e <encoder_task+0x76>
			if(left_cnt2<=left_cnt1)
 8001dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dc04      	bgt.n	8001dfe <encoder_task+0x66>
				left_diff = left_cnt1 - left_cnt2;
 8001df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfc:	e017      	b.n	8001e2e <encoder_task+0x96>
			else
				left_diff = (65535 - left_cnt2)+left_cnt1;
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e04:	33ff      	adds	r3, #255	; 0xff
 8001e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e08:	4413      	add	r3, r2
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0c:	e00f      	b.n	8001e2e <encoder_task+0x96>
		}
		else{
			if(left_cnt2 >= left_cnt1)
 8001e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	429a      	cmp	r2, r3
 8001e14:	db04      	blt.n	8001e20 <encoder_task+0x88>
				left_diff = left_cnt2 - left_cnt1;
 8001e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1e:	e006      	b.n	8001e2e <encoder_task+0x96>
			else
				left_diff = (65535 - left_cnt1) + left_cnt2;
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e26:	33ff      	adds	r3, #255	; 0xff
 8001e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e2a:	4413      	add	r3, r2
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
		OLED_ShowString(40,40,hello);
		left_cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
		*/

		//right wheel
		right_cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <encoder_task+0x108>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	623b      	str	r3, [r7, #32]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <encoder_task+0x108>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d110      	bne.n	8001e66 <encoder_task+0xce>
		{
			if(right_cnt2<=right_cnt1)
 8001e44:	6a3a      	ldr	r2, [r7, #32]
 8001e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dc04      	bgt.n	8001e56 <encoder_task+0xbe>
				right_diff = right_cnt1 - right_cnt2;
 8001e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	e017      	b.n	8001e86 <encoder_task+0xee>
			else{
				right_diff = (65535 - right_cnt2)+right_cnt1;
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e5c:	33ff      	adds	r3, #255	; 0xff
 8001e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e60:	4413      	add	r3, r2
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	e00f      	b.n	8001e86 <encoder_task+0xee>
			}
		}else{
			if(right_cnt2 >= right_cnt1){
 8001e66:	6a3a      	ldr	r2, [r7, #32]
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	db04      	blt.n	8001e78 <encoder_task+0xe0>
				right_diff = right_cnt2 - right_cnt1;
 8001e6e:	6a3a      	ldr	r2, [r7, #32]
 8001e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e006      	b.n	8001e86 <encoder_task+0xee>
			}else{
				right_diff = (65535 - right_cnt1) + right_cnt2;
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e7e:	33ff      	adds	r3, #255	; 0xff
 8001e80:	6a3a      	ldr	r2, [r7, #32]
 8001e82:	4413      	add	r3, r2
 8001e84:	61fb      	str	r3, [r7, #28]
			}
		}
		right_cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <encoder_task+0x108>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
		tick = HAL_GetTick();
 8001e8e:	f000 fc4d 	bl	800272c <HAL_GetTick>
 8001e92:	6378      	str	r0, [r7, #52]	; 0x34

		OLED_Refresh_Gram();
		*/

	}
    osDelay(100);
 8001e94:	2064      	movs	r0, #100	; 0x64
 8001e96:	f003 fc6f 	bl	8005778 <osDelay>
	if(HAL_GetTick()-tick > 1000L){
 8001e9a:	e794      	b.n	8001dc6 <encoder_task+0x2e>
 8001e9c:	20001e24 	.word	0x20001e24
 8001ea0:	20001d70 	.word	0x20001d70

08001ea4 <Turn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Turn */
void Turn(void *argument)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	//similar to motor, this part of the code is not so useful for our program
	//the setting is modified in update() function
	//this thread, front wheel's angle every 0.1s, but this change is not needed

	//start the timer PWM
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001eac:	210c      	movs	r1, #12
 8001eae:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <Turn+0x24>)
 8001eb0:	f001 fdca 	bl	8003a48 <HAL_TIM_PWM_Start>
	for(;;)
	{
		//set the front wheels' angle
		htim1.Instance->CCR4 = angel;//I typed wrongly
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <Turn+0x28>)
 8001eb6:	881a      	ldrh	r2, [r3, #0]
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <Turn+0x24>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(100);
 8001ebe:	2064      	movs	r0, #100	; 0x64
 8001ec0:	f003 fc5a 	bl	8005778 <osDelay>
		htim1.Instance->CCR4 = angel;//I typed wrongly
 8001ec4:	e7f6      	b.n	8001eb4 <Turn+0x10>
 8001ec6:	bf00      	nop
 8001ec8:	20001dc0 	.word	0x20001dc0
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <Error_Handler+0x8>
	...

08001edc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee2:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_MspInit+0x68>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <HAL_MspInit+0x68>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6193      	str	r3, [r2, #24]
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_MspInit+0x68>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_MspInit+0x68>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <HAL_MspInit+0x68>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_MspInit+0x68>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	210f      	movs	r1, #15
 8001f16:	f06f 0001 	mvn.w	r0, #1
 8001f1a:	f000 fd0c 	bl	8002936 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_MspInit+0x6c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <HAL_MspInit+0x6c>)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40010000 	.word	0x40010000

08001f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2b      	ldr	r2, [pc, #172]	; (8002014 <HAL_TIM_Base_MspInit+0xc8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d114      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a29      	ldr	r2, [pc, #164]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001f72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2105      	movs	r1, #5
 8001f88:	201b      	movs	r0, #27
 8001f8a:	f000 fcd4 	bl	8002936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f8e:	201b      	movs	r0, #27
 8001f90:	f000 fced 	bl	800296e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f94:	e03a      	b.n	800200c <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM4)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a20      	ldr	r2, [pc, #128]	; (800201c <HAL_TIM_Base_MspInit+0xd0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10c      	bne.n	8001fba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001fa6:	f043 0304 	orr.w	r3, r3, #4
 8001faa:	61d3      	str	r3, [r2, #28]
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]
}
 8001fb8:	e028      	b.n	800200c <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d123      	bne.n	800200c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a13      	ldr	r2, [pc, #76]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001fca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001fe2:	f043 0310 	orr.w	r3, r3, #16
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_TIM_Base_MspInit+0xcc>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001ff4:	23c0      	movs	r3, #192	; 0xc0
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002000:	f107 0318 	add.w	r3, r7, #24
 8002004:	4619      	mov	r1, r3
 8002006:	4807      	ldr	r0, [pc, #28]	; (8002024 <HAL_TIM_Base_MspInit+0xd8>)
 8002008:	f000 fe0e 	bl	8002c28 <HAL_GPIO_Init>
}
 800200c:	bf00      	nop
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40012c00 	.word	0x40012c00
 8002018:	40021000 	.word	0x40021000
 800201c:	40000800 	.word	0x40000800
 8002020:	40013400 	.word	0x40013400
 8002024:	40011000 	.word	0x40011000

08002028 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	; 0x30
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002046:	d14f      	bne.n	80020e8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002048:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	4a3d      	ldr	r2, [pc, #244]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	61d3      	str	r3, [r2, #28]
 8002054:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002060:	4b38      	ldr	r3, [pc, #224]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a37      	ldr	r2, [pc, #220]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002078:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	4a31      	ldr	r2, [pc, #196]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 800207e:	f043 0308 	orr.w	r3, r3, #8
 8002082:	6193      	str	r3, [r2, #24]
 8002084:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209e:	f107 031c 	add.w	r3, r7, #28
 80020a2:	4619      	mov	r1, r3
 80020a4:	4828      	ldr	r0, [pc, #160]	; (8002148 <HAL_TIM_Encoder_MspInit+0x120>)
 80020a6:	f000 fdbf 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020aa:	2308      	movs	r3, #8
 80020ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	4823      	ldr	r0, [pc, #140]	; (800214c <HAL_TIM_Encoder_MspInit+0x124>)
 80020be:	f000 fdb3 	bl	8002c28 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_TIM_Encoder_MspInit+0x128>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_TIM_Encoder_MspInit+0x128>)
 80020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020e6:	e028      	b.n	800213a <HAL_TIM_Encoder_MspInit+0x112>
  else if(htim_encoder->Instance==TIM3)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a19      	ldr	r2, [pc, #100]	; (8002154 <HAL_TIM_Encoder_MspInit+0x12c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d123      	bne.n	800213a <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a13      	ldr	r2, [pc, #76]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6193      	str	r3, [r2, #24]
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002122:	23c0      	movs	r3, #192	; 0xc0
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	4804      	ldr	r0, [pc, #16]	; (8002148 <HAL_TIM_Encoder_MspInit+0x120>)
 8002136:	f000 fd77 	bl	8002c28 <HAL_GPIO_Init>
}
 800213a:	bf00      	nop
 800213c:	3730      	adds	r7, #48	; 0x30
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	40010800 	.word	0x40010800
 800214c:	40010c00 	.word	0x40010c00
 8002150:	40010000 	.word	0x40010000
 8002154:	40000400 	.word	0x40000400

08002158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_TIM_MspPostInit+0x80>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d12a      	bne.n	80021ce <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_TIM_MspPostInit+0x84>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_TIM_MspPostInit+0x84>)
 800217e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_TIM_MspPostInit+0x84>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002190:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002194:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2302      	movs	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	4619      	mov	r1, r3
 80021a4:	480e      	ldr	r0, [pc, #56]	; (80021e0 <HAL_TIM_MspPostInit+0x88>)
 80021a6:	f000 fd3f 	bl	8002c28 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_TIM_MspPostInit+0x8c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <HAL_TIM_MspPostInit+0x8c>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3720      	adds	r7, #32
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40011800 	.word	0x40011800
 80021e4:	40010000 	.word	0x40010000

080021e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a29      	ldr	r2, [pc, #164]	; (80022a8 <HAL_UART_MspInit+0xc0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d14b      	bne.n	80022a0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_UART_MspInit+0xc4>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4a27      	ldr	r2, [pc, #156]	; (80022ac <HAL_UART_MspInit+0xc4>)
 800220e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002212:	61d3      	str	r3, [r2, #28]
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_UART_MspInit+0xc4>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <HAL_UART_MspInit+0xc4>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a21      	ldr	r2, [pc, #132]	; (80022ac <HAL_UART_MspInit+0xc4>)
 8002226:	f043 0310 	orr.w	r3, r3, #16
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <HAL_UART_MspInit+0xc4>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	4818      	ldr	r0, [pc, #96]	; (80022b0 <HAL_UART_MspInit+0xc8>)
 800224e:	f000 fceb 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4812      	ldr	r0, [pc, #72]	; (80022b0 <HAL_UART_MspInit+0xc8>)
 8002268:	f000 fcde 	bl	8002c28 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_UART_MspInit+0xcc>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	f043 0310 	orr.w	r3, r3, #16
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_UART_MspInit+0xcc>)
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2105      	movs	r1, #5
 8002294:	2027      	movs	r0, #39	; 0x27
 8002296:	f000 fb4e 	bl	8002936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800229a:	2027      	movs	r0, #39	; 0x27
 800229c:	f000 fb67 	bl	800296e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40004800 	.word	0x40004800
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40010000 	.word	0x40010000

080022b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <NMI_Handler+0x4>

080022be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <MemManage_Handler+0x4>

080022ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e6:	f000 fa0f 	bl	8002708 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022ea:	f004 ff15 	bl	8007118 <xTaskGetSchedulerState>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d001      	beq.n	80022f8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022f4:	f005 fc70 	bl	8007bd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}

080022fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002300:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002304:	f000 fe56 	bl	8002fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM1_CC_IRQHandler+0x10>)
 8002312:	f001 fd83 	bl	8003e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20001dc0 	.word	0x20001dc0

08002320 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <USART3_IRQHandler+0x10>)
 8002326:	f002 fcef 	bl	8004d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20001d0c 	.word	0x20001d0c

08002334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <_sbrk+0x5c>)
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <_sbrk+0x60>)
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <_sbrk+0x64>)
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <_sbrk+0x68>)
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	429a      	cmp	r2, r3
 8002362:	d207      	bcs.n	8002374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002364:	f006 f8c2 	bl	80084ec <__errno>
 8002368:	4603      	mov	r3, r0
 800236a:	220c      	movs	r2, #12
 800236c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	e009      	b.n	8002388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <_sbrk+0x64>)
 8002384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20010000 	.word	0x20010000
 8002394:	00000400 	.word	0x00000400
 8002398:	200000c4 	.word	0x200000c4
 800239c:	200025c8 	.word	0x200025c8

080023a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <Reset_Handler>:
 80023ac:	480c      	ldr	r0, [pc, #48]	; (80023e0 <LoopFillZerobss+0x12>)
 80023ae:	490d      	ldr	r1, [pc, #52]	; (80023e4 <LoopFillZerobss+0x16>)
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <LoopFillZerobss+0x1a>)
 80023b2:	2300      	movs	r3, #0
 80023b4:	e002      	b.n	80023bc <LoopCopyDataInit>

080023b6 <CopyDataInit>:
 80023b6:	58d4      	ldr	r4, [r2, r3]
 80023b8:	50c4      	str	r4, [r0, r3]
 80023ba:	3304      	adds	r3, #4

080023bc <LoopCopyDataInit>:
 80023bc:	18c4      	adds	r4, r0, r3
 80023be:	428c      	cmp	r4, r1
 80023c0:	d3f9      	bcc.n	80023b6 <CopyDataInit>
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <LoopFillZerobss+0x1e>)
 80023c4:	4c0a      	ldr	r4, [pc, #40]	; (80023f0 <LoopFillZerobss+0x22>)
 80023c6:	2300      	movs	r3, #0
 80023c8:	e001      	b.n	80023ce <LoopFillZerobss>

080023ca <FillZerobss>:
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	3204      	adds	r2, #4

080023ce <LoopFillZerobss>:
 80023ce:	42a2      	cmp	r2, r4
 80023d0:	d3fb      	bcc.n	80023ca <FillZerobss>
 80023d2:	f7ff ffe5 	bl	80023a0 <SystemInit>
 80023d6:	f006 f88f 	bl	80084f8 <__libc_init_array>
 80023da:	f7fe ff09 	bl	80011f0 <main>
 80023de:	4770      	bx	lr
 80023e0:	20000000 	.word	0x20000000
 80023e4:	2000007c 	.word	0x2000007c
 80023e8:	08009a20 	.word	0x08009a20
 80023ec:	20000080 	.word	0x20000080
 80023f0:	200025c4 	.word	0x200025c4

080023f4 <ADC1_2_IRQHandler>:
 80023f4:	e7fe      	b.n	80023f4 <ADC1_2_IRQHandler>
	...

080023f8 <Pid_Init>:
	double kp,
	double ki,
	double kd,
	ctrlDir_t controllerDir,
	uint32_t samplePeriodMs)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af04      	add	r7, sp, #16
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	e9c7 2300 	strd	r2, r3, [r7]

	Pid_SetOutputLimits(pidData, 0.0, 2000.0);		
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <Pid_Init+0x80>)
 800240a:	e9cd 2300 	strd	r2, r3, [sp]
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f8d4 	bl	80025c4 <Pid_SetOutputLimits>

    pidData->samplePeriodMs = samplePeriodMs;				// Default controller sample time is 0.1 seconds
 800241c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800241e:	f7fe f849 	bl	80004b4 <__aeabi_ui2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

    Pid_SetControllerDirection(pidData, controllerDir);
 800242c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002430:	4619      	mov	r1, r3
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f8e4 	bl	8002600 <Pid_SetControllerDirection>
    Pid_SetTunings(pidData, kp, ki, kd);
 8002438:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800243c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002444:	e9cd 2300 	strd	r2, r3, [sp]
 8002448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f825 	bl	800249c <Pid_SetTunings>
	pidData->prevInput = 0;
 8002452:	68f9      	ldr	r1, [r7, #12]
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	pidData->prevOutput = 0;
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	409f4000 	.word	0x409f4000

0800247c <Pid_SetSetPoint>:
	pidData->prevOutput = pidData->output;
	  
}

void Pid_SetSetPoint(pidData_t *pidData, double setPoint)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	e9c7 2300 	strd	r2, r3, [r7]
	pidData->setPoint = setPoint;
 8002488:	68f9      	ldr	r1, [r7, #12]
 800248a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800248e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <Pid_SetTunings>:


void Pid_SetTunings(pidData_t *pidData, double kp, double ki, double kd)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	e9c7 2300 	strd	r2, r3, [r7]
   	if (kp<0 || ki<0 || kd<0) 
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024b4:	f7fe faea 	bl	8000a8c <__aeabi_dcmplt>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d17b      	bne.n	80025b6 <Pid_SetTunings+0x11a>
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024ca:	f7fe fadf 	bl	8000a8c <__aeabi_dcmplt>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d170      	bne.n	80025b6 <Pid_SetTunings+0x11a>
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024e0:	f7fe fad4 	bl	8000a8c <__aeabi_dcmplt>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d165      	bne.n	80025b6 <Pid_SetTunings+0x11a>
   		return;
 
 	pidData->actualKp = kp; 
 80024ea:	68f9      	ldr	r1, [r7, #12]
 80024ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pidData->actualKi = ki;
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024fa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pidData->actualKd = kd;
 80024fe:	68f9      	ldr	r1, [r7, #12]
 8002500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002504:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
   
   double sampleTimeInSec = ((double)pidData->samplePeriodMs)/1000.0;  
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <Pid_SetTunings+0x124>)
 8002514:	f7fe f972 	bl	80007fc <__aeabi_ddiv>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	e9c7 2304 	strd	r2, r3, [r7, #16]
   
   // Calculate time-step-scaled PID terms
   pidData->zKp = kp;
 8002520:	68f9      	ldr	r1, [r7, #12]
 8002522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002526:	e9c1 2300 	strd	r2, r3, [r1]
   pidData->zKi = ki * sampleTimeInSec;
 800252a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800252e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002532:	f7fe f839 	bl	80005a8 <__aeabi_dmul>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	68f9      	ldr	r1, [r7, #12]
 800253c:	e9c1 2302 	strd	r2, r3, [r1, #8]
   pidData->zKd = kd / sampleTimeInSec;
 8002540:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002544:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002548:	f7fe f958 	bl	80007fc <__aeabi_ddiv>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	e9c1 2304 	strd	r2, r3, [r1, #16]
 
  if(pidData->controllerDir == PID_REVERSE)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800255c:	2b01      	cmp	r3, #1
 800255e:	d12b      	bne.n	80025b8 <Pid_SetTunings+0x11c>
   {
      pidData->zKp = (0 - pidData->zKp);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f04f 0000 	mov.w	r0, #0
 800256a:	f04f 0100 	mov.w	r1, #0
 800256e:	f7fd fe63 	bl	8000238 <__aeabi_dsub>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	68f9      	ldr	r1, [r7, #12]
 8002578:	e9c1 2300 	strd	r2, r3, [r1]
      pidData->zKi = (0 - pidData->zKi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002582:	f04f 0000 	mov.w	r0, #0
 8002586:	f04f 0100 	mov.w	r1, #0
 800258a:	f7fd fe55 	bl	8000238 <__aeabi_dsub>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	68f9      	ldr	r1, [r7, #12]
 8002594:	e9c1 2302 	strd	r2, r3, [r1, #8]
      pidData->zKd = (0 - pidData->zKd);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800259e:	f04f 0000 	mov.w	r0, #0
 80025a2:	f04f 0100 	mov.w	r1, #0
 80025a6:	f7fd fe47 	bl	8000238 <__aeabi_dsub>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	68f9      	ldr	r1, [r7, #12]
 80025b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80025b4:	e000      	b.n	80025b8 <Pid_SetTunings+0x11c>
   		return;
 80025b6:	bf00      	nop
   }
}
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	408f4000 	.word	0x408f4000

080025c4 <Pid_SetOutputLimits>:
      pidData->samplePeriodMs = newSamplePeriodMs;
   }
}
 
void Pid_SetOutputLimits(pidData_t *pidData, double min, double max)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	e9c7 2300 	strd	r2, r3, [r7]
	if(min >= max) 
 80025d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025d8:	f7fe fa6c 	bl	8000ab4 <__aeabi_dcmpge>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10a      	bne.n	80025f8 <Pid_SetOutputLimits+0x34>
   		return;
   	pidData->outMin = min;
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025e8:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
   	pidData->outMax = max;
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025f2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 80025f6:	e000      	b.n	80025fa <Pid_SetOutputLimits+0x36>
   		return;
 80025f8:	bf00      	nop
 
}
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <Pid_SetControllerDirection>:


void Pid_SetControllerDirection(pidData_t *pidData, ctrlDir_t controllerDir)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
	if(controllerDir != pidData->controllerDir)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	429a      	cmp	r2, r3
 8002616:	d029      	beq.n	800266c <Pid_SetControllerDirection+0x6c>
	{
   		// Invert control constants
		pidData->zKp = (0 - pidData->zKp);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	f04f 0000 	mov.w	r0, #0
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	f7fd fe07 	bl	8000238 <__aeabi_dsub>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	e9c1 2300 	strd	r2, r3, [r1]
    	pidData->zKi = (0 - pidData->zKi);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800263a:	f04f 0000 	mov.w	r0, #0
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	f7fd fdf9 	bl	8000238 <__aeabi_dsub>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    	pidData->zKd = (0 - pidData->zKd);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	f7fd fdeb 	bl	8000238 <__aeabi_dsub>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}   
   pidData->controllerDir = controllerDir;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_Init+0x28>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_Init+0x28>)
 8002686:	f043 0310 	orr.w	r3, r3, #16
 800268a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268c:	2003      	movs	r0, #3
 800268e:	f000 f947 	bl	8002920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002692:	200f      	movs	r0, #15
 8002694:	f000 f808 	bl	80026a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002698:	f7ff fc20 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40022000 	.word	0x40022000

080026a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_InitTick+0x54>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_InitTick+0x58>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f95f 	bl	800298a <HAL_SYSTICK_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00e      	b.n	80026f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b0f      	cmp	r3, #15
 80026da:	d80a      	bhi.n	80026f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026dc:	2200      	movs	r2, #0
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	f000 f927 	bl	8002936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e8:	4a06      	ldr	r2, [pc, #24]	; (8002704 <HAL_InitTick+0x5c>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000008 	.word	0x20000008
 8002700:	20000010 	.word	0x20000010
 8002704:	2000000c 	.word	0x2000000c

08002708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_IncTick+0x1c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_IncTick+0x20>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4413      	add	r3, r2
 8002718:	4a03      	ldr	r2, [pc, #12]	; (8002728 <HAL_IncTick+0x20>)
 800271a:	6013      	str	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	20000010 	.word	0x20000010
 8002728:	20002170 	.word	0x20002170

0800272c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return uwTick;
 8002730:	4b02      	ldr	r3, [pc, #8]	; (800273c <HAL_GetTick+0x10>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	20002170 	.word	0x20002170

08002740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff fff0 	bl	800272c <HAL_GetTick>
 800274c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d005      	beq.n	8002766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_Delay+0x44>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002766:	bf00      	nop
 8002768:	f7ff ffe0 	bl	800272c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	429a      	cmp	r2, r3
 8002776:	d8f7      	bhi.n	8002768 <HAL_Delay+0x28>
  {
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000010 	.word	0x20000010

08002788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a4:	4013      	ands	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ba:	4a04      	ldr	r2, [pc, #16]	; (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	60d3      	str	r3, [r2, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <__NVIC_GetPriorityGrouping+0x18>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 0307 	and.w	r3, r3, #7
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	db0b      	blt.n	8002816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4906      	ldr	r1, [pc, #24]	; (8002820 <__NVIC_EnableIRQ+0x34>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2001      	movs	r0, #1
 800280e:	fa00 f202 	lsl.w	r2, r0, r2
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	e000e100 	.word	0xe000e100

08002824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	db0a      	blt.n	800284e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	490c      	ldr	r1, [pc, #48]	; (8002870 <__NVIC_SetPriority+0x4c>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	440b      	add	r3, r1
 8002848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800284c:	e00a      	b.n	8002864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4908      	ldr	r1, [pc, #32]	; (8002874 <__NVIC_SetPriority+0x50>)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	3b04      	subs	r3, #4
 800285c:	0112      	lsls	r2, r2, #4
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	440b      	add	r3, r1
 8002862:	761a      	strb	r2, [r3, #24]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f1c3 0307 	rsb	r3, r3, #7
 8002892:	2b04      	cmp	r3, #4
 8002894:	bf28      	it	cs
 8002896:	2304      	movcs	r3, #4
 8002898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3304      	adds	r3, #4
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d902      	bls.n	80028a8 <NVIC_EncodePriority+0x30>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3b03      	subs	r3, #3
 80028a6:	e000      	b.n	80028aa <NVIC_EncodePriority+0x32>
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	401a      	ands	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c0:	f04f 31ff 	mov.w	r1, #4294967295
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	4313      	orrs	r3, r2
         );
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ec:	d301      	bcc.n	80028f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00f      	b.n	8002912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f2:	4a0a      	ldr	r2, [pc, #40]	; (800291c <SysTick_Config+0x40>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fa:	210f      	movs	r1, #15
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002900:	f7ff ff90 	bl	8002824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <SysTick_Config+0x40>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <SysTick_Config+0x40>)
 800290c:	2207      	movs	r2, #7
 800290e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	e000e010 	.word	0xe000e010

08002920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff2d 	bl	8002788 <__NVIC_SetPriorityGrouping>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002948:	f7ff ff42 	bl	80027d0 <__NVIC_GetPriorityGrouping>
 800294c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7ff ff90 	bl	8002878 <NVIC_EncodePriority>
 8002958:	4602      	mov	r2, r0
 800295a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff5f 	bl	8002824 <__NVIC_SetPriority>
}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff35 	bl	80027ec <__NVIC_EnableIRQ>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ffa2 	bl	80028dc <SysTick_Config>
 8002998:	4603      	mov	r3, r0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d008      	beq.n	80029ca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2204      	movs	r2, #4
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e020      	b.n	8002a0c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 020e 	bic.w	r2, r2, #14
 80029d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d005      	beq.n	8002a3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2204      	movs	r2, #4
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	e0d6      	b.n	8002be8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 020e 	bic.w	r2, r2, #14
 8002a48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b64      	ldr	r3, [pc, #400]	; (8002bf4 <HAL_DMA_Abort_IT+0x1dc>)
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d958      	bls.n	8002b18 <HAL_DMA_Abort_IT+0x100>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a63      	ldr	r2, [pc, #396]	; (8002bf8 <HAL_DMA_Abort_IT+0x1e0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d04f      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xf8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a61      	ldr	r2, [pc, #388]	; (8002bfc <HAL_DMA_Abort_IT+0x1e4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d048      	beq.n	8002b0c <HAL_DMA_Abort_IT+0xf4>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a60      	ldr	r2, [pc, #384]	; (8002c00 <HAL_DMA_Abort_IT+0x1e8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d040      	beq.n	8002b06 <HAL_DMA_Abort_IT+0xee>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a5e      	ldr	r2, [pc, #376]	; (8002c04 <HAL_DMA_Abort_IT+0x1ec>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d038      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xe8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5d      	ldr	r2, [pc, #372]	; (8002c08 <HAL_DMA_Abort_IT+0x1f0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d030      	beq.n	8002afa <HAL_DMA_Abort_IT+0xe2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5b      	ldr	r2, [pc, #364]	; (8002c0c <HAL_DMA_Abort_IT+0x1f4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d028      	beq.n	8002af4 <HAL_DMA_Abort_IT+0xdc>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a53      	ldr	r2, [pc, #332]	; (8002bf4 <HAL_DMA_Abort_IT+0x1dc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d020      	beq.n	8002aee <HAL_DMA_Abort_IT+0xd6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a57      	ldr	r2, [pc, #348]	; (8002c10 <HAL_DMA_Abort_IT+0x1f8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d019      	beq.n	8002aea <HAL_DMA_Abort_IT+0xd2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a56      	ldr	r2, [pc, #344]	; (8002c14 <HAL_DMA_Abort_IT+0x1fc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d012      	beq.n	8002ae6 <HAL_DMA_Abort_IT+0xce>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a54      	ldr	r2, [pc, #336]	; (8002c18 <HAL_DMA_Abort_IT+0x200>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_DMA_Abort_IT+0xc8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a53      	ldr	r2, [pc, #332]	; (8002c1c <HAL_DMA_Abort_IT+0x204>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d102      	bne.n	8002ada <HAL_DMA_Abort_IT+0xc2>
 8002ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad8:	e01b      	b.n	8002b12 <HAL_DMA_Abort_IT+0xfa>
 8002ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ade:	e018      	b.n	8002b12 <HAL_DMA_Abort_IT+0xfa>
 8002ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ae4:	e015      	b.n	8002b12 <HAL_DMA_Abort_IT+0xfa>
 8002ae6:	2310      	movs	r3, #16
 8002ae8:	e013      	b.n	8002b12 <HAL_DMA_Abort_IT+0xfa>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e011      	b.n	8002b12 <HAL_DMA_Abort_IT+0xfa>
 8002aee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af2:	e00e      	b.n	8002b12 <HAL_DMA_Abort_IT+0xfa>
 8002af4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002af8:	e00b      	b.n	8002b12 <HAL_DMA_Abort_IT+0xfa>
 8002afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002afe:	e008      	b.n	8002b12 <HAL_DMA_Abort_IT+0xfa>
 8002b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b04:	e005      	b.n	8002b12 <HAL_DMA_Abort_IT+0xfa>
 8002b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b0a:	e002      	b.n	8002b12 <HAL_DMA_Abort_IT+0xfa>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	e000      	b.n	8002b12 <HAL_DMA_Abort_IT+0xfa>
 8002b10:	2301      	movs	r3, #1
 8002b12:	4a43      	ldr	r2, [pc, #268]	; (8002c20 <HAL_DMA_Abort_IT+0x208>)
 8002b14:	6053      	str	r3, [r2, #4]
 8002b16:	e057      	b.n	8002bc8 <HAL_DMA_Abort_IT+0x1b0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a36      	ldr	r2, [pc, #216]	; (8002bf8 <HAL_DMA_Abort_IT+0x1e0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d04f      	beq.n	8002bc2 <HAL_DMA_Abort_IT+0x1aa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <HAL_DMA_Abort_IT+0x1e4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d048      	beq.n	8002bbe <HAL_DMA_Abort_IT+0x1a6>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a33      	ldr	r2, [pc, #204]	; (8002c00 <HAL_DMA_Abort_IT+0x1e8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d040      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x1a0>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a32      	ldr	r2, [pc, #200]	; (8002c04 <HAL_DMA_Abort_IT+0x1ec>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d038      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x19a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <HAL_DMA_Abort_IT+0x1f0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d030      	beq.n	8002bac <HAL_DMA_Abort_IT+0x194>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <HAL_DMA_Abort_IT+0x1f4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d028      	beq.n	8002ba6 <HAL_DMA_Abort_IT+0x18e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a26      	ldr	r2, [pc, #152]	; (8002bf4 <HAL_DMA_Abort_IT+0x1dc>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d020      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0x188>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2b      	ldr	r2, [pc, #172]	; (8002c10 <HAL_DMA_Abort_IT+0x1f8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d019      	beq.n	8002b9c <HAL_DMA_Abort_IT+0x184>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <HAL_DMA_Abort_IT+0x1fc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d012      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x180>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <HAL_DMA_Abort_IT+0x200>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00a      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x17a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <HAL_DMA_Abort_IT+0x204>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d102      	bne.n	8002b8c <HAL_DMA_Abort_IT+0x174>
 8002b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8a:	e01b      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x1ac>
 8002b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b90:	e018      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x1ac>
 8002b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b96:	e015      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x1ac>
 8002b98:	2310      	movs	r3, #16
 8002b9a:	e013      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x1ac>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e011      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x1ac>
 8002ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba4:	e00e      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x1ac>
 8002ba6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002baa:	e00b      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x1ac>
 8002bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bb0:	e008      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x1ac>
 8002bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb6:	e005      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x1ac>
 8002bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bbc:	e002      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x1ac>
 8002bbe:	2310      	movs	r3, #16
 8002bc0:	e000      	b.n	8002bc4 <HAL_DMA_Abort_IT+0x1ac>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_DMA_Abort_IT+0x20c>)
 8002bc6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
    } 
  }
  return status;
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40020080 	.word	0x40020080
 8002bf8:	40020008 	.word	0x40020008
 8002bfc:	4002001c 	.word	0x4002001c
 8002c00:	40020030 	.word	0x40020030
 8002c04:	40020044 	.word	0x40020044
 8002c08:	40020058 	.word	0x40020058
 8002c0c:	4002006c 	.word	0x4002006c
 8002c10:	40020408 	.word	0x40020408
 8002c14:	4002041c 	.word	0x4002041c
 8002c18:	40020430 	.word	0x40020430
 8002c1c:	40020444 	.word	0x40020444
 8002c20:	40020400 	.word	0x40020400
 8002c24:	40020000 	.word	0x40020000

08002c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b08b      	sub	sp, #44	; 0x2c
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3a:	e179      	b.n	8002f30 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 8168 	bne.w	8002f2a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4aa0      	ldr	r2, [pc, #640]	; (8002ee0 <HAL_GPIO_Init+0x2b8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d05e      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c64:	4a9e      	ldr	r2, [pc, #632]	; (8002ee0 <HAL_GPIO_Init+0x2b8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d875      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c6a:	4a9e      	ldr	r2, [pc, #632]	; (8002ee4 <HAL_GPIO_Init+0x2bc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d058      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c70:	4a9c      	ldr	r2, [pc, #624]	; (8002ee4 <HAL_GPIO_Init+0x2bc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d86f      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c76:	4a9c      	ldr	r2, [pc, #624]	; (8002ee8 <HAL_GPIO_Init+0x2c0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d052      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c7c:	4a9a      	ldr	r2, [pc, #616]	; (8002ee8 <HAL_GPIO_Init+0x2c0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d869      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c82:	4a9a      	ldr	r2, [pc, #616]	; (8002eec <HAL_GPIO_Init+0x2c4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04c      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c88:	4a98      	ldr	r2, [pc, #608]	; (8002eec <HAL_GPIO_Init+0x2c4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d863      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c8e:	4a98      	ldr	r2, [pc, #608]	; (8002ef0 <HAL_GPIO_Init+0x2c8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d046      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c94:	4a96      	ldr	r2, [pc, #600]	; (8002ef0 <HAL_GPIO_Init+0x2c8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d85d      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c9a:	2b12      	cmp	r3, #18
 8002c9c:	d82a      	bhi.n	8002cf4 <HAL_GPIO_Init+0xcc>
 8002c9e:	2b12      	cmp	r3, #18
 8002ca0:	d859      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002ca2:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <HAL_GPIO_Init+0x80>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002d23 	.word	0x08002d23
 8002cac:	08002cfd 	.word	0x08002cfd
 8002cb0:	08002d0f 	.word	0x08002d0f
 8002cb4:	08002d51 	.word	0x08002d51
 8002cb8:	08002d57 	.word	0x08002d57
 8002cbc:	08002d57 	.word	0x08002d57
 8002cc0:	08002d57 	.word	0x08002d57
 8002cc4:	08002d57 	.word	0x08002d57
 8002cc8:	08002d57 	.word	0x08002d57
 8002ccc:	08002d57 	.word	0x08002d57
 8002cd0:	08002d57 	.word	0x08002d57
 8002cd4:	08002d57 	.word	0x08002d57
 8002cd8:	08002d57 	.word	0x08002d57
 8002cdc:	08002d57 	.word	0x08002d57
 8002ce0:	08002d57 	.word	0x08002d57
 8002ce4:	08002d57 	.word	0x08002d57
 8002ce8:	08002d57 	.word	0x08002d57
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002d19 	.word	0x08002d19
 8002cf4:	4a7f      	ldr	r2, [pc, #508]	; (8002ef4 <HAL_GPIO_Init+0x2cc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cfa:	e02c      	b.n	8002d56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	623b      	str	r3, [r7, #32]
          break;
 8002d02:	e029      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	623b      	str	r3, [r7, #32]
          break;
 8002d0c:	e024      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	3308      	adds	r3, #8
 8002d14:	623b      	str	r3, [r7, #32]
          break;
 8002d16:	e01f      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	623b      	str	r3, [r7, #32]
          break;
 8002d20:	e01a      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	623b      	str	r3, [r7, #32]
          break;
 8002d2e:	e013      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d38:	2308      	movs	r3, #8
 8002d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	611a      	str	r2, [r3, #16]
          break;
 8002d42:	e009      	b.n	8002d58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d44:	2308      	movs	r3, #8
 8002d46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	615a      	str	r2, [r3, #20]
          break;
 8002d4e:	e003      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
          break;
 8002d54:	e000      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          break;
 8002d56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2bff      	cmp	r3, #255	; 0xff
 8002d5c:	d801      	bhi.n	8002d62 <HAL_GPIO_Init+0x13a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	e001      	b.n	8002d66 <HAL_GPIO_Init+0x13e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2bff      	cmp	r3, #255	; 0xff
 8002d6c:	d802      	bhi.n	8002d74 <HAL_GPIO_Init+0x14c>
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	e002      	b.n	8002d7a <HAL_GPIO_Init+0x152>
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	3b08      	subs	r3, #8
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	210f      	movs	r1, #15
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	6a39      	ldr	r1, [r7, #32]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	431a      	orrs	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80c1 	beq.w	8002f2a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a52      	ldr	r2, [pc, #328]	; (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dc0:	4a4e      	ldr	r2, [pc, #312]	; (8002efc <HAL_GPIO_Init+0x2d4>)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	220f      	movs	r2, #15
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a46      	ldr	r2, [pc, #280]	; (8002f00 <HAL_GPIO_Init+0x2d8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01f      	beq.n	8002e2c <HAL_GPIO_Init+0x204>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a45      	ldr	r2, [pc, #276]	; (8002f04 <HAL_GPIO_Init+0x2dc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d019      	beq.n	8002e28 <HAL_GPIO_Init+0x200>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a44      	ldr	r2, [pc, #272]	; (8002f08 <HAL_GPIO_Init+0x2e0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d013      	beq.n	8002e24 <HAL_GPIO_Init+0x1fc>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a43      	ldr	r2, [pc, #268]	; (8002f0c <HAL_GPIO_Init+0x2e4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00d      	beq.n	8002e20 <HAL_GPIO_Init+0x1f8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a42      	ldr	r2, [pc, #264]	; (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <HAL_GPIO_Init+0x1f4>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a41      	ldr	r2, [pc, #260]	; (8002f14 <HAL_GPIO_Init+0x2ec>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d101      	bne.n	8002e18 <HAL_GPIO_Init+0x1f0>
 8002e14:	2305      	movs	r3, #5
 8002e16:	e00a      	b.n	8002e2e <HAL_GPIO_Init+0x206>
 8002e18:	2306      	movs	r3, #6
 8002e1a:	e008      	b.n	8002e2e <HAL_GPIO_Init+0x206>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	e006      	b.n	8002e2e <HAL_GPIO_Init+0x206>
 8002e20:	2303      	movs	r3, #3
 8002e22:	e004      	b.n	8002e2e <HAL_GPIO_Init+0x206>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e002      	b.n	8002e2e <HAL_GPIO_Init+0x206>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_GPIO_Init+0x206>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	f002 0203 	and.w	r2, r2, #3
 8002e34:	0092      	lsls	r2, r2, #2
 8002e36:	4093      	lsls	r3, r2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e3e:	492f      	ldr	r1, [pc, #188]	; (8002efc <HAL_GPIO_Init+0x2d4>)
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	3302      	adds	r3, #2
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d006      	beq.n	8002e66 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e58:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	492e      	ldr	r1, [pc, #184]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]
 8002e64:	e006      	b.n	8002e74 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	492a      	ldr	r1, [pc, #168]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d006      	beq.n	8002e8e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	4924      	ldr	r1, [pc, #144]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
 8002e8c:	e006      	b.n	8002e9c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	4920      	ldr	r1, [pc, #128]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	491a      	ldr	r1, [pc, #104]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eb6:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4916      	ldr	r1, [pc, #88]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d025      	beq.n	8002f1c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	4910      	ldr	r1, [pc, #64]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60cb      	str	r3, [r1, #12]
 8002edc:	e025      	b.n	8002f2a <HAL_GPIO_Init+0x302>
 8002ede:	bf00      	nop
 8002ee0:	10320000 	.word	0x10320000
 8002ee4:	10310000 	.word	0x10310000
 8002ee8:	10220000 	.word	0x10220000
 8002eec:	10210000 	.word	0x10210000
 8002ef0:	10120000 	.word	0x10120000
 8002ef4:	10110000 	.word	0x10110000
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000
 8002f00:	40010800 	.word	0x40010800
 8002f04:	40010c00 	.word	0x40010c00
 8002f08:	40011000 	.word	0x40011000
 8002f0c:	40011400 	.word	0x40011400
 8002f10:	40011800 	.word	0x40011800
 8002f14:	40011c00 	.word	0x40011c00
 8002f18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_GPIO_Init+0x324>)
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	4909      	ldr	r1, [pc, #36]	; (8002f4c <HAL_GPIO_Init+0x324>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f47f ae7e 	bne.w	8002c3c <HAL_GPIO_Init+0x14>
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	372c      	adds	r7, #44	; 0x2c
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	40010400 	.word	0x40010400

08002f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f6c:	e003      	b.n	8002f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	041a      	lsls	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	611a      	str	r2, [r3, #16]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4013      	ands	r3, r2
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	43d9      	mvns	r1, r3
 8002f9e:	887b      	ldrh	r3, [r7, #2]
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	611a      	str	r2, [r3, #16]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fd4c 	bl	8001a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40010400 	.word	0x40010400

08002fe4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	420e0020 	.word	0x420e0020

08002ffc <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_PWR_DisableBkUpAccess+0x14>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	420e0020 	.word	0x420e0020

08003014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e26c      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8087 	beq.w	8003142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003034:	4b92      	ldr	r3, [pc, #584]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b04      	cmp	r3, #4
 800303e:	d00c      	beq.n	800305a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003040:	4b8f      	ldr	r3, [pc, #572]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d112      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
 800304c:	4b8c      	ldr	r3, [pc, #560]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d10b      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305a:	4b89      	ldr	r3, [pc, #548]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d06c      	beq.n	8003140 <HAL_RCC_OscConfig+0x12c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d168      	bne.n	8003140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e246      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x76>
 800307c:	4b80      	ldr	r3, [pc, #512]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a7f      	ldr	r2, [pc, #508]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	e02e      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x98>
 8003092:	4b7b      	ldr	r3, [pc, #492]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7a      	ldr	r2, [pc, #488]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b78      	ldr	r3, [pc, #480]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a77      	ldr	r2, [pc, #476]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e01d      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0xbc>
 80030b6:	4b72      	ldr	r3, [pc, #456]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a71      	ldr	r2, [pc, #452]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6e      	ldr	r2, [pc, #440]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030d0:	4b6b      	ldr	r3, [pc, #428]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6a      	ldr	r2, [pc, #424]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b68      	ldr	r3, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a67      	ldr	r2, [pc, #412]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7ff fb1c 	bl	800272c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7ff fb18 	bl	800272c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1fa      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b5d      	ldr	r3, [pc, #372]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe4>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7ff fb08 	bl	800272c <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7ff fb04 	bl	800272c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1e6      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x10c>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d063      	beq.n	8003216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800314e:	4b4c      	ldr	r3, [pc, #304]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800315a:	4b49      	ldr	r3, [pc, #292]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b08      	cmp	r3, #8
 8003164:	d11c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x18c>
 8003166:	4b46      	ldr	r3, [pc, #280]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x176>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1ba      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4939      	ldr	r1, [pc, #228]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	e03a      	b.n	8003216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7ff fabd 	bl	800272c <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b6:	f7ff fab9 	bl	800272c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e19b      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4927      	ldr	r1, [pc, #156]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
 80031e8:	e015      	b.n	8003216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	4b26      	ldr	r3, [pc, #152]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7ff fa9c 	bl	800272c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7ff fa98 	bl	800272c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e17a      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03a      	beq.n	8003298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d019      	beq.n	800325e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <HAL_RCC_OscConfig+0x274>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7ff fa7c 	bl	800272c <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003238:	f7ff fa78 	bl	800272c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e15a      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003256:	2001      	movs	r0, #1
 8003258:	f000 fad8 	bl	800380c <RCC_Delay>
 800325c:	e01c      	b.n	8003298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <HAL_RCC_OscConfig+0x274>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7ff fa62 	bl	800272c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326a:	e00f      	b.n	800328c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326c:	f7ff fa5e 	bl	800272c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d908      	bls.n	800328c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e140      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	42420000 	.word	0x42420000
 8003288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b9e      	ldr	r3, [pc, #632]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e9      	bne.n	800326c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a6 	beq.w	80033f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b97      	ldr	r3, [pc, #604]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10d      	bne.n	80032d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	4b94      	ldr	r3, [pc, #592]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4a93      	ldr	r2, [pc, #588]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c0:	61d3      	str	r3, [r2, #28]
 80032c2:	4b91      	ldr	r3, [pc, #580]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b8e      	ldr	r3, [pc, #568]	; (800350c <HAL_RCC_OscConfig+0x4f8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d118      	bne.n	8003310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4b8b      	ldr	r3, [pc, #556]	; (800350c <HAL_RCC_OscConfig+0x4f8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a8a      	ldr	r2, [pc, #552]	; (800350c <HAL_RCC_OscConfig+0x4f8>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ea:	f7ff fa1f 	bl	800272c <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7ff fa1b 	bl	800272c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	; 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e0fd      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	4b81      	ldr	r3, [pc, #516]	; (800350c <HAL_RCC_OscConfig+0x4f8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x312>
 8003318:	4b7b      	ldr	r3, [pc, #492]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4a7a      	ldr	r2, [pc, #488]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6213      	str	r3, [r2, #32]
 8003324:	e02d      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x334>
 800332e:	4b76      	ldr	r3, [pc, #472]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4a75      	ldr	r2, [pc, #468]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6213      	str	r3, [r2, #32]
 800333a:	4b73      	ldr	r3, [pc, #460]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4a72      	ldr	r2, [pc, #456]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	f023 0304 	bic.w	r3, r3, #4
 8003344:	6213      	str	r3, [r2, #32]
 8003346:	e01c      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d10c      	bne.n	800336a <HAL_RCC_OscConfig+0x356>
 8003350:	4b6d      	ldr	r3, [pc, #436]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4a6c      	ldr	r2, [pc, #432]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6213      	str	r3, [r2, #32]
 800335c:	4b6a      	ldr	r3, [pc, #424]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4a69      	ldr	r2, [pc, #420]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6213      	str	r3, [r2, #32]
 8003368:	e00b      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 800336a:	4b67      	ldr	r3, [pc, #412]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4a66      	ldr	r2, [pc, #408]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	6213      	str	r3, [r2, #32]
 8003376:	4b64      	ldr	r3, [pc, #400]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4a63      	ldr	r2, [pc, #396]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d015      	beq.n	80033b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338a:	f7ff f9cf 	bl	800272c <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7ff f9cb 	bl	800272c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0ab      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	4b57      	ldr	r3, [pc, #348]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ee      	beq.n	8003392 <HAL_RCC_OscConfig+0x37e>
 80033b4:	e014      	b.n	80033e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7ff f9b9 	bl	800272c <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7ff f9b5 	bl	800272c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e095      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ee      	bne.n	80033be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b48      	ldr	r3, [pc, #288]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4a47      	ldr	r2, [pc, #284]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8081 	beq.w	80034fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fc:	4b42      	ldr	r3, [pc, #264]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d061      	beq.n	80034cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d146      	bne.n	800349e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003410:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <HAL_RCC_OscConfig+0x4fc>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7ff f989 	bl	800272c <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341e:	f7ff f985 	bl	800272c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e067      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003430:	4b35      	ldr	r3, [pc, #212]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003444:	d108      	bne.n	8003458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003446:	4b30      	ldr	r3, [pc, #192]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	492d      	ldr	r1, [pc, #180]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003458:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a19      	ldr	r1, [r3, #32]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	430b      	orrs	r3, r1
 800346a:	4927      	ldr	r1, [pc, #156]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	4b27      	ldr	r3, [pc, #156]	; (8003510 <HAL_RCC_OscConfig+0x4fc>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7ff f959 	bl	800272c <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7ff f955 	bl	800272c <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e037      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x46a>
 800349c:	e02f      	b.n	80034fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <HAL_RCC_OscConfig+0x4fc>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7ff f942 	bl	800272c <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7ff f93e 	bl	800272c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e020      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x498>
 80034ca:	e018      	b.n	80034fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e013      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	40007000 	.word	0x40007000
 8003510:	42420060 	.word	0x42420060

08003514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0d0      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003528:	4b6a      	ldr	r3, [pc, #424]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d910      	bls.n	8003558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 0207 	bic.w	r2, r3, #7
 800353e:	4965      	ldr	r1, [pc, #404]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0b8      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003570:	4b59      	ldr	r3, [pc, #356]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a58      	ldr	r2, [pc, #352]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800357a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003588:	4b53      	ldr	r3, [pc, #332]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a52      	ldr	r2, [pc, #328]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	494d      	ldr	r1, [pc, #308]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d040      	beq.n	8003634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d115      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07f      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e073      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e2:	4b3d      	ldr	r3, [pc, #244]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e06b      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f2:	4b39      	ldr	r3, [pc, #228]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f023 0203 	bic.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4936      	ldr	r1, [pc, #216]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003604:	f7ff f892 	bl	800272c <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	e00a      	b.n	8003622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360c:	f7ff f88e 	bl	800272c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e053      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 020c 	and.w	r2, r3, #12
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	429a      	cmp	r2, r3
 8003632:	d1eb      	bne.n	800360c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003634:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d210      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 0207 	bic.w	r2, r3, #7
 800364a:	4922      	ldr	r1, [pc, #136]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e032      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4916      	ldr	r1, [pc, #88]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	490e      	ldr	r1, [pc, #56]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036a2:	f000 f821 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80036a6:	4602      	mov	r2, r0
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	490a      	ldr	r1, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	5ccb      	ldrb	r3, [r1, r3]
 80036b6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ba:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1cc>)
 80036bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_ClockConfig+0x1d0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fff0 	bl	80026a8 <HAL_InitTick>

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40021000 	.word	0x40021000
 80036dc:	08008f68 	.word	0x08008f68
 80036e0:	20000008 	.word	0x20000008
 80036e4:	2000000c 	.word	0x2000000c

080036e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	b490      	push	{r4, r7}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036ee:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036f0:	1d3c      	adds	r4, r7, #4
 80036f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036f8:	f240 2301 	movw	r3, #513	; 0x201
 80036fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003712:	4b22      	ldr	r3, [pc, #136]	; (800379c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b04      	cmp	r3, #4
 8003720:	d002      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x40>
 8003722:	2b08      	cmp	r3, #8
 8003724:	d003      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x46>
 8003726:	e02d      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800372a:	623b      	str	r3, [r7, #32]
      break;
 800372c:	e02d      	b.n	800378a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	0c9b      	lsrs	r3, r3, #18
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800373a:	4413      	add	r3, r2
 800373c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003740:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d013      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <HAL_RCC_GetSysClockFreq+0xb4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	0c5b      	lsrs	r3, r3, #17
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800375a:	4413      	add	r3, r2
 800375c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003760:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	4a0e      	ldr	r2, [pc, #56]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003766:	fb02 f203 	mul.w	r2, r2, r3
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
 8003772:	e004      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	623b      	str	r3, [r7, #32]
      break;
 8003782:	e002      	b.n	800378a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003786:	623b      	str	r3, [r7, #32]
      break;
 8003788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378a:	6a3b      	ldr	r3, [r7, #32]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3728      	adds	r7, #40	; 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bc90      	pop	{r4, r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	08008e74 	.word	0x08008e74
 800379c:	40021000 	.word	0x40021000
 80037a0:	007a1200 	.word	0x007a1200
 80037a4:	003d0900 	.word	0x003d0900

080037a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ac:	4b02      	ldr	r3, [pc, #8]	; (80037b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr
 80037b8:	20000008 	.word	0x20000008

080037bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c0:	f7ff fff2 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	08008f78 	.word	0x08008f78

080037e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037e8:	f7ff ffde 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	0adb      	lsrs	r3, r3, #11
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021000 	.word	0x40021000
 8003808:	08008f78 	.word	0x08008f78

0800380c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003814:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <RCC_Delay+0x34>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <RCC_Delay+0x38>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	0a5b      	lsrs	r3, r3, #9
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003828:	bf00      	nop
  }
  while (Delay --);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1e5a      	subs	r2, r3, #1
 800382e:	60fa      	str	r2, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f9      	bne.n	8003828 <RCC_Delay+0x1c>
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	20000008 	.word	0x20000008
 8003844:	10624dd3 	.word	0x10624dd3

08003848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e041      	b.n	80038de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fe fb6c 	bl	8001f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 fd80 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d001      	beq.n	8003900 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e03c      	b.n	800397a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <HAL_TIM_Base_Start+0x9c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d018      	beq.n	8003944 <HAL_TIM_Base_Start+0x5c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <HAL_TIM_Base_Start+0xa0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d013      	beq.n	8003944 <HAL_TIM_Base_Start+0x5c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003924:	d00e      	beq.n	8003944 <HAL_TIM_Base_Start+0x5c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_TIM_Base_Start+0xa4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d009      	beq.n	8003944 <HAL_TIM_Base_Start+0x5c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a16      	ldr	r2, [pc, #88]	; (8003990 <HAL_TIM_Base_Start+0xa8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <HAL_TIM_Base_Start+0x5c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a15      	ldr	r2, [pc, #84]	; (8003994 <HAL_TIM_Base_Start+0xac>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d111      	bne.n	8003968 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b06      	cmp	r3, #6
 8003954:	d010      	beq.n	8003978 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003966:	e007      	b.n	8003978 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40013400 	.word	0x40013400
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800
 8003994:	40000c00 	.word	0x40000c00

08003998 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e041      	b.n	8003a2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f839 	bl	8003a36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f000 fcd8 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d109      	bne.n	8003a6c <HAL_TIM_PWM_Start+0x24>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e022      	b.n	8003ab2 <HAL_TIM_PWM_Start+0x6a>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d109      	bne.n	8003a86 <HAL_TIM_PWM_Start+0x3e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	bf14      	ite	ne
 8003a7e:	2301      	movne	r3, #1
 8003a80:	2300      	moveq	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	e015      	b.n	8003ab2 <HAL_TIM_PWM_Start+0x6a>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d109      	bne.n	8003aa0 <HAL_TIM_PWM_Start+0x58>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e008      	b.n	8003ab2 <HAL_TIM_PWM_Start+0x6a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e072      	b.n	8003ba0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_PWM_Start+0x82>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac8:	e013      	b.n	8003af2 <HAL_TIM_PWM_Start+0xaa>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_PWM_Start+0x92>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad8:	e00b      	b.n	8003af2 <HAL_TIM_PWM_Start+0xaa>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Start+0xa2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae8:	e003      	b.n	8003af2 <HAL_TIM_PWM_Start+0xaa>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2202      	movs	r2, #2
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2201      	movs	r2, #1
 8003af8:	6839      	ldr	r1, [r7, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 ff02 	bl	8004904 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a28      	ldr	r2, [pc, #160]	; (8003ba8 <HAL_TIM_PWM_Start+0x160>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_TIM_PWM_Start+0xcc>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a27      	ldr	r2, [pc, #156]	; (8003bac <HAL_TIM_PWM_Start+0x164>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <HAL_TIM_PWM_Start+0xd0>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_TIM_PWM_Start+0xd2>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <HAL_TIM_PWM_Start+0x160>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d018      	beq.n	8003b6a <HAL_TIM_PWM_Start+0x122>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1b      	ldr	r2, [pc, #108]	; (8003bac <HAL_TIM_PWM_Start+0x164>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_TIM_PWM_Start+0x122>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4a:	d00e      	beq.n	8003b6a <HAL_TIM_PWM_Start+0x122>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <HAL_TIM_PWM_Start+0x168>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_TIM_PWM_Start+0x122>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <HAL_TIM_PWM_Start+0x16c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <HAL_TIM_PWM_Start+0x122>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <HAL_TIM_PWM_Start+0x170>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d111      	bne.n	8003b8e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b06      	cmp	r3, #6
 8003b7a:	d010      	beq.n	8003b9e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8c:	e007      	b.n	8003b9e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40013400 	.word	0x40013400
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00

08003bbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e093      	b.n	8003cf8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7fe fa1f 	bl	8002028 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c00:	f023 0307 	bic.w	r3, r3, #7
 8003c04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4610      	mov	r0, r2
 8003c12:	f000 fbbb 	bl	800438c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3e:	f023 0303 	bic.w	r3, r3, #3
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c5c:	f023 030c 	bic.w	r3, r3, #12
 8003c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	011a      	lsls	r2, r3, #4
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	031b      	lsls	r3, r3, #12
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d110      	bne.n	8003d52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d102      	bne.n	8003d3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d36:	7b7b      	ldrb	r3, [r7, #13]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d001      	beq.n	8003d40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e069      	b.n	8003e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d50:	e031      	b.n	8003db6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d110      	bne.n	8003d7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d58:	7bbb      	ldrb	r3, [r7, #14]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d102      	bne.n	8003d64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d5e:	7b3b      	ldrb	r3, [r7, #12]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d001      	beq.n	8003d68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e055      	b.n	8003e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d78:	e01d      	b.n	8003db6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d108      	bne.n	8003d92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d80:	7bbb      	ldrb	r3, [r7, #14]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d86:	7b7b      	ldrb	r3, [r7, #13]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d102      	bne.n	8003d92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d8c:	7b3b      	ldrb	r3, [r7, #12]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d001      	beq.n	8003d96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e03e      	b.n	8003e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_TIM_Encoder_Start+0xc4>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d008      	beq.n	8003dd4 <HAL_TIM_Encoder_Start+0xd4>
 8003dc2:	e00f      	b.n	8003de4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fd99 	bl	8004904 <TIM_CCxChannelCmd>
      break;
 8003dd2:	e016      	b.n	8003e02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	2104      	movs	r1, #4
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fd91 	bl	8004904 <TIM_CCxChannelCmd>
      break;
 8003de2:	e00e      	b.n	8003e02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2201      	movs	r2, #1
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fd89 	bl	8004904 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	2104      	movs	r1, #4
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fd82 	bl	8004904 <TIM_CCxChannelCmd>
      break;
 8003e00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0201 	orr.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d122      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d11b      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0202 	mvn.w	r2, #2
 8003e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa78 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa6b 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa7a 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d122      	bne.n	8003ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d11b      	bne.n	8003ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0204 	mvn.w	r2, #4
 8003e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa4e 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fa41 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fa50 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d122      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d11b      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0208 	mvn.w	r2, #8
 8003ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa24 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa17 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fa26 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0210 	mvn.w	r2, #16
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2208      	movs	r2, #8
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9fa 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f9ed 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f9fc 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d10e      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0201 	mvn.w	r2, #1
 8003f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f9c8 	bl	8004330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	2b80      	cmp	r3, #128	; 0x80
 8003fac:	d10e      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	2b80      	cmp	r3, #128	; 0x80
 8003fba:	d107      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fd86 	bl	8004ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f9c0 	bl	8004378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b20      	cmp	r3, #32
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b20      	cmp	r3, #32
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0220 	mvn.w	r2, #32
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fd51 	bl	8004ac6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004042:	2302      	movs	r3, #2
 8004044:	e0ac      	b.n	80041a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b0c      	cmp	r3, #12
 8004052:	f200 809f 	bhi.w	8004194 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004056:	a201      	add	r2, pc, #4	; (adr r2, 800405c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	08004091 	.word	0x08004091
 8004060:	08004195 	.word	0x08004195
 8004064:	08004195 	.word	0x08004195
 8004068:	08004195 	.word	0x08004195
 800406c:	080040d1 	.word	0x080040d1
 8004070:	08004195 	.word	0x08004195
 8004074:	08004195 	.word	0x08004195
 8004078:	08004195 	.word	0x08004195
 800407c:	08004113 	.word	0x08004113
 8004080:	08004195 	.word	0x08004195
 8004084:	08004195 	.word	0x08004195
 8004088:	08004195 	.word	0x08004195
 800408c:	08004153 	.word	0x08004153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f9f2 	bl	8004480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0208 	orr.w	r2, r2, #8
 80040aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0204 	bic.w	r2, r2, #4
 80040ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6999      	ldr	r1, [r3, #24]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	619a      	str	r2, [r3, #24]
      break;
 80040ce:	e062      	b.n	8004196 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fa42 	bl	8004560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6999      	ldr	r1, [r3, #24]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	021a      	lsls	r2, r3, #8
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	619a      	str	r2, [r3, #24]
      break;
 8004110:	e041      	b.n	8004196 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fa95 	bl	8004648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0208 	orr.w	r2, r2, #8
 800412c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0204 	bic.w	r2, r2, #4
 800413c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69d9      	ldr	r1, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	61da      	str	r2, [r3, #28]
      break;
 8004150:	e021      	b.n	8004196 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fae9 	bl	8004730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69d9      	ldr	r1, [r3, #28]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	021a      	lsls	r2, r3, #8
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	61da      	str	r2, [r3, #28]
      break;
 8004192:	e000      	b.n	8004196 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004194:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_TIM_ConfigClockSource+0x18>
 80041bc:	2302      	movs	r3, #2
 80041be:	e0b3      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x180>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f8:	d03e      	beq.n	8004278 <HAL_TIM_ConfigClockSource+0xd0>
 80041fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fe:	f200 8087 	bhi.w	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004206:	f000 8085 	beq.w	8004314 <HAL_TIM_ConfigClockSource+0x16c>
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420e:	d87f      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004210:	2b70      	cmp	r3, #112	; 0x70
 8004212:	d01a      	beq.n	800424a <HAL_TIM_ConfigClockSource+0xa2>
 8004214:	2b70      	cmp	r3, #112	; 0x70
 8004216:	d87b      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004218:	2b60      	cmp	r3, #96	; 0x60
 800421a:	d050      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x116>
 800421c:	2b60      	cmp	r3, #96	; 0x60
 800421e:	d877      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004220:	2b50      	cmp	r3, #80	; 0x50
 8004222:	d03c      	beq.n	800429e <HAL_TIM_ConfigClockSource+0xf6>
 8004224:	2b50      	cmp	r3, #80	; 0x50
 8004226:	d873      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d058      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x136>
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d86f      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004230:	2b30      	cmp	r3, #48	; 0x30
 8004232:	d064      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x156>
 8004234:	2b30      	cmp	r3, #48	; 0x30
 8004236:	d86b      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004238:	2b20      	cmp	r3, #32
 800423a:	d060      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x156>
 800423c:	2b20      	cmp	r3, #32
 800423e:	d867      	bhi.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d05c      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x156>
 8004244:	2b10      	cmp	r3, #16
 8004246:	d05a      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004248:	e062      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6899      	ldr	r1, [r3, #8]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f000 fb34 	bl	80048c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800426c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	609a      	str	r2, [r3, #8]
      break;
 8004276:	e04e      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6899      	ldr	r1, [r3, #8]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f000 fb1d 	bl	80048c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800429a:	609a      	str	r2, [r3, #8]
      break;
 800429c:	e03b      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6859      	ldr	r1, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f000 fa94 	bl	80047d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2150      	movs	r1, #80	; 0x50
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 faeb 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 80042bc:	e02b      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6859      	ldr	r1, [r3, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f000 fab2 	bl	8004834 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2160      	movs	r1, #96	; 0x60
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fadb 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 80042dc:	e01b      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6859      	ldr	r1, [r3, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f000 fa74 	bl	80047d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2140      	movs	r1, #64	; 0x40
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 facb 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 80042fc:	e00b      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f000 fac2 	bl	8004892 <TIM_ITRx_SetConfig>
        break;
 800430e:	e002      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004314:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
	...

0800438c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a33      	ldr	r2, [pc, #204]	; (800446c <TIM_Base_SetConfig+0xe0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a32      	ldr	r2, [pc, #200]	; (8004470 <TIM_Base_SetConfig+0xe4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00f      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b2:	d00b      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a2f      	ldr	r2, [pc, #188]	; (8004474 <TIM_Base_SetConfig+0xe8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a2e      	ldr	r2, [pc, #184]	; (8004478 <TIM_Base_SetConfig+0xec>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a2d      	ldr	r2, [pc, #180]	; (800447c <TIM_Base_SetConfig+0xf0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d108      	bne.n	80043de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a22      	ldr	r2, [pc, #136]	; (800446c <TIM_Base_SetConfig+0xe0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <TIM_Base_SetConfig+0x82>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a21      	ldr	r2, [pc, #132]	; (8004470 <TIM_Base_SetConfig+0xe4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00f      	beq.n	800440e <TIM_Base_SetConfig+0x82>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d00b      	beq.n	800440e <TIM_Base_SetConfig+0x82>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a1e      	ldr	r2, [pc, #120]	; (8004474 <TIM_Base_SetConfig+0xe8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d007      	beq.n	800440e <TIM_Base_SetConfig+0x82>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <TIM_Base_SetConfig+0xec>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d003      	beq.n	800440e <TIM_Base_SetConfig+0x82>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1c      	ldr	r2, [pc, #112]	; (800447c <TIM_Base_SetConfig+0xf0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d108      	bne.n	8004420 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a09      	ldr	r2, [pc, #36]	; (800446c <TIM_Base_SetConfig+0xe0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0xc8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a08      	ldr	r2, [pc, #32]	; (8004470 <TIM_Base_SetConfig+0xe4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d103      	bne.n	800445c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	615a      	str	r2, [r3, #20]
}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	40012c00 	.word	0x40012c00
 8004470:	40013400 	.word	0x40013400
 8004474:	40000400 	.word	0x40000400
 8004478:	40000800 	.word	0x40000800
 800447c:	40000c00 	.word	0x40000c00

08004480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f023 0201 	bic.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f023 0302 	bic.w	r3, r3, #2
 80044c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a20      	ldr	r2, [pc, #128]	; (8004558 <TIM_OC1_SetConfig+0xd8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_OC1_SetConfig+0x64>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <TIM_OC1_SetConfig+0xdc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d10c      	bne.n	80044fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 0308 	bic.w	r3, r3, #8
 80044ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 0304 	bic.w	r3, r3, #4
 80044fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a15      	ldr	r2, [pc, #84]	; (8004558 <TIM_OC1_SetConfig+0xd8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d003      	beq.n	800450e <TIM_OC1_SetConfig+0x8e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a14      	ldr	r2, [pc, #80]	; (800455c <TIM_OC1_SetConfig+0xdc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d111      	bne.n	8004532 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800451c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	621a      	str	r2, [r3, #32]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40013400 	.word	0x40013400

08004560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f023 0210 	bic.w	r2, r3, #16
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f023 0320 	bic.w	r3, r3, #32
 80045aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a21      	ldr	r2, [pc, #132]	; (8004640 <TIM_OC2_SetConfig+0xe0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_OC2_SetConfig+0x68>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a20      	ldr	r2, [pc, #128]	; (8004644 <TIM_OC2_SetConfig+0xe4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d10d      	bne.n	80045e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a16      	ldr	r2, [pc, #88]	; (8004640 <TIM_OC2_SetConfig+0xe0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_OC2_SetConfig+0x94>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a15      	ldr	r2, [pc, #84]	; (8004644 <TIM_OC2_SetConfig+0xe4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d113      	bne.n	800461c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40013400 	.word	0x40013400

08004648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0303 	bic.w	r3, r3, #3
 800467e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a21      	ldr	r2, [pc, #132]	; (8004728 <TIM_OC3_SetConfig+0xe0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_OC3_SetConfig+0x66>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a20      	ldr	r2, [pc, #128]	; (800472c <TIM_OC3_SetConfig+0xe4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d10d      	bne.n	80046ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a16      	ldr	r2, [pc, #88]	; (8004728 <TIM_OC3_SetConfig+0xe0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <TIM_OC3_SetConfig+0x92>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a15      	ldr	r2, [pc, #84]	; (800472c <TIM_OC3_SetConfig+0xe4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d113      	bne.n	8004702 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40013400 	.word	0x40013400

08004730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800477a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	031b      	lsls	r3, r3, #12
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a11      	ldr	r2, [pc, #68]	; (80047d0 <TIM_OC4_SetConfig+0xa0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_OC4_SetConfig+0x68>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a10      	ldr	r2, [pc, #64]	; (80047d4 <TIM_OC4_SetConfig+0xa4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d109      	bne.n	80047ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800479e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	019b      	lsls	r3, r3, #6
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	621a      	str	r2, [r3, #32]
}
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40013400 	.word	0x40013400

080047d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f023 0201 	bic.w	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f023 030a 	bic.w	r3, r3, #10
 8004814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr

08004834 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f023 0210 	bic.w	r2, r3, #16
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800485e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	031b      	lsls	r3, r3, #12
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004870:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	621a      	str	r2, [r3, #32]
}
 8004888:	bf00      	nop
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr

08004892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f043 0307 	orr.w	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b087      	sub	sp, #28
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	021a      	lsls	r2, r3, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	609a      	str	r2, [r3, #8]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	2201      	movs	r2, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1a      	ldr	r2, [r3, #32]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	43db      	mvns	r3, r3
 8004926:	401a      	ands	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a1a      	ldr	r2, [r3, #32]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	fa01 f303 	lsl.w	r3, r1, r3
 800493c:	431a      	orrs	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004960:	2302      	movs	r3, #2
 8004962:	e050      	b.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ba:	d00e      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10c      	bne.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40013400 	.word	0x40013400
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00

08004a24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e03d      	b.n	8004abc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr

08004aea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e03f      	b.n	8004b7c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7fd fb69 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2224      	movs	r2, #36	; 0x24
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b2c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fc84 	bl	800543c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b42:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695a      	ldr	r2, [r3, #20]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b52:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b62:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	4613      	mov	r3, r2
 8004b92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d17c      	bne.n	8004c9e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_UART_Transmit+0x2c>
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e075      	b.n	8004ca0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Transmit+0x3e>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e06e      	b.n	8004ca0 <HAL_UART_Transmit+0x11c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2221      	movs	r2, #33	; 0x21
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bd8:	f7fd fda8 	bl	800272c <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	88fa      	ldrh	r2, [r7, #6]
 8004be2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf2:	d108      	bne.n	8004c06 <HAL_UART_Transmit+0x82>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	e003      	b.n	8004c0e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c16:	e02a      	b.n	8004c6e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2180      	movs	r1, #128	; 0x80
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fa37 	bl	8005096 <UART_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e036      	b.n	8004ca0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10b      	bne.n	8004c50 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c46:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	e007      	b.n	8004c60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	781a      	ldrb	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1cf      	bne.n	8004c18 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2140      	movs	r1, #64	; 0x40
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fa07 	bl	8005096 <UART_WaitOnFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e006      	b.n	8004ca0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e000      	b.n	8004ca0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
  }
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d11d      	bne.n	8004cfe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <HAL_UART_Receive_IT+0x26>
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e016      	b.n	8004d00 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_UART_Receive_IT+0x38>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e00f      	b.n	8004d00 <HAL_UART_Receive_IT+0x58>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fa18 	bl	800512a <UART_Start_Receive_IT>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	e000      	b.n	8004d00 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	; 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10d      	bne.n	8004d5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <HAL_UART_IRQHandler+0x52>
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fac9 	bl	80052ea <UART_Receive_IT>
      return;
 8004d58:	e17b      	b.n	8005052 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80b1 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x1bc>
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <HAL_UART_IRQHandler+0x70>
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 80a6 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_UART_IRQHandler+0x90>
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	f043 0201 	orr.w	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_UART_IRQHandler+0xb0>
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	f043 0202 	orr.w	r2, r3, #2
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_UART_IRQHandler+0xd0>
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	f043 0204 	orr.w	r2, r3, #4
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00f      	beq.n	8004e02 <HAL_UART_IRQHandler+0xfa>
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_UART_IRQHandler+0xee>
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f043 0208 	orr.w	r2, r3, #8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 811e 	beq.w	8005048 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d007      	beq.n	8004e26 <HAL_UART_IRQHandler+0x11e>
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fa62 	bl	80052ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <HAL_UART_IRQHandler+0x146>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d031      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f9a4 	bl	800519c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d023      	beq.n	8004eaa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d013      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	4a76      	ldr	r2, [pc, #472]	; (8005058 <HAL_UART_IRQHandler+0x350>)
 8004e80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fd fdc6 	bl	8002a18 <HAL_DMA_Abort_IT>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d016      	beq.n	8004ec0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	e00e      	b.n	8004ec0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f8e3 	bl	800506e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	e00a      	b.n	8004ec0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f8df 	bl	800506e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	e006      	b.n	8004ec0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f8db 	bl	800506e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ebe:	e0c3      	b.n	8005048 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec0:	bf00      	nop
    return;
 8004ec2:	e0c1      	b.n	8005048 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	f040 80a1 	bne.w	8005010 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 809b 	beq.w	8005010 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8095 	beq.w	8005010 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d04e      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004f14:	8a3b      	ldrh	r3, [r7, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8098 	beq.w	800504c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f20:	8a3a      	ldrh	r2, [r7, #16]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	f080 8092 	bcs.w	800504c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8a3a      	ldrh	r2, [r7, #16]
 8004f2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d02b      	beq.n	8004f90 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f46:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695a      	ldr	r2, [r3, #20]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f66:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0210 	bic.w	r2, r2, #16
 8004f84:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd fd09 	bl	80029a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f86d 	bl	8005080 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004fa6:	e051      	b.n	800504c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d047      	beq.n	8005050 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004fc0:	8a7b      	ldrh	r3, [r7, #18]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d044      	beq.n	8005050 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fd4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0210 	bic.w	r2, r2, #16
 8005002:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005004:	8a7b      	ldrh	r3, [r7, #18]
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f839 	bl	8005080 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800500e:	e01f      	b.n	8005050 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <HAL_UART_IRQHandler+0x324>
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8f9 	bl	800521c <UART_Transmit_IT>
    return;
 800502a:	e012      	b.n	8005052 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00d      	beq.n	8005052 <HAL_UART_IRQHandler+0x34a>
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f93a 	bl	80052ba <UART_EndTransmit_IT>
    return;
 8005046:	e004      	b.n	8005052 <HAL_UART_IRQHandler+0x34a>
    return;
 8005048:	bf00      	nop
 800504a:	e002      	b.n	8005052 <HAL_UART_IRQHandler+0x34a>
      return;
 800504c:	bf00      	nop
 800504e:	e000      	b.n	8005052 <HAL_UART_IRQHandler+0x34a>
      return;
 8005050:	bf00      	nop
  }
}
 8005052:	3728      	adds	r7, #40	; 0x28
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	080051f5 	.word	0x080051f5

0800505c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr

0800506e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr

08005096 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a6:	e02c      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d028      	beq.n	8005102 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80050b6:	f7fd fb39 	bl	800272c <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d21d      	bcs.n	8005102 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050d4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e00f      	b.n	8005122 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4013      	ands	r3, r2
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	bf0c      	ite	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	2300      	movne	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	429a      	cmp	r2, r3
 800511e:	d0c3      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	4613      	mov	r3, r2
 8005136:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	88fa      	ldrh	r2, [r7, #6]
 8005142:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	88fa      	ldrh	r2, [r7, #6]
 8005148:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2222      	movs	r2, #34	; 0x22
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0220 	orr.w	r2, r2, #32
 800518e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr

0800519c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695a      	ldr	r2, [r3, #20]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d107      	bne.n	80051dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0210 	bic.w	r2, r2, #16
 80051da:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr

080051f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f7ff ff2d 	bl	800506e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005214:	bf00      	nop
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b21      	cmp	r3, #33	; 0x21
 800522e:	d13e      	bne.n	80052ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005238:	d114      	bne.n	8005264 <UART_Transmit_IT+0x48>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d110      	bne.n	8005264 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005256:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	1c9a      	adds	r2, r3, #2
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	621a      	str	r2, [r3, #32]
 8005262:	e008      	b.n	8005276 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	1c59      	adds	r1, r3, #1
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6211      	str	r1, [r2, #32]
 800526e:	781a      	ldrb	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29b      	uxth	r3, r3
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	4619      	mov	r1, r3
 8005284:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005298:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e000      	b.n	80052b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052ae:	2302      	movs	r3, #2
  }
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr

080052ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff febe 	bl	800505c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b086      	sub	sp, #24
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b22      	cmp	r3, #34	; 0x22
 80052fc:	f040 8099 	bne.w	8005432 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005308:	d117      	bne.n	800533a <UART_Receive_IT+0x50>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d113      	bne.n	800533a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005328:	b29a      	uxth	r2, r3
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	1c9a      	adds	r2, r3, #2
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
 8005338:	e026      	b.n	8005388 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534c:	d007      	beq.n	800535e <UART_Receive_IT+0x74>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <UART_Receive_IT+0x82>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	b2da      	uxtb	r2, r3
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	e008      	b.n	800537e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005378:	b2da      	uxtb	r2, r3
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29b      	uxth	r3, r3
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4619      	mov	r1, r3
 8005396:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005398:	2b00      	cmp	r3, #0
 800539a:	d148      	bne.n	800542e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0220 	bic.w	r2, r2, #32
 80053aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d123      	bne.n	8005424 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0210 	bic.w	r2, r2, #16
 80053f0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d10a      	bne.n	8005416 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff fe2f 	bl	8005080 <HAL_UARTEx_RxEventCallback>
 8005422:	e002      	b.n	800542a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fc fa9f 	bl	8001968 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	e002      	b.n	8005434 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	e000      	b.n	8005434 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005432:	2302      	movs	r3, #2
  }
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005476:	f023 030c 	bic.w	r3, r3, #12
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	430b      	orrs	r3, r1
 8005482:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a2c      	ldr	r2, [pc, #176]	; (8005550 <UART_SetConfig+0x114>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d103      	bne.n	80054ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054a4:	f7fe f99e 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	e002      	b.n	80054b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054ac:	f7fe f986 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 80054b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009a      	lsls	r2, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	4a22      	ldr	r2, [pc, #136]	; (8005554 <UART_SetConfig+0x118>)
 80054ca:	fba2 2303 	umull	r2, r3, r2, r3
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	0119      	lsls	r1, r3, #4
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009a      	lsls	r2, r3, #2
 80054dc:	441a      	add	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054e8:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <UART_SetConfig+0x118>)
 80054ea:	fba3 0302 	umull	r0, r3, r3, r2
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	2064      	movs	r0, #100	; 0x64
 80054f2:	fb00 f303 	mul.w	r3, r0, r3
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	3332      	adds	r3, #50	; 0x32
 80054fc:	4a15      	ldr	r2, [pc, #84]	; (8005554 <UART_SetConfig+0x118>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005508:	4419      	add	r1, r3
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	009a      	lsls	r2, r3, #2
 8005514:	441a      	add	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005520:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <UART_SetConfig+0x118>)
 8005522:	fba3 0302 	umull	r0, r3, r3, r2
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	2064      	movs	r0, #100	; 0x64
 800552a:	fb00 f303 	mul.w	r3, r0, r3
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	3332      	adds	r3, #50	; 0x32
 8005534:	4a07      	ldr	r2, [pc, #28]	; (8005554 <UART_SetConfig+0x118>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	f003 020f 	and.w	r2, r3, #15
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	440a      	add	r2, r1
 8005546:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40013800 	.word	0x40013800
 8005554:	51eb851f 	.word	0x51eb851f

08005558 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800555e:	f3ef 8305 	mrs	r3, IPSR
 8005562:	60bb      	str	r3, [r7, #8]
  return(result);
 8005564:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10f      	bne.n	800558a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800556a:	f3ef 8310 	mrs	r3, PRIMASK
 800556e:	607b      	str	r3, [r7, #4]
  return(result);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <osKernelInitialize+0x32>
 8005576:	4b10      	ldr	r3, [pc, #64]	; (80055b8 <osKernelInitialize+0x60>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d109      	bne.n	8005592 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800557e:	f3ef 8311 	mrs	r3, BASEPRI
 8005582:	603b      	str	r3, [r7, #0]
  return(result);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800558a:	f06f 0305 	mvn.w	r3, #5
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	e00c      	b.n	80055ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005592:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <osKernelInitialize+0x60>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800559a:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <osKernelInitialize+0x60>)
 800559c:	2201      	movs	r2, #1
 800559e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e002      	b.n	80055ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80055a6:	f04f 33ff 	mov.w	r3, #4294967295
 80055aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80055ac:	68fb      	ldr	r3, [r7, #12]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr
 80055b8:	200000c8 	.word	0x200000c8

080055bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055c2:	f3ef 8305 	mrs	r3, IPSR
 80055c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80055c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10f      	bne.n	80055ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ce:	f3ef 8310 	mrs	r3, PRIMASK
 80055d2:	607b      	str	r3, [r7, #4]
  return(result);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <osKernelStart+0x32>
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <osKernelStart+0x64>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d109      	bne.n	80055f6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055e2:	f3ef 8311 	mrs	r3, BASEPRI
 80055e6:	603b      	str	r3, [r7, #0]
  return(result);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80055ee:	f06f 0305 	mvn.w	r3, #5
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e00e      	b.n	8005614 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80055f6:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <osKernelStart+0x64>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d107      	bne.n	800560e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80055fe:	4b08      	ldr	r3, [pc, #32]	; (8005620 <osKernelStart+0x64>)
 8005600:	2202      	movs	r2, #2
 8005602:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005604:	f001 f93c 	bl	8006880 <vTaskStartScheduler>
      stat = osOK;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	e002      	b.n	8005614 <osKernelStart+0x58>
    } else {
      stat = osError;
 800560e:	f04f 33ff 	mov.w	r3, #4294967295
 8005612:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005614:	68fb      	ldr	r3, [r7, #12]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	200000c8 	.word	0x200000c8

08005624 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b092      	sub	sp, #72	; 0x48
 8005628:	af04      	add	r7, sp, #16
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005634:	f3ef 8305 	mrs	r3, IPSR
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800563c:	2b00      	cmp	r3, #0
 800563e:	f040 8094 	bne.w	800576a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005642:	f3ef 8310 	mrs	r3, PRIMASK
 8005646:	623b      	str	r3, [r7, #32]
  return(result);
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f040 808d 	bne.w	800576a <osThreadNew+0x146>
 8005650:	4b48      	ldr	r3, [pc, #288]	; (8005774 <osThreadNew+0x150>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d106      	bne.n	8005666 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005658:	f3ef 8311 	mrs	r3, BASEPRI
 800565c:	61fb      	str	r3, [r7, #28]
  return(result);
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f040 8082 	bne.w	800576a <osThreadNew+0x146>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d07e      	beq.n	800576a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800566c:	2380      	movs	r3, #128	; 0x80
 800566e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005670:	2318      	movs	r3, #24
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005674:	2300      	movs	r3, #0
 8005676:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005678:	f107 031b 	add.w	r3, r7, #27
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800567e:	f04f 33ff 	mov.w	r3, #4294967295
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d045      	beq.n	8005716 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <osThreadNew+0x74>
        name = attr->name;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <osThreadNew+0x9a>
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	2b38      	cmp	r3, #56	; 0x38
 80056b0:	d805      	bhi.n	80056be <osThreadNew+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <osThreadNew+0x9e>
        return (NULL);
 80056be:	2300      	movs	r3, #0
 80056c0:	e054      	b.n	800576c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	089b      	lsrs	r3, r3, #2
 80056d0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00e      	beq.n	80056f8 <osThreadNew+0xd4>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	2b5b      	cmp	r3, #91	; 0x5b
 80056e0:	d90a      	bls.n	80056f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d006      	beq.n	80056f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <osThreadNew+0xd4>
        mem = 1;
 80056f2:	2301      	movs	r3, #1
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f6:	e010      	b.n	800571a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10c      	bne.n	800571a <osThreadNew+0xf6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d108      	bne.n	800571a <osThreadNew+0xf6>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <osThreadNew+0xf6>
          mem = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
 8005714:	e001      	b.n	800571a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	2b01      	cmp	r3, #1
 800571e:	d110      	bne.n	8005742 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005728:	9202      	str	r2, [sp, #8]
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fed6 	bl	80064e8 <xTaskCreateStatic>
 800573c:	4603      	mov	r3, r0
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e013      	b.n	800576a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	2b00      	cmp	r3, #0
 8005746:	d110      	bne.n	800576a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	b29a      	uxth	r2, r3
 800574c:	f107 0314 	add.w	r3, r7, #20
 8005750:	9301      	str	r3, [sp, #4]
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 ff20 	bl	80065a0 <xTaskCreate>
 8005760:	4603      	mov	r3, r0
 8005762:	2b01      	cmp	r3, #1
 8005764:	d001      	beq.n	800576a <osThreadNew+0x146>
          hTask = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800576a:	697b      	ldr	r3, [r7, #20]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3738      	adds	r7, #56	; 0x38
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	200000c8 	.word	0x200000c8

08005778 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005780:	f3ef 8305 	mrs	r3, IPSR
 8005784:	613b      	str	r3, [r7, #16]
  return(result);
 8005786:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10f      	bne.n	80057ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578c:	f3ef 8310 	mrs	r3, PRIMASK
 8005790:	60fb      	str	r3, [r7, #12]
  return(result);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d109      	bne.n	80057ac <osDelay+0x34>
 8005798:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <osDelay+0x58>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d109      	bne.n	80057b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057a0:	f3ef 8311 	mrs	r3, BASEPRI
 80057a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <osDelay+0x3c>
    stat = osErrorISR;
 80057ac:	f06f 0305 	mvn.w	r3, #5
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e007      	b.n	80057c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f001 f82a 	bl	8006818 <vTaskDelay>
    }
  }

  return (stat);
 80057c4:	697b      	ldr	r3, [r7, #20]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	200000c8 	.word	0x200000c8

080057d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08c      	sub	sp, #48	; 0x30
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057e4:	f3ef 8305 	mrs	r3, IPSR
 80057e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80057ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d16f      	bne.n	80058d0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f0:	f3ef 8310 	mrs	r3, PRIMASK
 80057f4:	617b      	str	r3, [r7, #20]
  return(result);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d169      	bne.n	80058d0 <osMessageQueueNew+0xfc>
 80057fc:	4b37      	ldr	r3, [pc, #220]	; (80058dc <osMessageQueueNew+0x108>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d105      	bne.n	8005810 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005804:	f3ef 8311 	mrs	r3, BASEPRI
 8005808:	613b      	str	r3, [r7, #16]
  return(result);
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d15f      	bne.n	80058d0 <osMessageQueueNew+0xfc>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d05c      	beq.n	80058d0 <osMessageQueueNew+0xfc>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d059      	beq.n	80058d0 <osMessageQueueNew+0xfc>
    mem = -1;
 800581c:	f04f 33ff 	mov.w	r3, #4294967295
 8005820:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d029      	beq.n	800587c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d012      	beq.n	8005856 <osMessageQueueNew+0x82>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	2b4f      	cmp	r3, #79	; 0x4f
 8005836:	d90e      	bls.n	8005856 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	695a      	ldr	r2, [r3, #20]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	fb01 f303 	mul.w	r3, r1, r3
 800584c:	429a      	cmp	r2, r3
 800584e:	d302      	bcc.n	8005856 <osMessageQueueNew+0x82>
        mem = 1;
 8005850:	2301      	movs	r3, #1
 8005852:	623b      	str	r3, [r7, #32]
 8005854:	e014      	b.n	8005880 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d110      	bne.n	8005880 <osMessageQueueNew+0xac>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10c      	bne.n	8005880 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <osMessageQueueNew+0xac>
          mem = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	623b      	str	r3, [r7, #32]
 800587a:	e001      	b.n	8005880 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d10b      	bne.n	800589e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2100      	movs	r1, #0
 8005890:	9100      	str	r1, [sp, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f96d 	bl	8005b74 <xQueueGenericCreateStatic>
 800589a:	6278      	str	r0, [r7, #36]	; 0x24
 800589c:	e008      	b.n	80058b0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d105      	bne.n	80058b0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80058a4:	2200      	movs	r2, #0
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f9da 	bl	8005c62 <xQueueGenericCreate>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00c      	beq.n	80058d0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <osMessageQueueNew+0xf0>
        name = attr->name;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	e001      	b.n	80058c8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80058c8:	69f9      	ldr	r1, [r7, #28]
 80058ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058cc:	f000 fdb0 	bl	8006430 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3728      	adds	r7, #40	; 0x28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200000c8 	.word	0x200000c8

080058e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4a06      	ldr	r2, [pc, #24]	; (8005908 <vApplicationGetIdleTaskMemory+0x28>)
 80058f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	4a05      	ldr	r2, [pc, #20]	; (800590c <vApplicationGetIdleTaskMemory+0x2c>)
 80058f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr
 8005908:	200000cc 	.word	0x200000cc
 800590c:	20000128 	.word	0x20000128

08005910 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4a07      	ldr	r2, [pc, #28]	; (800593c <vApplicationGetTimerTaskMemory+0x2c>)
 8005920:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4a06      	ldr	r2, [pc, #24]	; (8005940 <vApplicationGetTimerTaskMemory+0x30>)
 8005926:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800592e:	601a      	str	r2, [r3, #0]
}
 8005930:	bf00      	nop
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	bc80      	pop	{r7}
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	20000328 	.word	0x20000328
 8005940:	20000384 	.word	0x20000384

08005944 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f103 0208 	add.w	r2, r3, #8
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f04f 32ff 	mov.w	r2, #4294967295
 800595c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f103 0208 	add.w	r2, r3, #8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f103 0208 	add.w	r2, r3, #8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr

08005982 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800599a:	b480      	push	{r7}
 800599c:	b085      	sub	sp, #20
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	601a      	str	r2, [r3, #0]
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f6:	d103      	bne.n	8005a00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e00c      	b.n	8005a1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3308      	adds	r3, #8
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	e002      	b.n	8005a0e <vListInsert+0x2e>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d2f6      	bcs.n	8005a08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr

08005a50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6892      	ldr	r2, [r2, #8]
 8005a66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6852      	ldr	r2, [r2, #4]
 8005a70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d103      	bne.n	8005a84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	1e5a      	subs	r2, r3, #1
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr
	...

08005aa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ace:	f002 f805 	bl	8007adc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ada:	68f9      	ldr	r1, [r7, #12]
 8005adc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ade:	fb01 f303 	mul.w	r3, r1, r3
 8005ae2:	441a      	add	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afe:	3b01      	subs	r3, #1
 8005b00:	68f9      	ldr	r1, [r7, #12]
 8005b02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	441a      	add	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	22ff      	movs	r2, #255	; 0xff
 8005b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	22ff      	movs	r2, #255	; 0xff
 8005b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d114      	bne.n	8005b4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01a      	beq.n	8005b62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3310      	adds	r3, #16
 8005b30:	4618      	mov	r0, r3
 8005b32:	f001 f92f 	bl	8006d94 <xTaskRemoveFromEventList>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d012      	beq.n	8005b62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <xQueueGenericReset+0xcc>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	e009      	b.n	8005b62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3310      	adds	r3, #16
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff fef6 	bl	8005944 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3324      	adds	r3, #36	; 0x24
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff fef1 	bl	8005944 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b62:	f001 ffeb 	bl	8007b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b66:	2301      	movs	r3, #1
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08e      	sub	sp, #56	; 0x38
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b9a:	bf00      	nop
 8005b9c:	e7fe      	b.n	8005b9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <xQueueGenericCreateStatic+0x52>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <xQueueGenericCreateStatic+0x56>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <xQueueGenericCreateStatic+0x58>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	623b      	str	r3, [r7, #32]
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d102      	bne.n	8005bf2 <xQueueGenericCreateStatic+0x7e>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <xQueueGenericCreateStatic+0x82>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <xQueueGenericCreateStatic+0x84>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	61fb      	str	r3, [r7, #28]
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c12:	2350      	movs	r3, #80	; 0x50
 8005c14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b50      	cmp	r3, #80	; 0x50
 8005c1a:	d00a      	beq.n	8005c32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	61bb      	str	r3, [r7, #24]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c44:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f843 	bl	8005cde <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3730      	adds	r7, #48	; 0x30
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b08a      	sub	sp, #40	; 0x28
 8005c66:	af02      	add	r7, sp, #8
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <xQueueGenericCreate+0x2a>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	613b      	str	r3, [r7, #16]
}
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61fb      	str	r3, [r7, #28]
 8005c96:	e004      	b.n	8005ca2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ca0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	3350      	adds	r3, #80	; 0x50
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f002 f818 	bl	8007cdc <pvPortMalloc>
 8005cac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00f      	beq.n	8005cd4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	3350      	adds	r3, #80	; 0x50
 8005cb8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cc2:	79fa      	ldrb	r2, [r7, #7]
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 f805 	bl	8005cde <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005cd4:	69bb      	ldr	r3, [r7, #24]
	}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	e002      	b.n	8005d00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	69b8      	ldr	r0, [r7, #24]
 8005d10:	f7ff fec8 	bl	8005aa4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08e      	sub	sp, #56	; 0x38
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d32:	2300      	movs	r3, #0
 8005d34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <xQueueGenericSend+0x32>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d52:	bf00      	nop
 8005d54:	e7fe      	b.n	8005d54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <xQueueGenericSend+0x40>
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <xQueueGenericSend+0x44>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <xQueueGenericSend+0x46>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <xQueueGenericSend+0x60>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d103      	bne.n	8005d92 <xQueueGenericSend+0x6e>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <xQueueGenericSend+0x72>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <xQueueGenericSend+0x74>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	623b      	str	r3, [r7, #32]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005db2:	f001 f9b1 	bl	8007118 <xTaskGetSchedulerState>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <xQueueGenericSend+0x9e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <xQueueGenericSend+0xa2>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <xQueueGenericSend+0xa4>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	61fb      	str	r3, [r7, #28]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005de2:	f001 fe7b 	bl	8007adc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d302      	bcc.n	8005df8 <xQueueGenericSend+0xd4>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d129      	bne.n	8005e4c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dfe:	f000 fa07 	bl	8006210 <prvCopyDataToQueue>
 8005e02:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d010      	beq.n	8005e2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	3324      	adds	r3, #36	; 0x24
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 ffbf 	bl	8006d94 <xTaskRemoveFromEventList>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d013      	beq.n	8005e44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e1c:	4b3f      	ldr	r3, [pc, #252]	; (8005f1c <xQueueGenericSend+0x1f8>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	e00a      	b.n	8005e44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e34:	4b39      	ldr	r3, [pc, #228]	; (8005f1c <xQueueGenericSend+0x1f8>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e44:	f001 fe7a 	bl	8007b3c <vPortExitCritical>
				return pdPASS;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e063      	b.n	8005f14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d103      	bne.n	8005e5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e52:	f001 fe73 	bl	8007b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e05c      	b.n	8005f14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e60:	f107 0314 	add.w	r3, r7, #20
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fff9 	bl	8006e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e6e:	f001 fe65 	bl	8007b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e72:	f000 fd6b 	bl	800694c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e76:	f001 fe31 	bl	8007adc <vPortEnterCritical>
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e80:	b25b      	sxtb	r3, r3
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e86:	d103      	bne.n	8005e90 <xQueueGenericSend+0x16c>
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e96:	b25b      	sxtb	r3, r3
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d103      	bne.n	8005ea6 <xQueueGenericSend+0x182>
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ea6:	f001 fe49 	bl	8007b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eaa:	1d3a      	adds	r2, r7, #4
 8005eac:	f107 0314 	add.w	r3, r7, #20
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 ffe8 	bl	8006e88 <xTaskCheckForTimeOut>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d124      	bne.n	8005f08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec0:	f000 fa9e 	bl	8006400 <prvIsQueueFull>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d018      	beq.n	8005efc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	3310      	adds	r3, #16
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 ff0e 	bl	8006cf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eda:	f000 fa29 	bl	8006330 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ede:	f000 fd43 	bl	8006968 <xTaskResumeAll>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f47f af7c 	bne.w	8005de2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005eea:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <xQueueGenericSend+0x1f8>)
 8005eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	e772      	b.n	8005de2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005efe:	f000 fa17 	bl	8006330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f02:	f000 fd31 	bl	8006968 <xTaskResumeAll>
 8005f06:	e76c      	b.n	8005de2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f0a:	f000 fa11 	bl	8006330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f0e:	f000 fd2b 	bl	8006968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f12:	2300      	movs	r3, #0
		}
	}
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3738      	adds	r7, #56	; 0x38
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08e      	sub	sp, #56	; 0x38
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d103      	bne.n	8005f5c <xQueueGenericSendFromISR+0x3c>
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <xQueueGenericSendFromISR+0x40>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <xQueueGenericSendFromISR+0x42>
 8005f60:	2300      	movs	r3, #0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	623b      	str	r3, [r7, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d103      	bne.n	8005f8a <xQueueGenericSendFromISR+0x6a>
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <xQueueGenericSendFromISR+0x6e>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <xQueueGenericSendFromISR+0x70>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	61fb      	str	r3, [r7, #28]
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005faa:	f001 fe59 	bl	8007c60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fae:	f3ef 8211 	mrs	r2, BASEPRI
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	61ba      	str	r2, [r7, #24]
 8005fc4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d302      	bcc.n	8005fdc <xQueueGenericSendFromISR+0xbc>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d12c      	bne.n	8006036 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fec:	f000 f910 	bl	8006210 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ff0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff8:	d112      	bne.n	8006020 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d016      	beq.n	8006030 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	3324      	adds	r3, #36	; 0x24
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fec4 	bl	8006d94 <xTaskRemoveFromEventList>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00e      	beq.n	8006030 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00b      	beq.n	8006030 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	e007      	b.n	8006030 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006020:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006024:	3301      	adds	r3, #1
 8006026:	b2db      	uxtb	r3, r3
 8006028:	b25a      	sxtb	r2, r3
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006030:	2301      	movs	r3, #1
 8006032:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006034:	e001      	b.n	800603a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006036:	2300      	movs	r3, #0
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006044:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006048:	4618      	mov	r0, r3
 800604a:	3738      	adds	r7, #56	; 0x38
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08c      	sub	sp, #48	; 0x30
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800605c:	2300      	movs	r3, #0
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <xQueueReceive+0x30>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	623b      	str	r3, [r7, #32]
}
 800607c:	bf00      	nop
 800607e:	e7fe      	b.n	800607e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <xQueueReceive+0x3e>
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <xQueueReceive+0x42>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <xQueueReceive+0x44>
 8006092:	2300      	movs	r3, #0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <xQueueReceive+0x5e>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	61fb      	str	r3, [r7, #28]
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060ae:	f001 f833 	bl	8007118 <xTaskGetSchedulerState>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <xQueueReceive+0x6e>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <xQueueReceive+0x72>
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <xQueueReceive+0x74>
 80060c2:	2300      	movs	r3, #0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <xQueueReceive+0x8e>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	61bb      	str	r3, [r7, #24]
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80060de:	f001 fcfd 	bl	8007adc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01f      	beq.n	800612e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f2:	f000 f8f7 	bl	80062e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	1e5a      	subs	r2, r3, #1
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00f      	beq.n	8006126 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	3310      	adds	r3, #16
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fe42 	bl	8006d94 <xTaskRemoveFromEventList>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006116:	4b3d      	ldr	r3, [pc, #244]	; (800620c <xQueueReceive+0x1bc>)
 8006118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006126:	f001 fd09 	bl	8007b3c <vPortExitCritical>
				return pdPASS;
 800612a:	2301      	movs	r3, #1
 800612c:	e069      	b.n	8006202 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d103      	bne.n	800613c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006134:	f001 fd02 	bl	8007b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006138:	2300      	movs	r3, #0
 800613a:	e062      	b.n	8006202 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006142:	f107 0310 	add.w	r3, r7, #16
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fe88 	bl	8006e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800614c:	2301      	movs	r3, #1
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006150:	f001 fcf4 	bl	8007b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006154:	f000 fbfa 	bl	800694c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006158:	f001 fcc0 	bl	8007adc <vPortEnterCritical>
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006162:	b25b      	sxtb	r3, r3
 8006164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006168:	d103      	bne.n	8006172 <xQueueReceive+0x122>
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006178:	b25b      	sxtb	r3, r3
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d103      	bne.n	8006188 <xQueueReceive+0x138>
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006188:	f001 fcd8 	bl	8007b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800618c:	1d3a      	adds	r2, r7, #4
 800618e:	f107 0310 	add.w	r3, r7, #16
 8006192:	4611      	mov	r1, r2
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fe77 	bl	8006e88 <xTaskCheckForTimeOut>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d123      	bne.n	80061e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a2:	f000 f917 	bl	80063d4 <prvIsQueueEmpty>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d017      	beq.n	80061dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	3324      	adds	r3, #36	; 0x24
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4611      	mov	r1, r2
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fd9d 	bl	8006cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061bc:	f000 f8b8 	bl	8006330 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061c0:	f000 fbd2 	bl	8006968 <xTaskResumeAll>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d189      	bne.n	80060de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061ca:	4b10      	ldr	r3, [pc, #64]	; (800620c <xQueueReceive+0x1bc>)
 80061cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	e780      	b.n	80060de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061de:	f000 f8a7 	bl	8006330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061e2:	f000 fbc1 	bl	8006968 <xTaskResumeAll>
 80061e6:	e77a      	b.n	80060de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ea:	f000 f8a1 	bl	8006330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061ee:	f000 fbbb 	bl	8006968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f4:	f000 f8ee 	bl	80063d4 <prvIsQueueEmpty>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f43f af6f 	beq.w	80060de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006200:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006202:	4618      	mov	r0, r3
 8006204:	3730      	adds	r7, #48	; 0x30
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10d      	bne.n	800624a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d14d      	bne.n	80062d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 ff8a 	bl	8007154 <xTaskPriorityDisinherit>
 8006240:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	605a      	str	r2, [r3, #4]
 8006248:	e043      	b.n	80062d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d119      	bne.n	8006284 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6898      	ldr	r0, [r3, #8]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	461a      	mov	r2, r3
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	f002 f970 	bl	8008540 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	441a      	add	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	429a      	cmp	r2, r3
 8006278:	d32b      	bcc.n	80062d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	609a      	str	r2, [r3, #8]
 8006282:	e026      	b.n	80062d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	68d8      	ldr	r0, [r3, #12]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	461a      	mov	r2, r3
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	f002 f956 	bl	8008540 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	425b      	negs	r3, r3
 800629e:	441a      	add	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d207      	bcs.n	80062c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	425b      	negs	r3, r3
 80062ba:	441a      	add	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d105      	bne.n	80062d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80062da:	697b      	ldr	r3, [r7, #20]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d018      	beq.n	8006328 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	441a      	add	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	429a      	cmp	r2, r3
 800630e:	d303      	bcc.n	8006318 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68d9      	ldr	r1, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	461a      	mov	r2, r3
 8006322:	6838      	ldr	r0, [r7, #0]
 8006324:	f002 f90c 	bl	8008540 <memcpy>
	}
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006338:	f001 fbd0 	bl	8007adc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006342:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006344:	e011      	b.n	800636a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d012      	beq.n	8006374 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3324      	adds	r3, #36	; 0x24
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fd1e 	bl	8006d94 <xTaskRemoveFromEventList>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800635e:	f000 fdf5 	bl	8006f4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	3b01      	subs	r3, #1
 8006366:	b2db      	uxtb	r3, r3
 8006368:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800636a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	dce9      	bgt.n	8006346 <prvUnlockQueue+0x16>
 8006372:	e000      	b.n	8006376 <prvUnlockQueue+0x46>
					break;
 8006374:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	22ff      	movs	r2, #255	; 0xff
 800637a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800637e:	f001 fbdd 	bl	8007b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006382:	f001 fbab 	bl	8007adc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800638c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800638e:	e011      	b.n	80063b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d012      	beq.n	80063be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3310      	adds	r3, #16
 800639c:	4618      	mov	r0, r3
 800639e:	f000 fcf9 	bl	8006d94 <xTaskRemoveFromEventList>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063a8:	f000 fdd0 	bl	8006f4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	dce9      	bgt.n	8006390 <prvUnlockQueue+0x60>
 80063bc:	e000      	b.n	80063c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	22ff      	movs	r2, #255	; 0xff
 80063c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80063c8:	f001 fbb8 	bl	8007b3c <vPortExitCritical>
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063dc:	f001 fb7e 	bl	8007adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063e8:	2301      	movs	r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	e001      	b.n	80063f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063f2:	f001 fba3 	bl	8007b3c <vPortExitCritical>

	return xReturn;
 80063f6:	68fb      	ldr	r3, [r7, #12]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006408:	f001 fb68 	bl	8007adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006414:	429a      	cmp	r2, r3
 8006416:	d102      	bne.n	800641e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006418:	2301      	movs	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	e001      	b.n	8006422 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006422:	f001 fb8b 	bl	8007b3c <vPortExitCritical>

	return xReturn;
 8006426:	68fb      	ldr	r3, [r7, #12]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	e014      	b.n	800646a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006440:	4a0e      	ldr	r2, [pc, #56]	; (800647c <vQueueAddToRegistry+0x4c>)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10b      	bne.n	8006464 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800644c:	490b      	ldr	r1, [pc, #44]	; (800647c <vQueueAddToRegistry+0x4c>)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006456:	4a09      	ldr	r2, [pc, #36]	; (800647c <vQueueAddToRegistry+0x4c>)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	4413      	add	r3, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006462:	e006      	b.n	8006472 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b07      	cmp	r3, #7
 800646e:	d9e7      	bls.n	8006440 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr
 800647c:	20002174 	.word	0x20002174

08006480 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006490:	f001 fb24 	bl	8007adc <vPortEnterCritical>
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800649a:	b25b      	sxtb	r3, r3
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d103      	bne.n	80064aa <vQueueWaitForMessageRestricted+0x2a>
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b0:	b25b      	sxtb	r3, r3
 80064b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b6:	d103      	bne.n	80064c0 <vQueueWaitForMessageRestricted+0x40>
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064c0:	f001 fb3c 	bl	8007b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d106      	bne.n	80064da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	3324      	adds	r3, #36	; 0x24
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fc31 	bl	8006d3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064da:	6978      	ldr	r0, [r7, #20]
 80064dc:	f7ff ff28 	bl	8006330 <prvUnlockQueue>
	}
 80064e0:	bf00      	nop
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08e      	sub	sp, #56	; 0x38
 80064ec:	af04      	add	r7, sp, #16
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <xTaskCreateStatic+0x2a>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	623b      	str	r3, [r7, #32]
}
 800650e:	bf00      	nop
 8006510:	e7fe      	b.n	8006510 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <xTaskCreateStatic+0x46>
	__asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	61fb      	str	r3, [r7, #28]
}
 800652a:	bf00      	nop
 800652c:	e7fe      	b.n	800652c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800652e:	235c      	movs	r3, #92	; 0x5c
 8006530:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b5c      	cmp	r3, #92	; 0x5c
 8006536:	d00a      	beq.n	800654e <xTaskCreateStatic+0x66>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	61bb      	str	r3, [r7, #24]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01e      	beq.n	8006592 <xTaskCreateStatic+0xaa>
 8006554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01b      	beq.n	8006592 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006562:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	2202      	movs	r2, #2
 8006568:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800656c:	2300      	movs	r3, #0
 800656e:	9303      	str	r3, [sp, #12]
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	9302      	str	r3, [sp, #8]
 8006574:	f107 0314 	add.w	r3, r7, #20
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f850 	bl	800662a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800658a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800658c:	f000 f8d4 	bl	8006738 <prvAddNewTaskToReadyList>
 8006590:	e001      	b.n	8006596 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006596:	697b      	ldr	r3, [r7, #20]
	}
 8006598:	4618      	mov	r0, r3
 800659a:	3728      	adds	r7, #40	; 0x28
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08c      	sub	sp, #48	; 0x30
 80065a4:	af04      	add	r7, sp, #16
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	4613      	mov	r3, r2
 80065ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b0:	88fb      	ldrh	r3, [r7, #6]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 fb91 	bl	8007cdc <pvPortMalloc>
 80065ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00e      	beq.n	80065e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80065c2:	205c      	movs	r0, #92	; 0x5c
 80065c4:	f001 fb8a 	bl	8007cdc <pvPortMalloc>
 80065c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
 80065d6:	e005      	b.n	80065e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065d8:	6978      	ldr	r0, [r7, #20]
 80065da:	f001 fc43 	bl	8007e64 <vPortFree>
 80065de:	e001      	b.n	80065e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d017      	beq.n	800661a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065f2:	88fa      	ldrh	r2, [r7, #6]
 80065f4:	2300      	movs	r3, #0
 80065f6:	9303      	str	r3, [sp, #12]
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	9302      	str	r3, [sp, #8]
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 f80e 	bl	800662a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800660e:	69f8      	ldr	r0, [r7, #28]
 8006610:	f000 f892 	bl	8006738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006614:	2301      	movs	r3, #1
 8006616:	61bb      	str	r3, [r7, #24]
 8006618:	e002      	b.n	8006620 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800661a:	f04f 33ff 	mov.w	r3, #4294967295
 800661e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006620:	69bb      	ldr	r3, [r7, #24]
	}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b088      	sub	sp, #32
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	461a      	mov	r2, r3
 8006642:	21a5      	movs	r1, #165	; 0xa5
 8006644:	f001 ff8a 	bl	800855c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006652:	3b01      	subs	r3, #1
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f023 0307 	bic.w	r3, r3, #7
 8006660:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <prvInitialiseNewTask+0x58>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	617b      	str	r3, [r7, #20]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006682:	2300      	movs	r3, #0
 8006684:	61fb      	str	r3, [r7, #28]
 8006686:	e012      	b.n	80066ae <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	7819      	ldrb	r1, [r3, #0]
 8006690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4413      	add	r3, r2
 8006696:	3334      	adds	r3, #52	; 0x34
 8006698:	460a      	mov	r2, r1
 800669a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d006      	beq.n	80066b6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	3301      	adds	r3, #1
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	2b0f      	cmp	r3, #15
 80066b2:	d9e9      	bls.n	8006688 <prvInitialiseNewTask+0x5e>
 80066b4:	e000      	b.n	80066b8 <prvInitialiseNewTask+0x8e>
		{
			break;
 80066b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	2b37      	cmp	r3, #55	; 0x37
 80066c4:	d901      	bls.n	80066ca <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066c6:	2337      	movs	r3, #55	; 0x37
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2200      	movs	r2, #0
 80066da:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	3304      	adds	r3, #4
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff f94e 	bl	8005982 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	3318      	adds	r3, #24
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff f949 	bl	8005982 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006704:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	2200      	movs	r2, #0
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	69b8      	ldr	r0, [r7, #24]
 800671a:	f001 f8ef 	bl	80078fc <pxPortInitialiseStack>
 800671e:	4602      	mov	r2, r0
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006730:	bf00      	nop
 8006732:	3720      	adds	r7, #32
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006740:	f001 f9cc 	bl	8007adc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006744:	4b2d      	ldr	r3, [pc, #180]	; (80067fc <prvAddNewTaskToReadyList+0xc4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	4a2c      	ldr	r2, [pc, #176]	; (80067fc <prvAddNewTaskToReadyList+0xc4>)
 800674c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800674e:	4b2c      	ldr	r3, [pc, #176]	; (8006800 <prvAddNewTaskToReadyList+0xc8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006756:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <prvAddNewTaskToReadyList+0xc8>)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800675c:	4b27      	ldr	r3, [pc, #156]	; (80067fc <prvAddNewTaskToReadyList+0xc4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d110      	bne.n	8006786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006764:	f000 fc16 	bl	8006f94 <prvInitialiseTaskLists>
 8006768:	e00d      	b.n	8006786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800676a:	4b26      	ldr	r3, [pc, #152]	; (8006804 <prvAddNewTaskToReadyList+0xcc>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006772:	4b23      	ldr	r3, [pc, #140]	; (8006800 <prvAddNewTaskToReadyList+0xc8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	429a      	cmp	r2, r3
 800677e:	d802      	bhi.n	8006786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006780:	4a1f      	ldr	r2, [pc, #124]	; (8006800 <prvAddNewTaskToReadyList+0xc8>)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006786:	4b20      	ldr	r3, [pc, #128]	; (8006808 <prvAddNewTaskToReadyList+0xd0>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3301      	adds	r3, #1
 800678c:	4a1e      	ldr	r2, [pc, #120]	; (8006808 <prvAddNewTaskToReadyList+0xd0>)
 800678e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006790:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <prvAddNewTaskToReadyList+0xd0>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679c:	4b1b      	ldr	r3, [pc, #108]	; (800680c <prvAddNewTaskToReadyList+0xd4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d903      	bls.n	80067ac <prvAddNewTaskToReadyList+0x74>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	4a18      	ldr	r2, [pc, #96]	; (800680c <prvAddNewTaskToReadyList+0xd4>)
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4a15      	ldr	r2, [pc, #84]	; (8006810 <prvAddNewTaskToReadyList+0xd8>)
 80067ba:	441a      	add	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3304      	adds	r3, #4
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f7ff f8e9 	bl	800599a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067c8:	f001 f9b8 	bl	8007b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067cc:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <prvAddNewTaskToReadyList+0xcc>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00e      	beq.n	80067f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067d4:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <prvAddNewTaskToReadyList+0xc8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	429a      	cmp	r2, r3
 80067e0:	d207      	bcs.n	80067f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <prvAddNewTaskToReadyList+0xdc>)
 80067e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000c58 	.word	0x20000c58
 8006800:	20000784 	.word	0x20000784
 8006804:	20000c64 	.word	0x20000c64
 8006808:	20000c74 	.word	0x20000c74
 800680c:	20000c60 	.word	0x20000c60
 8006810:	20000788 	.word	0x20000788
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d017      	beq.n	800685a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800682a:	4b13      	ldr	r3, [pc, #76]	; (8006878 <vTaskDelay+0x60>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <vTaskDelay+0x30>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60bb      	str	r3, [r7, #8]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006848:	f000 f880 	bl	800694c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800684c:	2100      	movs	r1, #0
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fcee 	bl	8007230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006854:	f000 f888 	bl	8006968 <xTaskResumeAll>
 8006858:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d107      	bne.n	8006870 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006860:	4b06      	ldr	r3, [pc, #24]	; (800687c <vTaskDelay+0x64>)
 8006862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	20000c80 	.word	0x20000c80
 800687c:	e000ed04 	.word	0xe000ed04

08006880 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006886:	2300      	movs	r3, #0
 8006888:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800688e:	463a      	mov	r2, r7
 8006890:	1d39      	adds	r1, r7, #4
 8006892:	f107 0308 	add.w	r3, r7, #8
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff f822 	bl	80058e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	9202      	str	r2, [sp, #8]
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	2300      	movs	r3, #0
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	2300      	movs	r3, #0
 80068ac:	460a      	mov	r2, r1
 80068ae:	4921      	ldr	r1, [pc, #132]	; (8006934 <vTaskStartScheduler+0xb4>)
 80068b0:	4821      	ldr	r0, [pc, #132]	; (8006938 <vTaskStartScheduler+0xb8>)
 80068b2:	f7ff fe19 	bl	80064e8 <xTaskCreateStatic>
 80068b6:	4603      	mov	r3, r0
 80068b8:	4a20      	ldr	r2, [pc, #128]	; (800693c <vTaskStartScheduler+0xbc>)
 80068ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068bc:	4b1f      	ldr	r3, [pc, #124]	; (800693c <vTaskStartScheduler+0xbc>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068c4:	2301      	movs	r3, #1
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e001      	b.n	80068ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d102      	bne.n	80068da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068d4:	f000 fd00 	bl	80072d8 <xTimerCreateTimerTask>
 80068d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d116      	bne.n	800690e <vTaskStartScheduler+0x8e>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	613b      	str	r3, [r7, #16]
}
 80068f2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068f4:	4b12      	ldr	r3, [pc, #72]	; (8006940 <vTaskStartScheduler+0xc0>)
 80068f6:	f04f 32ff 	mov.w	r2, #4294967295
 80068fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068fc:	4b11      	ldr	r3, [pc, #68]	; (8006944 <vTaskStartScheduler+0xc4>)
 80068fe:	2201      	movs	r2, #1
 8006900:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006902:	4b11      	ldr	r3, [pc, #68]	; (8006948 <vTaskStartScheduler+0xc8>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006908:	f001 f876 	bl	80079f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800690c:	e00e      	b.n	800692c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d10a      	bne.n	800692c <vTaskStartScheduler+0xac>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60fb      	str	r3, [r7, #12]
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <vTaskStartScheduler+0xaa>
}
 800692c:	bf00      	nop
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	08008e84 	.word	0x08008e84
 8006938:	08006f65 	.word	0x08006f65
 800693c:	20000c7c 	.word	0x20000c7c
 8006940:	20000c78 	.word	0x20000c78
 8006944:	20000c64 	.word	0x20000c64
 8006948:	20000c5c 	.word	0x20000c5c

0800694c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006950:	4b04      	ldr	r3, [pc, #16]	; (8006964 <vTaskSuspendAll+0x18>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a03      	ldr	r2, [pc, #12]	; (8006964 <vTaskSuspendAll+0x18>)
 8006958:	6013      	str	r3, [r2, #0]
}
 800695a:	bf00      	nop
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20000c80 	.word	0x20000c80

08006968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006972:	2300      	movs	r3, #0
 8006974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006976:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <xTaskResumeAll+0x118>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <xTaskResumeAll+0x2c>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	603b      	str	r3, [r7, #0]
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006994:	f001 f8a2 	bl	8007adc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006998:	4b39      	ldr	r3, [pc, #228]	; (8006a80 <xTaskResumeAll+0x118>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3b01      	subs	r3, #1
 800699e:	4a38      	ldr	r2, [pc, #224]	; (8006a80 <xTaskResumeAll+0x118>)
 80069a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a2:	4b37      	ldr	r3, [pc, #220]	; (8006a80 <xTaskResumeAll+0x118>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d162      	bne.n	8006a70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069aa:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <xTaskResumeAll+0x11c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d05e      	beq.n	8006a70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069b2:	e02f      	b.n	8006a14 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80069b4:	4b34      	ldr	r3, [pc, #208]	; (8006a88 <xTaskResumeAll+0x120>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3318      	adds	r3, #24
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7ff f845 	bl	8005a50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3304      	adds	r3, #4
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff f840 	bl	8005a50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d4:	4b2d      	ldr	r3, [pc, #180]	; (8006a8c <xTaskResumeAll+0x124>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d903      	bls.n	80069e4 <xTaskResumeAll+0x7c>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	4a2a      	ldr	r2, [pc, #168]	; (8006a8c <xTaskResumeAll+0x124>)
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e8:	4613      	mov	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4a27      	ldr	r2, [pc, #156]	; (8006a90 <xTaskResumeAll+0x128>)
 80069f2:	441a      	add	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4619      	mov	r1, r3
 80069fa:	4610      	mov	r0, r2
 80069fc:	f7fe ffcd 	bl	800599a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a04:	4b23      	ldr	r3, [pc, #140]	; (8006a94 <xTaskResumeAll+0x12c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d302      	bcc.n	8006a14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a0e:	4b22      	ldr	r3, [pc, #136]	; (8006a98 <xTaskResumeAll+0x130>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a14:	4b1c      	ldr	r3, [pc, #112]	; (8006a88 <xTaskResumeAll+0x120>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1cb      	bne.n	80069b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a22:	f000 fb55 	bl	80070d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a26:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <xTaskResumeAll+0x134>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d010      	beq.n	8006a54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a32:	f000 f845 	bl	8006ac0 <xTaskIncrementTick>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a3c:	4b16      	ldr	r3, [pc, #88]	; (8006a98 <xTaskResumeAll+0x130>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f1      	bne.n	8006a32 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <xTaskResumeAll+0x134>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a54:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <xTaskResumeAll+0x130>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a60:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <xTaskResumeAll+0x138>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a70:	f001 f864 	bl	8007b3c <vPortExitCritical>

	return xAlreadyYielded;
 8006a74:	68bb      	ldr	r3, [r7, #8]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000c80 	.word	0x20000c80
 8006a84:	20000c58 	.word	0x20000c58
 8006a88:	20000c18 	.word	0x20000c18
 8006a8c:	20000c60 	.word	0x20000c60
 8006a90:	20000788 	.word	0x20000788
 8006a94:	20000784 	.word	0x20000784
 8006a98:	20000c6c 	.word	0x20000c6c
 8006a9c:	20000c68 	.word	0x20000c68
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006aaa:	4b04      	ldr	r3, [pc, #16]	; (8006abc <xTaskGetTickCount+0x18>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ab0:	687b      	ldr	r3, [r7, #4]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bc80      	pop	{r7}
 8006aba:	4770      	bx	lr
 8006abc:	20000c5c 	.word	0x20000c5c

08006ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b51      	ldr	r3, [pc, #324]	; (8006c10 <xTaskIncrementTick+0x150>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 808e 	bne.w	8006bf0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ad4:	4b4f      	ldr	r3, [pc, #316]	; (8006c14 <xTaskIncrementTick+0x154>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006adc:	4a4d      	ldr	r2, [pc, #308]	; (8006c14 <xTaskIncrementTick+0x154>)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d120      	bne.n	8006b2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ae8:	4b4b      	ldr	r3, [pc, #300]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <xTaskIncrementTick+0x48>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	603b      	str	r3, [r7, #0]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <xTaskIncrementTick+0x46>
 8006b08:	4b43      	ldr	r3, [pc, #268]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	4b43      	ldr	r3, [pc, #268]	; (8006c1c <xTaskIncrementTick+0x15c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a41      	ldr	r2, [pc, #260]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	4a41      	ldr	r2, [pc, #260]	; (8006c1c <xTaskIncrementTick+0x15c>)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	4b40      	ldr	r3, [pc, #256]	; (8006c20 <xTaskIncrementTick+0x160>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	4a3f      	ldr	r2, [pc, #252]	; (8006c20 <xTaskIncrementTick+0x160>)
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	f000 fad3 	bl	80070d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b2a:	4b3e      	ldr	r3, [pc, #248]	; (8006c24 <xTaskIncrementTick+0x164>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d34e      	bcc.n	8006bd2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b34:	4b38      	ldr	r3, [pc, #224]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <xTaskIncrementTick+0x82>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <xTaskIncrementTick+0x84>
 8006b42:	2300      	movs	r3, #0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b48:	4b36      	ldr	r3, [pc, #216]	; (8006c24 <xTaskIncrementTick+0x164>)
 8006b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4e:	601a      	str	r2, [r3, #0]
					break;
 8006b50:	e03f      	b.n	8006bd2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b52:	4b31      	ldr	r3, [pc, #196]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d203      	bcs.n	8006b72 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b6a:	4a2e      	ldr	r2, [pc, #184]	; (8006c24 <xTaskIncrementTick+0x164>)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6013      	str	r3, [r2, #0]
						break;
 8006b70:	e02f      	b.n	8006bd2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	3304      	adds	r3, #4
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe ff6a 	bl	8005a50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	3318      	adds	r3, #24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe ff61 	bl	8005a50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b92:	4b25      	ldr	r3, [pc, #148]	; (8006c28 <xTaskIncrementTick+0x168>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d903      	bls.n	8006ba2 <xTaskIncrementTick+0xe2>
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	4a22      	ldr	r2, [pc, #136]	; (8006c28 <xTaskIncrementTick+0x168>)
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4a1f      	ldr	r2, [pc, #124]	; (8006c2c <xTaskIncrementTick+0x16c>)
 8006bb0:	441a      	add	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7fe feee 	bl	800599a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <xTaskIncrementTick+0x170>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d3b3      	bcc.n	8006b34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd0:	e7b0      	b.n	8006b34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bd2:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <xTaskIncrementTick+0x170>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd8:	4914      	ldr	r1, [pc, #80]	; (8006c2c <xTaskIncrementTick+0x16c>)
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d907      	bls.n	8006bfa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006bea:	2301      	movs	r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e004      	b.n	8006bfa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006bf0:	4b10      	ldr	r3, [pc, #64]	; (8006c34 <xTaskIncrementTick+0x174>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	4a0f      	ldr	r2, [pc, #60]	; (8006c34 <xTaskIncrementTick+0x174>)
 8006bf8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006bfa:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <xTaskIncrementTick+0x178>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006c02:	2301      	movs	r3, #1
 8006c04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000c80 	.word	0x20000c80
 8006c14:	20000c5c 	.word	0x20000c5c
 8006c18:	20000c10 	.word	0x20000c10
 8006c1c:	20000c14 	.word	0x20000c14
 8006c20:	20000c70 	.word	0x20000c70
 8006c24:	20000c78 	.word	0x20000c78
 8006c28:	20000c60 	.word	0x20000c60
 8006c2c:	20000788 	.word	0x20000788
 8006c30:	20000784 	.word	0x20000784
 8006c34:	20000c68 	.word	0x20000c68
 8006c38:	20000c6c 	.word	0x20000c6c

08006c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c42:	4b27      	ldr	r3, [pc, #156]	; (8006ce0 <vTaskSwitchContext+0xa4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c4a:	4b26      	ldr	r3, [pc, #152]	; (8006ce4 <vTaskSwitchContext+0xa8>)
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c50:	e041      	b.n	8006cd6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006c52:	4b24      	ldr	r3, [pc, #144]	; (8006ce4 <vTaskSwitchContext+0xa8>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c58:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <vTaskSwitchContext+0xac>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	e010      	b.n	8006c82 <vTaskSwitchContext+0x46>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <vTaskSwitchContext+0x40>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	607b      	str	r3, [r7, #4]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <vTaskSwitchContext+0x3e>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	491a      	ldr	r1, [pc, #104]	; (8006cec <vTaskSwitchContext+0xb0>)
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	440b      	add	r3, r1
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0e4      	beq.n	8006c60 <vTaskSwitchContext+0x24>
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4a12      	ldr	r2, [pc, #72]	; (8006cec <vTaskSwitchContext+0xb0>)
 8006ca2:	4413      	add	r3, r2
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	605a      	str	r2, [r3, #4]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d104      	bne.n	8006cc6 <vTaskSwitchContext+0x8a>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	605a      	str	r2, [r3, #4]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <vTaskSwitchContext+0xb4>)
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	4a05      	ldr	r2, [pc, #20]	; (8006ce8 <vTaskSwitchContext+0xac>)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6013      	str	r3, [r2, #0]
}
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr
 8006ce0:	20000c80 	.word	0x20000c80
 8006ce4:	20000c6c 	.word	0x20000c6c
 8006ce8:	20000c60 	.word	0x20000c60
 8006cec:	20000788 	.word	0x20000788
 8006cf0:	20000784 	.word	0x20000784

08006cf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	60fb      	str	r3, [r7, #12]
}
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d1a:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <vTaskPlaceOnEventList+0x44>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3318      	adds	r3, #24
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fe fe5c 	bl	80059e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d28:	2101      	movs	r1, #1
 8006d2a:	6838      	ldr	r0, [r7, #0]
 8006d2c:	f000 fa80 	bl	8007230 <prvAddCurrentTaskToDelayedList>
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20000784 	.word	0x20000784

08006d3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	617b      	str	r3, [r7, #20]
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d64:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3318      	adds	r3, #24
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7fe fe14 	bl	800599a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	68b8      	ldr	r0, [r7, #8]
 8006d82:	f000 fa55 	bl	8007230 <prvAddCurrentTaskToDelayedList>
	}
 8006d86:	bf00      	nop
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000784 	.word	0x20000784

08006d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	60fb      	str	r3, [r7, #12]
}
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	3318      	adds	r3, #24
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe fe43 	bl	8005a50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dca:	4b1e      	ldr	r3, [pc, #120]	; (8006e44 <xTaskRemoveFromEventList+0xb0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11d      	bne.n	8006e0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fe3a 	bl	8005a50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	4b19      	ldr	r3, [pc, #100]	; (8006e48 <xTaskRemoveFromEventList+0xb4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d903      	bls.n	8006df0 <xTaskRemoveFromEventList+0x5c>
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <xTaskRemoveFromEventList+0xb4>)
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4a13      	ldr	r2, [pc, #76]	; (8006e4c <xTaskRemoveFromEventList+0xb8>)
 8006dfe:	441a      	add	r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f7fe fdc7 	bl	800599a <vListInsertEnd>
 8006e0c:	e005      	b.n	8006e1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3318      	adds	r3, #24
 8006e12:	4619      	mov	r1, r3
 8006e14:	480e      	ldr	r0, [pc, #56]	; (8006e50 <xTaskRemoveFromEventList+0xbc>)
 8006e16:	f7fe fdc0 	bl	800599a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <xTaskRemoveFromEventList+0xc0>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d905      	bls.n	8006e34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <xTaskRemoveFromEventList+0xc4>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	e001      	b.n	8006e38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e34:	2300      	movs	r3, #0
 8006e36:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006e38:	697b      	ldr	r3, [r7, #20]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20000c80 	.word	0x20000c80
 8006e48:	20000c60 	.word	0x20000c60
 8006e4c:	20000788 	.word	0x20000788
 8006e50:	20000c18 	.word	0x20000c18
 8006e54:	20000784 	.word	0x20000784
 8006e58:	20000c6c 	.word	0x20000c6c

08006e5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <vTaskInternalSetTimeOutState+0x24>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e6c:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <vTaskInternalSetTimeOutState+0x28>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	605a      	str	r2, [r3, #4]
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	20000c70 	.word	0x20000c70
 8006e84:	20000c5c 	.word	0x20000c5c

08006e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	613b      	str	r3, [r7, #16]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	60fb      	str	r3, [r7, #12]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006eca:	f000 fe07 	bl	8007adc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ece:	4b1d      	ldr	r3, [pc, #116]	; (8006f44 <xTaskCheckForTimeOut+0xbc>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d102      	bne.n	8006eee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	e023      	b.n	8006f36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <xTaskCheckForTimeOut+0xc0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d007      	beq.n	8006f0a <xTaskCheckForTimeOut+0x82>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d302      	bcc.n	8006f0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f04:	2301      	movs	r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	e015      	b.n	8006f36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d20b      	bcs.n	8006f2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	1ad2      	subs	r2, r2, r3
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff ff9b 	bl	8006e5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	e004      	b.n	8006f36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f32:	2301      	movs	r3, #1
 8006f34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f36:	f000 fe01 	bl	8007b3c <vPortExitCritical>

	return xReturn;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3720      	adds	r7, #32
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20000c5c 	.word	0x20000c5c
 8006f48:	20000c70 	.word	0x20000c70

08006f4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f50:	4b03      	ldr	r3, [pc, #12]	; (8006f60 <vTaskMissedYield+0x14>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
}
 8006f56:	bf00      	nop
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20000c6c 	.word	0x20000c6c

08006f64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f6c:	f000 f852 	bl	8007014 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <prvIdleTask+0x28>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d9f9      	bls.n	8006f6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f78:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <prvIdleTask+0x2c>)
 8006f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f88:	e7f0      	b.n	8006f6c <prvIdleTask+0x8>
 8006f8a:	bf00      	nop
 8006f8c:	20000788 	.word	0x20000788
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	607b      	str	r3, [r7, #4]
 8006f9e:	e00c      	b.n	8006fba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4a12      	ldr	r2, [pc, #72]	; (8006ff4 <prvInitialiseTaskLists+0x60>)
 8006fac:	4413      	add	r3, r2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe fcc8 	bl	8005944 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	607b      	str	r3, [r7, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b37      	cmp	r3, #55	; 0x37
 8006fbe:	d9ef      	bls.n	8006fa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fc0:	480d      	ldr	r0, [pc, #52]	; (8006ff8 <prvInitialiseTaskLists+0x64>)
 8006fc2:	f7fe fcbf 	bl	8005944 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fc6:	480d      	ldr	r0, [pc, #52]	; (8006ffc <prvInitialiseTaskLists+0x68>)
 8006fc8:	f7fe fcbc 	bl	8005944 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fcc:	480c      	ldr	r0, [pc, #48]	; (8007000 <prvInitialiseTaskLists+0x6c>)
 8006fce:	f7fe fcb9 	bl	8005944 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fd2:	480c      	ldr	r0, [pc, #48]	; (8007004 <prvInitialiseTaskLists+0x70>)
 8006fd4:	f7fe fcb6 	bl	8005944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fd8:	480b      	ldr	r0, [pc, #44]	; (8007008 <prvInitialiseTaskLists+0x74>)
 8006fda:	f7fe fcb3 	bl	8005944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fde:	4b0b      	ldr	r3, [pc, #44]	; (800700c <prvInitialiseTaskLists+0x78>)
 8006fe0:	4a05      	ldr	r2, [pc, #20]	; (8006ff8 <prvInitialiseTaskLists+0x64>)
 8006fe2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <prvInitialiseTaskLists+0x7c>)
 8006fe6:	4a05      	ldr	r2, [pc, #20]	; (8006ffc <prvInitialiseTaskLists+0x68>)
 8006fe8:	601a      	str	r2, [r3, #0]
}
 8006fea:	bf00      	nop
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000788 	.word	0x20000788
 8006ff8:	20000be8 	.word	0x20000be8
 8006ffc:	20000bfc 	.word	0x20000bfc
 8007000:	20000c18 	.word	0x20000c18
 8007004:	20000c2c 	.word	0x20000c2c
 8007008:	20000c44 	.word	0x20000c44
 800700c:	20000c10 	.word	0x20000c10
 8007010:	20000c14 	.word	0x20000c14

08007014 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800701a:	e019      	b.n	8007050 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800701c:	f000 fd5e 	bl	8007adc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007020:	4b10      	ldr	r3, [pc, #64]	; (8007064 <prvCheckTasksWaitingTermination+0x50>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3304      	adds	r3, #4
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fd0f 	bl	8005a50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007032:	4b0d      	ldr	r3, [pc, #52]	; (8007068 <prvCheckTasksWaitingTermination+0x54>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3b01      	subs	r3, #1
 8007038:	4a0b      	ldr	r2, [pc, #44]	; (8007068 <prvCheckTasksWaitingTermination+0x54>)
 800703a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800703c:	4b0b      	ldr	r3, [pc, #44]	; (800706c <prvCheckTasksWaitingTermination+0x58>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3b01      	subs	r3, #1
 8007042:	4a0a      	ldr	r2, [pc, #40]	; (800706c <prvCheckTasksWaitingTermination+0x58>)
 8007044:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007046:	f000 fd79 	bl	8007b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f810 	bl	8007070 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <prvCheckTasksWaitingTermination+0x58>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e1      	bne.n	800701c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000c2c 	.word	0x20000c2c
 8007068:	20000c58 	.word	0x20000c58
 800706c:	20000c40 	.word	0x20000c40

08007070 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800707e:	2b00      	cmp	r3, #0
 8007080:	d108      	bne.n	8007094 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	4618      	mov	r0, r3
 8007088:	f000 feec 	bl	8007e64 <vPortFree>
				vPortFree( pxTCB );
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fee9 	bl	8007e64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007092:	e018      	b.n	80070c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800709a:	2b01      	cmp	r3, #1
 800709c:	d103      	bne.n	80070a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fee0 	bl	8007e64 <vPortFree>
	}
 80070a4:	e00f      	b.n	80070c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d00a      	beq.n	80070c6 <prvDeleteTCB+0x56>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	60fb      	str	r3, [r7, #12]
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <prvDeleteTCB+0x54>
	}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070d6:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <prvResetNextTaskUnblockTime+0x40>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <prvResetNextTaskUnblockTime+0x14>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e000      	b.n	80070e6 <prvResetNextTaskUnblockTime+0x16>
 80070e4:	2300      	movs	r3, #0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <prvResetNextTaskUnblockTime+0x44>)
 80070ec:	f04f 32ff 	mov.w	r2, #4294967295
 80070f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070f2:	e008      	b.n	8007106 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80070f4:	4b06      	ldr	r3, [pc, #24]	; (8007110 <prvResetNextTaskUnblockTime+0x40>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	4a04      	ldr	r2, [pc, #16]	; (8007114 <prvResetNextTaskUnblockTime+0x44>)
 8007104:	6013      	str	r3, [r2, #0]
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr
 8007110:	20000c10 	.word	0x20000c10
 8007114:	20000c78 	.word	0x20000c78

08007118 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800711e:	4b0b      	ldr	r3, [pc, #44]	; (800714c <xTaskGetSchedulerState+0x34>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007126:	2301      	movs	r3, #1
 8007128:	607b      	str	r3, [r7, #4]
 800712a:	e008      	b.n	800713e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800712c:	4b08      	ldr	r3, [pc, #32]	; (8007150 <xTaskGetSchedulerState+0x38>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007134:	2302      	movs	r3, #2
 8007136:	607b      	str	r3, [r7, #4]
 8007138:	e001      	b.n	800713e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800713a:	2300      	movs	r3, #0
 800713c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800713e:	687b      	ldr	r3, [r7, #4]
	}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	20000c64 	.word	0x20000c64
 8007150:	20000c80 	.word	0x20000c80

08007154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d056      	beq.n	8007218 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800716a:	4b2e      	ldr	r3, [pc, #184]	; (8007224 <xTaskPriorityDisinherit+0xd0>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	429a      	cmp	r2, r3
 8007172:	d00a      	beq.n	800718a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	60fb      	str	r3, [r7, #12]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	60bb      	str	r3, [r7, #8]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ac:	1e5a      	subs	r2, r3, #1
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d02c      	beq.n	8007218 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d128      	bne.n	8007218 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	3304      	adds	r3, #4
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe fc40 	bl	8005a50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e8:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <xTaskPriorityDisinherit+0xd4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d903      	bls.n	80071f8 <xTaskPriorityDisinherit+0xa4>
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	4a0c      	ldr	r2, [pc, #48]	; (8007228 <xTaskPriorityDisinherit+0xd4>)
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4a09      	ldr	r2, [pc, #36]	; (800722c <xTaskPriorityDisinherit+0xd8>)
 8007206:	441a      	add	r2, r3
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	3304      	adds	r3, #4
 800720c:	4619      	mov	r1, r3
 800720e:	4610      	mov	r0, r2
 8007210:	f7fe fbc3 	bl	800599a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007214:	2301      	movs	r3, #1
 8007216:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007218:	697b      	ldr	r3, [r7, #20]
	}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000784 	.word	0x20000784
 8007228:	20000c60 	.word	0x20000c60
 800722c:	20000788 	.word	0x20000788

08007230 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800723a:	4b21      	ldr	r3, [pc, #132]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007240:	4b20      	ldr	r3, [pc, #128]	; (80072c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3304      	adds	r3, #4
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fc02 	bl	8005a50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007252:	d10a      	bne.n	800726a <prvAddCurrentTaskToDelayedList+0x3a>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800725a:	4b1a      	ldr	r3, [pc, #104]	; (80072c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3304      	adds	r3, #4
 8007260:	4619      	mov	r1, r3
 8007262:	4819      	ldr	r0, [pc, #100]	; (80072c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007264:	f7fe fb99 	bl	800599a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007268:	e026      	b.n	80072b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4413      	add	r3, r2
 8007270:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007272:	4b14      	ldr	r3, [pc, #80]	; (80072c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	429a      	cmp	r2, r3
 8007280:	d209      	bcs.n	8007296 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007282:	4b12      	ldr	r3, [pc, #72]	; (80072cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3304      	adds	r3, #4
 800728c:	4619      	mov	r1, r3
 800728e:	4610      	mov	r0, r2
 8007290:	f7fe fba6 	bl	80059e0 <vListInsert>
}
 8007294:	e010      	b.n	80072b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007296:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3304      	adds	r3, #4
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f7fe fb9c 	bl	80059e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d202      	bcs.n	80072b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072b2:	4a08      	ldr	r2, [pc, #32]	; (80072d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	6013      	str	r3, [r2, #0]
}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000c5c 	.word	0x20000c5c
 80072c4:	20000784 	.word	0x20000784
 80072c8:	20000c44 	.word	0x20000c44
 80072cc:	20000c14 	.word	0x20000c14
 80072d0:	20000c10 	.word	0x20000c10
 80072d4:	20000c78 	.word	0x20000c78

080072d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08a      	sub	sp, #40	; 0x28
 80072dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072e2:	f000 facb 	bl	800787c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072e6:	4b1c      	ldr	r3, [pc, #112]	; (8007358 <xTimerCreateTimerTask+0x80>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d021      	beq.n	8007332 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072f6:	1d3a      	adds	r2, r7, #4
 80072f8:	f107 0108 	add.w	r1, r7, #8
 80072fc:	f107 030c 	add.w	r3, r7, #12
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe fb05 	bl	8005910 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	9202      	str	r2, [sp, #8]
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	2302      	movs	r3, #2
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	2300      	movs	r3, #0
 8007316:	460a      	mov	r2, r1
 8007318:	4910      	ldr	r1, [pc, #64]	; (800735c <xTimerCreateTimerTask+0x84>)
 800731a:	4811      	ldr	r0, [pc, #68]	; (8007360 <xTimerCreateTimerTask+0x88>)
 800731c:	f7ff f8e4 	bl	80064e8 <xTaskCreateStatic>
 8007320:	4603      	mov	r3, r0
 8007322:	4a10      	ldr	r2, [pc, #64]	; (8007364 <xTimerCreateTimerTask+0x8c>)
 8007324:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007326:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <xTimerCreateTimerTask+0x8c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800732e:	2301      	movs	r3, #1
 8007330:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	613b      	str	r3, [r7, #16]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800734e:	697b      	ldr	r3, [r7, #20]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	20000cb4 	.word	0x20000cb4
 800735c:	08008e8c 	.word	0x08008e8c
 8007360:	08007485 	.word	0x08007485
 8007364:	20000cb8 	.word	0x20000cb8

08007368 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007376:	2300      	movs	r3, #0
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10a      	bne.n	8007396 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	623b      	str	r3, [r7, #32]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007396:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <xTimerGenericCommand+0x98>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d02a      	beq.n	80073f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b05      	cmp	r3, #5
 80073ae:	dc18      	bgt.n	80073e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073b0:	f7ff feb2 	bl	8007118 <xTaskGetSchedulerState>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d109      	bne.n	80073ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073ba:	4b11      	ldr	r3, [pc, #68]	; (8007400 <xTimerGenericCommand+0x98>)
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	f107 0110 	add.w	r1, r7, #16
 80073c2:	2300      	movs	r3, #0
 80073c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c6:	f7fe fcad 	bl	8005d24 <xQueueGenericSend>
 80073ca:	6278      	str	r0, [r7, #36]	; 0x24
 80073cc:	e012      	b.n	80073f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <xTimerGenericCommand+0x98>)
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	f107 0110 	add.w	r1, r7, #16
 80073d6:	2300      	movs	r3, #0
 80073d8:	2200      	movs	r2, #0
 80073da:	f7fe fca3 	bl	8005d24 <xQueueGenericSend>
 80073de:	6278      	str	r0, [r7, #36]	; 0x24
 80073e0:	e008      	b.n	80073f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073e2:	4b07      	ldr	r3, [pc, #28]	; (8007400 <xTimerGenericCommand+0x98>)
 80073e4:	6818      	ldr	r0, [r3, #0]
 80073e6:	f107 0110 	add.w	r1, r7, #16
 80073ea:	2300      	movs	r3, #0
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	f7fe fd97 	bl	8005f20 <xQueueGenericSendFromISR>
 80073f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3728      	adds	r7, #40	; 0x28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000cb4 	.word	0x20000cb4

08007404 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af02      	add	r7, sp, #8
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800740e:	4b1c      	ldr	r3, [pc, #112]	; (8007480 <prvProcessExpiredTimer+0x7c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	3304      	adds	r3, #4
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe fb17 	bl	8005a50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d122      	bne.n	8007470 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	18d1      	adds	r1, r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	6978      	ldr	r0, [r7, #20]
 8007438:	f000 f8c8 	bl	80075cc <prvInsertTimerInActiveList>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d016      	beq.n	8007470 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007442:	2300      	movs	r3, #0
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	2300      	movs	r3, #0
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	2100      	movs	r1, #0
 800744c:	6978      	ldr	r0, [r7, #20]
 800744e:	f7ff ff8b 	bl	8007368 <xTimerGenericCommand>
 8007452:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	60fb      	str	r3, [r7, #12]
}
 800746c:	bf00      	nop
 800746e:	e7fe      	b.n	800746e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	6978      	ldr	r0, [r7, #20]
 8007476:	4798      	blx	r3
}
 8007478:	bf00      	nop
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000cac 	.word	0x20000cac

08007484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800748c:	f107 0308 	add.w	r3, r7, #8
 8007490:	4618      	mov	r0, r3
 8007492:	f000 f857 	bl	8007544 <prvGetNextExpireTime>
 8007496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4619      	mov	r1, r3
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 f803 	bl	80074a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074a2:	f000 f8d5 	bl	8007650 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074a6:	e7f1      	b.n	800748c <prvTimerTask+0x8>

080074a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074b2:	f7ff fa4b 	bl	800694c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074b6:	f107 0308 	add.w	r3, r7, #8
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f866 	bl	800758c <prvSampleTimeNow>
 80074c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d130      	bne.n	800752a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <prvProcessTimerOrBlockTask+0x3c>
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d806      	bhi.n	80074e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074d6:	f7ff fa47 	bl	8006968 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074da:	68f9      	ldr	r1, [r7, #12]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff ff91 	bl	8007404 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074e2:	e024      	b.n	800752e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d008      	beq.n	80074fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074ea:	4b13      	ldr	r3, [pc, #76]	; (8007538 <prvProcessTimerOrBlockTask+0x90>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bf0c      	ite	eq
 80074f4:	2301      	moveq	r3, #1
 80074f6:	2300      	movne	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074fc:	4b0f      	ldr	r3, [pc, #60]	; (800753c <prvProcessTimerOrBlockTask+0x94>)
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	4619      	mov	r1, r3
 800750a:	f7fe ffb9 	bl	8006480 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800750e:	f7ff fa2b 	bl	8006968 <xTaskResumeAll>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007518:	4b09      	ldr	r3, [pc, #36]	; (8007540 <prvProcessTimerOrBlockTask+0x98>)
 800751a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	f3bf 8f6f 	isb	sy
}
 8007528:	e001      	b.n	800752e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800752a:	f7ff fa1d 	bl	8006968 <xTaskResumeAll>
}
 800752e:	bf00      	nop
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20000cb0 	.word	0x20000cb0
 800753c:	20000cb4 	.word	0x20000cb4
 8007540:	e000ed04 	.word	0xe000ed04

08007544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800754c:	4b0e      	ldr	r3, [pc, #56]	; (8007588 <prvGetNextExpireTime+0x44>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	bf0c      	ite	eq
 8007556:	2301      	moveq	r3, #1
 8007558:	2300      	movne	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d105      	bne.n	8007576 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800756a:	4b07      	ldr	r3, [pc, #28]	; (8007588 <prvGetNextExpireTime+0x44>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	e001      	b.n	800757a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800757a:	68fb      	ldr	r3, [r7, #12]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	bc80      	pop	{r7}
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	20000cac 	.word	0x20000cac

0800758c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007594:	f7ff fa86 	bl	8006aa4 <xTaskGetTickCount>
 8007598:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800759a:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <prvSampleTimeNow+0x3c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d205      	bcs.n	80075b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075a4:	f000 f908 	bl	80077b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075b6:	4a04      	ldr	r2, [pc, #16]	; (80075c8 <prvSampleTimeNow+0x3c>)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075bc:	68fb      	ldr	r3, [r7, #12]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000cbc 	.word	0x20000cbc

080075cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d812      	bhi.n	8007618 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d302      	bcc.n	8007606 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007600:	2301      	movs	r3, #1
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e01b      	b.n	800763e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007606:	4b10      	ldr	r3, [pc, #64]	; (8007648 <prvInsertTimerInActiveList+0x7c>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3304      	adds	r3, #4
 800760e:	4619      	mov	r1, r3
 8007610:	4610      	mov	r0, r2
 8007612:	f7fe f9e5 	bl	80059e0 <vListInsert>
 8007616:	e012      	b.n	800763e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d206      	bcs.n	800762e <prvInsertTimerInActiveList+0x62>
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	429a      	cmp	r2, r3
 8007626:	d302      	bcc.n	800762e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007628:	2301      	movs	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	e007      	b.n	800763e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <prvInsertTimerInActiveList+0x80>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f7fe f9d1 	bl	80059e0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800763e:	697b      	ldr	r3, [r7, #20]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20000cb0 	.word	0x20000cb0
 800764c:	20000cac 	.word	0x20000cac

08007650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08e      	sub	sp, #56	; 0x38
 8007654:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007656:	e09d      	b.n	8007794 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	da18      	bge.n	8007690 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800765e:	1d3b      	adds	r3, r7, #4
 8007660:	3304      	adds	r3, #4
 8007662:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	61fb      	str	r3, [r7, #28]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007686:	6850      	ldr	r0, [r2, #4]
 8007688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800768a:	6892      	ldr	r2, [r2, #8]
 800768c:	4611      	mov	r1, r2
 800768e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	db7d      	blt.n	8007792 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d004      	beq.n	80076ac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	3304      	adds	r3, #4
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe f9d2 	bl	8005a50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076ac:	463b      	mov	r3, r7
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7ff ff6c 	bl	800758c <prvSampleTimeNow>
 80076b4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b09      	cmp	r3, #9
 80076ba:	d86b      	bhi.n	8007794 <prvProcessReceivedCommands+0x144>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <prvProcessReceivedCommands+0x74>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076ed 	.word	0x080076ed
 80076c8:	080076ed 	.word	0x080076ed
 80076cc:	080076ed 	.word	0x080076ed
 80076d0:	08007795 	.word	0x08007795
 80076d4:	08007749 	.word	0x08007749
 80076d8:	08007781 	.word	0x08007781
 80076dc:	080076ed 	.word	0x080076ed
 80076e0:	080076ed 	.word	0x080076ed
 80076e4:	08007795 	.word	0x08007795
 80076e8:	08007749 	.word	0x08007749
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	18d1      	adds	r1, r2, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076fa:	f7ff ff67 	bl	80075cc <prvInsertTimerInActiveList>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d047      	beq.n	8007794 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800770a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d13f      	bne.n	8007794 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	441a      	add	r2, r3
 800771c:	2300      	movs	r3, #0
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2300      	movs	r3, #0
 8007722:	2100      	movs	r1, #0
 8007724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007726:	f7ff fe1f 	bl	8007368 <xTimerGenericCommand>
 800772a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d130      	bne.n	8007794 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	61bb      	str	r3, [r7, #24]
}
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10a      	bne.n	800776c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	617b      	str	r3, [r7, #20]
}
 8007768:	bf00      	nop
 800776a:	e7fe      	b.n	800776a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	699a      	ldr	r2, [r3, #24]
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	18d1      	adds	r1, r2, r3
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800777a:	f7ff ff27 	bl	80075cc <prvInsertTimerInActiveList>
					break;
 800777e:	e009      	b.n	8007794 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d104      	bne.n	8007794 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800778a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800778c:	f000 fb6a 	bl	8007e64 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007790:	e000      	b.n	8007794 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007792:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007794:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <prvProcessReceivedCommands+0x164>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	1d39      	adds	r1, r7, #4
 800779a:	2200      	movs	r2, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe fc57 	bl	8006050 <xQueueReceive>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f47f af57 	bne.w	8007658 <prvProcessReceivedCommands+0x8>
	}
}
 80077aa:	bf00      	nop
 80077ac:	bf00      	nop
 80077ae:	3730      	adds	r7, #48	; 0x30
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	20000cb4 	.word	0x20000cb4

080077b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b088      	sub	sp, #32
 80077bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077be:	e045      	b.n	800784c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077c0:	4b2c      	ldr	r3, [pc, #176]	; (8007874 <prvSwitchTimerLists+0xbc>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077ca:	4b2a      	ldr	r3, [pc, #168]	; (8007874 <prvSwitchTimerLists+0xbc>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fe f939 	bl	8005a50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d12e      	bne.n	800784c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4413      	add	r3, r2
 80077f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d90e      	bls.n	800781e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800780c:	4b19      	ldr	r3, [pc, #100]	; (8007874 <prvSwitchTimerLists+0xbc>)
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3304      	adds	r3, #4
 8007814:	4619      	mov	r1, r3
 8007816:	4610      	mov	r0, r2
 8007818:	f7fe f8e2 	bl	80059e0 <vListInsert>
 800781c:	e016      	b.n	800784c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800781e:	2300      	movs	r3, #0
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	2300      	movs	r3, #0
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	2100      	movs	r1, #0
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff fd9d 	bl	8007368 <xTimerGenericCommand>
 800782e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <prvSwitchTimerLists+0x94>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	603b      	str	r3, [r7, #0]
}
 8007848:	bf00      	nop
 800784a:	e7fe      	b.n	800784a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800784c:	4b09      	ldr	r3, [pc, #36]	; (8007874 <prvSwitchTimerLists+0xbc>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1b4      	bne.n	80077c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007856:	4b07      	ldr	r3, [pc, #28]	; (8007874 <prvSwitchTimerLists+0xbc>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800785c:	4b06      	ldr	r3, [pc, #24]	; (8007878 <prvSwitchTimerLists+0xc0>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a04      	ldr	r2, [pc, #16]	; (8007874 <prvSwitchTimerLists+0xbc>)
 8007862:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007864:	4a04      	ldr	r2, [pc, #16]	; (8007878 <prvSwitchTimerLists+0xc0>)
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	6013      	str	r3, [r2, #0]
}
 800786a:	bf00      	nop
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20000cac 	.word	0x20000cac
 8007878:	20000cb0 	.word	0x20000cb0

0800787c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007882:	f000 f92b 	bl	8007adc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007886:	4b15      	ldr	r3, [pc, #84]	; (80078dc <prvCheckForValidListAndQueue+0x60>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d120      	bne.n	80078d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800788e:	4814      	ldr	r0, [pc, #80]	; (80078e0 <prvCheckForValidListAndQueue+0x64>)
 8007890:	f7fe f858 	bl	8005944 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007894:	4813      	ldr	r0, [pc, #76]	; (80078e4 <prvCheckForValidListAndQueue+0x68>)
 8007896:	f7fe f855 	bl	8005944 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800789a:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <prvCheckForValidListAndQueue+0x6c>)
 800789c:	4a10      	ldr	r2, [pc, #64]	; (80078e0 <prvCheckForValidListAndQueue+0x64>)
 800789e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078a0:	4b12      	ldr	r3, [pc, #72]	; (80078ec <prvCheckForValidListAndQueue+0x70>)
 80078a2:	4a10      	ldr	r2, [pc, #64]	; (80078e4 <prvCheckForValidListAndQueue+0x68>)
 80078a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078a6:	2300      	movs	r3, #0
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <prvCheckForValidListAndQueue+0x74>)
 80078ac:	4a11      	ldr	r2, [pc, #68]	; (80078f4 <prvCheckForValidListAndQueue+0x78>)
 80078ae:	2110      	movs	r1, #16
 80078b0:	200a      	movs	r0, #10
 80078b2:	f7fe f95f 	bl	8005b74 <xQueueGenericCreateStatic>
 80078b6:	4603      	mov	r3, r0
 80078b8:	4a08      	ldr	r2, [pc, #32]	; (80078dc <prvCheckForValidListAndQueue+0x60>)
 80078ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80078bc:	4b07      	ldr	r3, [pc, #28]	; (80078dc <prvCheckForValidListAndQueue+0x60>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80078c4:	4b05      	ldr	r3, [pc, #20]	; (80078dc <prvCheckForValidListAndQueue+0x60>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	490b      	ldr	r1, [pc, #44]	; (80078f8 <prvCheckForValidListAndQueue+0x7c>)
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fdb0 	bl	8006430 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078d0:	f000 f934 	bl	8007b3c <vPortExitCritical>
}
 80078d4:	bf00      	nop
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000cb4 	.word	0x20000cb4
 80078e0:	20000c84 	.word	0x20000c84
 80078e4:	20000c98 	.word	0x20000c98
 80078e8:	20000cac 	.word	0x20000cac
 80078ec:	20000cb0 	.word	0x20000cb0
 80078f0:	20000d60 	.word	0x20000d60
 80078f4:	20000cc0 	.word	0x20000cc0
 80078f8:	08008e94 	.word	0x08008e94

080078fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3b04      	subs	r3, #4
 800790c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3b04      	subs	r3, #4
 800791a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f023 0201 	bic.w	r2, r3, #1
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3b04      	subs	r3, #4
 800792a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800792c:	4a08      	ldr	r2, [pc, #32]	; (8007950 <pxPortInitialiseStack+0x54>)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3b14      	subs	r3, #20
 8007936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3b20      	subs	r3, #32
 8007942:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007944:	68fb      	ldr	r3, [r7, #12]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr
 8007950:	08007955 	.word	0x08007955

08007954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800795a:	2300      	movs	r3, #0
 800795c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800795e:	4b12      	ldr	r3, [pc, #72]	; (80079a8 <prvTaskExitError+0x54>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007966:	d00a      	beq.n	800797e <prvTaskExitError+0x2a>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	60fb      	str	r3, [r7, #12]
}
 800797a:	bf00      	nop
 800797c:	e7fe      	b.n	800797c <prvTaskExitError+0x28>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	60bb      	str	r3, [r7, #8]
}
 8007990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007992:	bf00      	nop
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0fc      	beq.n	8007994 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20000014 	.word	0x20000014
 80079ac:	00000000 	.word	0x00000000

080079b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079b0:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <pxCurrentTCBConst2>)
 80079b2:	6819      	ldr	r1, [r3, #0]
 80079b4:	6808      	ldr	r0, [r1, #0]
 80079b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079ba:	f380 8809 	msr	PSP, r0
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f380 8811 	msr	BASEPRI, r0
 80079ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80079ce:	4770      	bx	lr

080079d0 <pxCurrentTCBConst2>:
 80079d0:	20000784 	.word	0x20000784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop

080079d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80079d8:	4806      	ldr	r0, [pc, #24]	; (80079f4 <prvPortStartFirstTask+0x1c>)
 80079da:	6800      	ldr	r0, [r0, #0]
 80079dc:	6800      	ldr	r0, [r0, #0]
 80079de:	f380 8808 	msr	MSP, r0
 80079e2:	b662      	cpsie	i
 80079e4:	b661      	cpsie	f
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	df00      	svc	0
 80079f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079f2:	bf00      	nop
 80079f4:	e000ed08 	.word	0xe000ed08

080079f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079fe:	4b32      	ldr	r3, [pc, #200]	; (8007ac8 <xPortStartScheduler+0xd0>)
 8007a00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	22ff      	movs	r2, #255	; 0xff
 8007a0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	4b2a      	ldr	r3, [pc, #168]	; (8007acc <xPortStartScheduler+0xd4>)
 8007a24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a26:	4b2a      	ldr	r3, [pc, #168]	; (8007ad0 <xPortStartScheduler+0xd8>)
 8007a28:	2207      	movs	r2, #7
 8007a2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a2c:	e009      	b.n	8007a42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007a2e:	4b28      	ldr	r3, [pc, #160]	; (8007ad0 <xPortStartScheduler+0xd8>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	4a26      	ldr	r2, [pc, #152]	; (8007ad0 <xPortStartScheduler+0xd8>)
 8007a36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4a:	2b80      	cmp	r3, #128	; 0x80
 8007a4c:	d0ef      	beq.n	8007a2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a4e:	4b20      	ldr	r3, [pc, #128]	; (8007ad0 <xPortStartScheduler+0xd8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f1c3 0307 	rsb	r3, r3, #7
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d00a      	beq.n	8007a70 <xPortStartScheduler+0x78>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	60bb      	str	r3, [r7, #8]
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a70:	4b17      	ldr	r3, [pc, #92]	; (8007ad0 <xPortStartScheduler+0xd8>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	021b      	lsls	r3, r3, #8
 8007a76:	4a16      	ldr	r2, [pc, #88]	; (8007ad0 <xPortStartScheduler+0xd8>)
 8007a78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a7a:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <xPortStartScheduler+0xd8>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a82:	4a13      	ldr	r2, [pc, #76]	; (8007ad0 <xPortStartScheduler+0xd8>)
 8007a84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a8e:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <xPortStartScheduler+0xdc>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a10      	ldr	r2, [pc, #64]	; (8007ad4 <xPortStartScheduler+0xdc>)
 8007a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a9a:	4b0e      	ldr	r3, [pc, #56]	; (8007ad4 <xPortStartScheduler+0xdc>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a0d      	ldr	r2, [pc, #52]	; (8007ad4 <xPortStartScheduler+0xdc>)
 8007aa0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007aa4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007aa6:	f000 f8b9 	bl	8007c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007aaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <xPortStartScheduler+0xe0>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ab0:	f7ff ff92 	bl	80079d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ab4:	f7ff f8c2 	bl	8006c3c <vTaskSwitchContext>
	prvTaskExitError();
 8007ab8:	f7ff ff4c 	bl	8007954 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	e000e400 	.word	0xe000e400
 8007acc:	20000db0 	.word	0x20000db0
 8007ad0:	20000db4 	.word	0x20000db4
 8007ad4:	e000ed20 	.word	0xe000ed20
 8007ad8:	20000014 	.word	0x20000014

08007adc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	607b      	str	r3, [r7, #4]
}
 8007af4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007af6:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <vPortEnterCritical+0x58>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3301      	adds	r3, #1
 8007afc:	4a0d      	ldr	r2, [pc, #52]	; (8007b34 <vPortEnterCritical+0x58>)
 8007afe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b00:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <vPortEnterCritical+0x58>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d10f      	bne.n	8007b28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b08:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <vPortEnterCritical+0x5c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	603b      	str	r3, [r7, #0]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <vPortEnterCritical+0x4a>
	}
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20000014 	.word	0x20000014
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b42:	4b11      	ldr	r3, [pc, #68]	; (8007b88 <vPortExitCritical+0x4c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10a      	bne.n	8007b60 <vPortExitCritical+0x24>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	607b      	str	r3, [r7, #4]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b60:	4b09      	ldr	r3, [pc, #36]	; (8007b88 <vPortExitCritical+0x4c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	4a08      	ldr	r2, [pc, #32]	; (8007b88 <vPortExitCritical+0x4c>)
 8007b68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b6a:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <vPortExitCritical+0x4c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d105      	bne.n	8007b7e <vPortExitCritical+0x42>
 8007b72:	2300      	movs	r3, #0
 8007b74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	f383 8811 	msr	BASEPRI, r3
}
 8007b7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b7e:	bf00      	nop
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bc80      	pop	{r7}
 8007b86:	4770      	bx	lr
 8007b88:	20000014 	.word	0x20000014
 8007b8c:	00000000 	.word	0x00000000

08007b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b90:	f3ef 8009 	mrs	r0, PSP
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	4b0d      	ldr	r3, [pc, #52]	; (8007bd0 <pxCurrentTCBConst>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ba0:	6010      	str	r0, [r2, #0]
 8007ba2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007ba6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007baa:	f380 8811 	msr	BASEPRI, r0
 8007bae:	f7ff f845 	bl	8006c3c <vTaskSwitchContext>
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f380 8811 	msr	BASEPRI, r0
 8007bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007bbe:	6819      	ldr	r1, [r3, #0]
 8007bc0:	6808      	ldr	r0, [r1, #0]
 8007bc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007bc6:	f380 8809 	msr	PSP, r0
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	4770      	bx	lr

08007bd0 <pxCurrentTCBConst>:
 8007bd0:	20000784 	.word	0x20000784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop

08007bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
}
 8007bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bf2:	f7fe ff65 	bl	8006ac0 <xTaskIncrementTick>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bfc:	4b06      	ldr	r3, [pc, #24]	; (8007c18 <xPortSysTickHandler+0x40>)
 8007bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	2300      	movs	r3, #0
 8007c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	f383 8811 	msr	BASEPRI, r3
}
 8007c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c10:	bf00      	nop
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	e000ed04 	.word	0xe000ed04

08007c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c20:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <vPortSetupTimerInterrupt+0x30>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c26:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <vPortSetupTimerInterrupt+0x34>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <vPortSetupTimerInterrupt+0x38>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a09      	ldr	r2, [pc, #36]	; (8007c58 <vPortSetupTimerInterrupt+0x3c>)
 8007c32:	fba2 2303 	umull	r2, r3, r2, r3
 8007c36:	099b      	lsrs	r3, r3, #6
 8007c38:	4a08      	ldr	r2, [pc, #32]	; (8007c5c <vPortSetupTimerInterrupt+0x40>)
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c3e:	4b03      	ldr	r3, [pc, #12]	; (8007c4c <vPortSetupTimerInterrupt+0x30>)
 8007c40:	2207      	movs	r2, #7
 8007c42:	601a      	str	r2, [r3, #0]
}
 8007c44:	bf00      	nop
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bc80      	pop	{r7}
 8007c4a:	4770      	bx	lr
 8007c4c:	e000e010 	.word	0xe000e010
 8007c50:	e000e018 	.word	0xe000e018
 8007c54:	20000008 	.word	0x20000008
 8007c58:	10624dd3 	.word	0x10624dd3
 8007c5c:	e000e014 	.word	0xe000e014

08007c60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c66:	f3ef 8305 	mrs	r3, IPSR
 8007c6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2b0f      	cmp	r3, #15
 8007c70:	d914      	bls.n	8007c9c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c72:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <vPortValidateInterruptPriority+0x6c>)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c7c:	4b14      	ldr	r3, [pc, #80]	; (8007cd0 <vPortValidateInterruptPriority+0x70>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	7afa      	ldrb	r2, [r7, #11]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d20a      	bcs.n	8007c9c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	607b      	str	r3, [r7, #4]
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c9c:	4b0d      	ldr	r3, [pc, #52]	; (8007cd4 <vPortValidateInterruptPriority+0x74>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <vPortValidateInterruptPriority+0x78>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d90a      	bls.n	8007cc2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	603b      	str	r3, [r7, #0]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <vPortValidateInterruptPriority+0x60>
	}
 8007cc2:	bf00      	nop
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bc80      	pop	{r7}
 8007cca:	4770      	bx	lr
 8007ccc:	e000e3f0 	.word	0xe000e3f0
 8007cd0:	20000db0 	.word	0x20000db0
 8007cd4:	e000ed0c 	.word	0xe000ed0c
 8007cd8:	20000db4 	.word	0x20000db4

08007cdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08a      	sub	sp, #40	; 0x28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ce8:	f7fe fe30 	bl	800694c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cec:	4b58      	ldr	r3, [pc, #352]	; (8007e50 <pvPortMalloc+0x174>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cf4:	f000 f910 	bl	8007f18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cf8:	4b56      	ldr	r3, [pc, #344]	; (8007e54 <pvPortMalloc+0x178>)
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f040 808e 	bne.w	8007e22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01d      	beq.n	8007d48 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d0c:	2208      	movs	r2, #8
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4413      	add	r3, r2
 8007d12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d014      	beq.n	8007d48 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f023 0307 	bic.w	r3, r3, #7
 8007d24:	3308      	adds	r3, #8
 8007d26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <pvPortMalloc+0x6c>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	617b      	str	r3, [r7, #20]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d069      	beq.n	8007e22 <pvPortMalloc+0x146>
 8007d4e:	4b42      	ldr	r3, [pc, #264]	; (8007e58 <pvPortMalloc+0x17c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d864      	bhi.n	8007e22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d58:	4b40      	ldr	r3, [pc, #256]	; (8007e5c <pvPortMalloc+0x180>)
 8007d5a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d5c:	4b3f      	ldr	r3, [pc, #252]	; (8007e5c <pvPortMalloc+0x180>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d62:	e004      	b.n	8007d6e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d903      	bls.n	8007d80 <pvPortMalloc+0xa4>
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1f1      	bne.n	8007d64 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d80:	4b33      	ldr	r3, [pc, #204]	; (8007e50 <pvPortMalloc+0x174>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d04b      	beq.n	8007e22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2208      	movs	r2, #8
 8007d90:	4413      	add	r3, r2
 8007d92:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	1ad2      	subs	r2, r2, r3
 8007da4:	2308      	movs	r3, #8
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d91f      	bls.n	8007dec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4413      	add	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <pvPortMalloc+0xf8>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	613b      	str	r3, [r7, #16]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	1ad2      	subs	r2, r2, r3
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007de6:	69b8      	ldr	r0, [r7, #24]
 8007de8:	f000 f8f8 	bl	8007fdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dec:	4b1a      	ldr	r3, [pc, #104]	; (8007e58 <pvPortMalloc+0x17c>)
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	4a18      	ldr	r2, [pc, #96]	; (8007e58 <pvPortMalloc+0x17c>)
 8007df8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dfa:	4b17      	ldr	r3, [pc, #92]	; (8007e58 <pvPortMalloc+0x17c>)
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	4b18      	ldr	r3, [pc, #96]	; (8007e60 <pvPortMalloc+0x184>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d203      	bcs.n	8007e0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e06:	4b14      	ldr	r3, [pc, #80]	; (8007e58 <pvPortMalloc+0x17c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a15      	ldr	r2, [pc, #84]	; (8007e60 <pvPortMalloc+0x184>)
 8007e0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	4b10      	ldr	r3, [pc, #64]	; (8007e54 <pvPortMalloc+0x178>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	431a      	orrs	r2, r3
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	2200      	movs	r2, #0
 8007e20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e22:	f7fe fda1 	bl	8006968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <pvPortMalloc+0x16a>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	60fb      	str	r3, [r7, #12]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <pvPortMalloc+0x168>
	return pvReturn;
 8007e46:	69fb      	ldr	r3, [r7, #28]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3728      	adds	r7, #40	; 0x28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	200019c0 	.word	0x200019c0
 8007e54:	200019cc 	.word	0x200019cc
 8007e58:	200019c4 	.word	0x200019c4
 8007e5c:	200019b8 	.word	0x200019b8
 8007e60:	200019c8 	.word	0x200019c8

08007e64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d048      	beq.n	8007f08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e76:	2308      	movs	r3, #8
 8007e78:	425b      	negs	r3, r3
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	4b21      	ldr	r3, [pc, #132]	; (8007f10 <vPortFree+0xac>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <vPortFree+0x44>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	60fb      	str	r3, [r7, #12]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <vPortFree+0x62>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	60bb      	str	r3, [r7, #8]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	4b11      	ldr	r3, [pc, #68]	; (8007f10 <vPortFree+0xac>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4013      	ands	r3, r2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d019      	beq.n	8007f08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d115      	bne.n	8007f08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <vPortFree+0xac>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	43db      	mvns	r3, r3
 8007ee6:	401a      	ands	r2, r3
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007eec:	f7fe fd2e 	bl	800694c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	4b07      	ldr	r3, [pc, #28]	; (8007f14 <vPortFree+0xb0>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4413      	add	r3, r2
 8007efa:	4a06      	ldr	r2, [pc, #24]	; (8007f14 <vPortFree+0xb0>)
 8007efc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007efe:	6938      	ldr	r0, [r7, #16]
 8007f00:	f000 f86c 	bl	8007fdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f04:	f7fe fd30 	bl	8006968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f08:	bf00      	nop
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	200019cc 	.word	0x200019cc
 8007f14:	200019c4 	.word	0x200019c4

08007f18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007f22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f24:	4b27      	ldr	r3, [pc, #156]	; (8007fc4 <prvHeapInit+0xac>)
 8007f26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f003 0307 	and.w	r3, r3, #7
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00c      	beq.n	8007f4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3307      	adds	r3, #7
 8007f36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0307 	bic.w	r3, r3, #7
 8007f3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	4a1f      	ldr	r2, [pc, #124]	; (8007fc4 <prvHeapInit+0xac>)
 8007f48:	4413      	add	r3, r2
 8007f4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f50:	4a1d      	ldr	r2, [pc, #116]	; (8007fc8 <prvHeapInit+0xb0>)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f56:	4b1c      	ldr	r3, [pc, #112]	; (8007fc8 <prvHeapInit+0xb0>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	4413      	add	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f64:	2208      	movs	r2, #8
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0307 	bic.w	r3, r3, #7
 8007f72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4a15      	ldr	r2, [pc, #84]	; (8007fcc <prvHeapInit+0xb4>)
 8007f78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f7a:	4b14      	ldr	r3, [pc, #80]	; (8007fcc <prvHeapInit+0xb4>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f82:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <prvHeapInit+0xb4>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	1ad2      	subs	r2, r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f98:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <prvHeapInit+0xb4>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	4a0a      	ldr	r2, [pc, #40]	; (8007fd0 <prvHeapInit+0xb8>)
 8007fa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	4a09      	ldr	r2, [pc, #36]	; (8007fd4 <prvHeapInit+0xbc>)
 8007fae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fb0:	4b09      	ldr	r3, [pc, #36]	; (8007fd8 <prvHeapInit+0xc0>)
 8007fb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fb6:	601a      	str	r2, [r3, #0]
}
 8007fb8:	bf00      	nop
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bc80      	pop	{r7}
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	20000db8 	.word	0x20000db8
 8007fc8:	200019b8 	.word	0x200019b8
 8007fcc:	200019c0 	.word	0x200019c0
 8007fd0:	200019c8 	.word	0x200019c8
 8007fd4:	200019c4 	.word	0x200019c4
 8007fd8:	200019cc 	.word	0x200019cc

08007fdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fe4:	4b27      	ldr	r3, [pc, #156]	; (8008084 <prvInsertBlockIntoFreeList+0xa8>)
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	e002      	b.n	8007ff0 <prvInsertBlockIntoFreeList+0x14>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d8f7      	bhi.n	8007fea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	4413      	add	r3, r2
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	429a      	cmp	r2, r3
 800800a:	d108      	bne.n	800801e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	441a      	add	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	441a      	add	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d118      	bne.n	8008064 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	4b14      	ldr	r3, [pc, #80]	; (8008088 <prvInsertBlockIntoFreeList+0xac>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d00d      	beq.n	800805a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	441a      	add	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	e008      	b.n	800806c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800805a:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <prvInsertBlockIntoFreeList+0xac>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	e003      	b.n	800806c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	429a      	cmp	r2, r3
 8008072:	d002      	beq.n	800807a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800807a:	bf00      	nop
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr
 8008084:	200019b8 	.word	0x200019b8
 8008088:	200019c0 	.word	0x200019c0

0800808c <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8008092:	2300      	movs	r3, #0
 8008094:	71fb      	strb	r3, [r7, #7]
 8008096:	e026      	b.n	80080e6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	3b50      	subs	r3, #80	; 0x50
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2100      	movs	r1, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f82b 	bl	80080fc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80080a6:	2100      	movs	r1, #0
 80080a8:	2000      	movs	r0, #0
 80080aa:	f000 f827 	bl	80080fc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80080ae:	2100      	movs	r1, #0
 80080b0:	2010      	movs	r0, #16
 80080b2:	f000 f823 	bl	80080fc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80080b6:	2300      	movs	r3, #0
 80080b8:	71bb      	strb	r3, [r7, #6]
 80080ba:	e00d      	b.n	80080d8 <OLED_Refresh_Gram+0x4c>
 80080bc:	79ba      	ldrb	r2, [r7, #6]
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	490d      	ldr	r1, [pc, #52]	; (80080f8 <OLED_Refresh_Gram+0x6c>)
 80080c2:	00d2      	lsls	r2, r2, #3
 80080c4:	440a      	add	r2, r1
 80080c6:	4413      	add	r3, r2
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2101      	movs	r1, #1
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 f815 	bl	80080fc <OLED_WR_Byte>
 80080d2:	79bb      	ldrb	r3, [r7, #6]
 80080d4:	3301      	adds	r3, #1
 80080d6:	71bb      	strb	r3, [r7, #6]
 80080d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	daed      	bge.n	80080bc <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	3301      	adds	r3, #1
 80080e4:	71fb      	strb	r3, [r7, #7]
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	2b07      	cmp	r3, #7
 80080ea:	d9d5      	bls.n	8008098 <OLED_Refresh_Gram+0xc>
	}   
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	200021b4 	.word	0x200021b4

080080fc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	460a      	mov	r2, r1
 8008106:	71fb      	strb	r3, [r7, #7]
 8008108:	4613      	mov	r3, r2
 800810a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800810c:	79bb      	ldrb	r3, [r7, #6]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d006      	beq.n	8008120 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8008112:	2201      	movs	r2, #1
 8008114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008118:	481c      	ldr	r0, [pc, #112]	; (800818c <OLED_WR_Byte+0x90>)
 800811a:	f7fa ff19 	bl	8002f50 <HAL_GPIO_WritePin>
 800811e:	e005      	b.n	800812c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8008120:	2200      	movs	r2, #0
 8008122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008126:	4819      	ldr	r0, [pc, #100]	; (800818c <OLED_WR_Byte+0x90>)
 8008128:	f7fa ff12 	bl	8002f50 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800812c:	2300      	movs	r3, #0
 800812e:	73fb      	strb	r3, [r7, #15]
 8008130:	e01e      	b.n	8008170 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8008132:	2200      	movs	r2, #0
 8008134:	2120      	movs	r1, #32
 8008136:	4815      	ldr	r0, [pc, #84]	; (800818c <OLED_WR_Byte+0x90>)
 8008138:	f7fa ff0a 	bl	8002f50 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800813c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008140:	2b00      	cmp	r3, #0
 8008142:	da05      	bge.n	8008150 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8008144:	2201      	movs	r2, #1
 8008146:	2140      	movs	r1, #64	; 0x40
 8008148:	4810      	ldr	r0, [pc, #64]	; (800818c <OLED_WR_Byte+0x90>)
 800814a:	f7fa ff01 	bl	8002f50 <HAL_GPIO_WritePin>
 800814e:	e004      	b.n	800815a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8008150:	2200      	movs	r2, #0
 8008152:	2140      	movs	r1, #64	; 0x40
 8008154:	480d      	ldr	r0, [pc, #52]	; (800818c <OLED_WR_Byte+0x90>)
 8008156:	f7fa fefb 	bl	8002f50 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800815a:	2201      	movs	r2, #1
 800815c:	2120      	movs	r1, #32
 800815e:	480b      	ldr	r0, [pc, #44]	; (800818c <OLED_WR_Byte+0x90>)
 8008160:	f7fa fef6 	bl	8002f50 <HAL_GPIO_WritePin>
		dat<<=1;   
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	3301      	adds	r3, #1
 800816e:	73fb      	strb	r3, [r7, #15]
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	2b07      	cmp	r3, #7
 8008174:	d9dd      	bls.n	8008132 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8008176:	2201      	movs	r2, #1
 8008178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800817c:	4803      	ldr	r0, [pc, #12]	; (800818c <OLED_WR_Byte+0x90>)
 800817e:	f7fa fee7 	bl	8002f50 <HAL_GPIO_WritePin>
} 
 8008182:	bf00      	nop
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	40011800 	.word	0x40011800

08008190 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8008196:	2300      	movs	r3, #0
 8008198:	71fb      	strb	r3, [r7, #7]
 800819a:	e014      	b.n	80081c6 <OLED_Clear+0x36>
 800819c:	2300      	movs	r3, #0
 800819e:	71bb      	strb	r3, [r7, #6]
 80081a0:	e00a      	b.n	80081b8 <OLED_Clear+0x28>
 80081a2:	79ba      	ldrb	r2, [r7, #6]
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	490c      	ldr	r1, [pc, #48]	; (80081d8 <OLED_Clear+0x48>)
 80081a8:	00d2      	lsls	r2, r2, #3
 80081aa:	440a      	add	r2, r1
 80081ac:	4413      	add	r3, r2
 80081ae:	2200      	movs	r2, #0
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	79bb      	ldrb	r3, [r7, #6]
 80081b4:	3301      	adds	r3, #1
 80081b6:	71bb      	strb	r3, [r7, #6]
 80081b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	daf0      	bge.n	80081a2 <OLED_Clear+0x12>
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	3301      	adds	r3, #1
 80081c4:	71fb      	strb	r3, [r7, #7]
 80081c6:	79fb      	ldrb	r3, [r7, #7]
 80081c8:	2b07      	cmp	r3, #7
 80081ca:	d9e7      	bls.n	800819c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80081cc:	f7ff ff5e 	bl	800808c <OLED_Refresh_Gram>
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	200021b4 	.word	0x200021b4

080081dc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	71fb      	strb	r3, [r7, #7]
 80081e6:	460b      	mov	r3, r1
 80081e8:	71bb      	strb	r3, [r7, #6]
 80081ea:	4613      	mov	r3, r2
 80081ec:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80081f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	db41      	blt.n	800827e <OLED_DrawPoint+0xa2>
 80081fa:	79bb      	ldrb	r3, [r7, #6]
 80081fc:	2b3f      	cmp	r3, #63	; 0x3f
 80081fe:	d83e      	bhi.n	800827e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8008200:	79bb      	ldrb	r3, [r7, #6]
 8008202:	08db      	lsrs	r3, r3, #3
 8008204:	b2db      	uxtb	r3, r3
 8008206:	f1c3 0307 	rsb	r3, r3, #7
 800820a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800820c:	79bb      	ldrb	r3, [r7, #6]
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8008214:	7b7b      	ldrb	r3, [r7, #13]
 8008216:	f1c3 0307 	rsb	r3, r3, #7
 800821a:	2201      	movs	r2, #1
 800821c:	fa02 f303 	lsl.w	r3, r2, r3
 8008220:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8008222:	797b      	ldrb	r3, [r7, #5]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d012      	beq.n	800824e <OLED_DrawPoint+0x72>
 8008228:	79fa      	ldrb	r2, [r7, #7]
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	4916      	ldr	r1, [pc, #88]	; (8008288 <OLED_DrawPoint+0xac>)
 800822e:	00d2      	lsls	r2, r2, #3
 8008230:	440a      	add	r2, r1
 8008232:	4413      	add	r3, r2
 8008234:	7818      	ldrb	r0, [r3, #0]
 8008236:	79fa      	ldrb	r2, [r7, #7]
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	7bf9      	ldrb	r1, [r7, #15]
 800823c:	4301      	orrs	r1, r0
 800823e:	b2c8      	uxtb	r0, r1
 8008240:	4911      	ldr	r1, [pc, #68]	; (8008288 <OLED_DrawPoint+0xac>)
 8008242:	00d2      	lsls	r2, r2, #3
 8008244:	440a      	add	r2, r1
 8008246:	4413      	add	r3, r2
 8008248:	4602      	mov	r2, r0
 800824a:	701a      	strb	r2, [r3, #0]
 800824c:	e018      	b.n	8008280 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800824e:	79fa      	ldrb	r2, [r7, #7]
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	490d      	ldr	r1, [pc, #52]	; (8008288 <OLED_DrawPoint+0xac>)
 8008254:	00d2      	lsls	r2, r2, #3
 8008256:	440a      	add	r2, r1
 8008258:	4413      	add	r3, r2
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	b25a      	sxtb	r2, r3
 800825e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008262:	43db      	mvns	r3, r3
 8008264:	b25b      	sxtb	r3, r3
 8008266:	4013      	ands	r3, r2
 8008268:	b259      	sxtb	r1, r3
 800826a:	79fa      	ldrb	r2, [r7, #7]
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	b2c8      	uxtb	r0, r1
 8008270:	4905      	ldr	r1, [pc, #20]	; (8008288 <OLED_DrawPoint+0xac>)
 8008272:	00d2      	lsls	r2, r2, #3
 8008274:	440a      	add	r2, r1
 8008276:	4413      	add	r3, r2
 8008278:	4602      	mov	r2, r0
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	e000      	b.n	8008280 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800827e:	bf00      	nop
}
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	bc80      	pop	{r7}
 8008286:	4770      	bx	lr
 8008288:	200021b4 	.word	0x200021b4

0800828c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800828c:	b590      	push	{r4, r7, lr}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	4604      	mov	r4, r0
 8008294:	4608      	mov	r0, r1
 8008296:	4611      	mov	r1, r2
 8008298:	461a      	mov	r2, r3
 800829a:	4623      	mov	r3, r4
 800829c:	71fb      	strb	r3, [r7, #7]
 800829e:	4603      	mov	r3, r0
 80082a0:	71bb      	strb	r3, [r7, #6]
 80082a2:	460b      	mov	r3, r1
 80082a4:	717b      	strb	r3, [r7, #5]
 80082a6:	4613      	mov	r3, r2
 80082a8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80082aa:	79bb      	ldrb	r3, [r7, #6]
 80082ac:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80082ae:	797b      	ldrb	r3, [r7, #5]
 80082b0:	3b20      	subs	r3, #32
 80082b2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80082b4:	2300      	movs	r3, #0
 80082b6:	73bb      	strb	r3, [r7, #14]
 80082b8:	e04d      	b.n	8008356 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80082ba:	793b      	ldrb	r3, [r7, #4]
 80082bc:	2b0c      	cmp	r3, #12
 80082be:	d10b      	bne.n	80082d8 <OLED_ShowChar+0x4c>
 80082c0:	797a      	ldrb	r2, [r7, #5]
 80082c2:	7bb9      	ldrb	r1, [r7, #14]
 80082c4:	4828      	ldr	r0, [pc, #160]	; (8008368 <OLED_ShowChar+0xdc>)
 80082c6:	4613      	mov	r3, r2
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4403      	add	r3, r0
 80082d0:	440b      	add	r3, r1
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	73fb      	strb	r3, [r7, #15]
 80082d6:	e007      	b.n	80082e8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80082d8:	797a      	ldrb	r2, [r7, #5]
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	4923      	ldr	r1, [pc, #140]	; (800836c <OLED_ShowChar+0xe0>)
 80082de:	0112      	lsls	r2, r2, #4
 80082e0:	440a      	add	r2, r1
 80082e2:	4413      	add	r3, r2
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80082e8:	2300      	movs	r3, #0
 80082ea:	737b      	strb	r3, [r7, #13]
 80082ec:	e02d      	b.n	800834a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80082ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	da07      	bge.n	8008306 <OLED_ShowChar+0x7a>
 80082f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80082fa:	79b9      	ldrb	r1, [r7, #6]
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	4618      	mov	r0, r3
 8008300:	f7ff ff6c 	bl	80081dc <OLED_DrawPoint>
 8008304:	e00c      	b.n	8008320 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8008306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800830a:	2b00      	cmp	r3, #0
 800830c:	bf0c      	ite	eq
 800830e:	2301      	moveq	r3, #1
 8008310:	2300      	movne	r3, #0
 8008312:	b2db      	uxtb	r3, r3
 8008314:	461a      	mov	r2, r3
 8008316:	79b9      	ldrb	r1, [r7, #6]
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	4618      	mov	r0, r3
 800831c:	f7ff ff5e 	bl	80081dc <OLED_DrawPoint>
			temp<<=1;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	73fb      	strb	r3, [r7, #15]
			y++;
 8008326:	79bb      	ldrb	r3, [r7, #6]
 8008328:	3301      	adds	r3, #1
 800832a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800832c:	79ba      	ldrb	r2, [r7, #6]
 800832e:	7b3b      	ldrb	r3, [r7, #12]
 8008330:	1ad2      	subs	r2, r2, r3
 8008332:	793b      	ldrb	r3, [r7, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	d105      	bne.n	8008344 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8008338:	7b3b      	ldrb	r3, [r7, #12]
 800833a:	71bb      	strb	r3, [r7, #6]
				x++;
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	3301      	adds	r3, #1
 8008340:	71fb      	strb	r3, [r7, #7]
				break;
 8008342:	e005      	b.n	8008350 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8008344:	7b7b      	ldrb	r3, [r7, #13]
 8008346:	3301      	adds	r3, #1
 8008348:	737b      	strb	r3, [r7, #13]
 800834a:	7b7b      	ldrb	r3, [r7, #13]
 800834c:	2b07      	cmp	r3, #7
 800834e:	d9ce      	bls.n	80082ee <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	3301      	adds	r3, #1
 8008354:	73bb      	strb	r3, [r7, #14]
 8008356:	7bba      	ldrb	r2, [r7, #14]
 8008358:	793b      	ldrb	r3, [r7, #4]
 800835a:	429a      	cmp	r2, r3
 800835c:	d3ad      	bcc.n	80082ba <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800835e:	bf00      	nop
 8008360:	bf00      	nop
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	bd90      	pop	{r4, r7, pc}
 8008368:	08008f80 	.word	0x08008f80
 800836c:	080093f4 	.word	0x080093f4

08008370 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af02      	add	r7, sp, #8
 8008376:	4603      	mov	r3, r0
 8008378:	603a      	str	r2, [r7, #0]
 800837a:	71fb      	strb	r3, [r7, #7]
 800837c:	460b      	mov	r3, r1
 800837e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8008380:	e01f      	b.n	80083c2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	2b7a      	cmp	r3, #122	; 0x7a
 8008386:	d904      	bls.n	8008392 <OLED_ShowString+0x22>
 8008388:	2300      	movs	r3, #0
 800838a:	71fb      	strb	r3, [r7, #7]
 800838c:	79bb      	ldrb	r3, [r7, #6]
 800838e:	3310      	adds	r3, #16
 8008390:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8008392:	79bb      	ldrb	r3, [r7, #6]
 8008394:	2b3a      	cmp	r3, #58	; 0x3a
 8008396:	d905      	bls.n	80083a4 <OLED_ShowString+0x34>
 8008398:	2300      	movs	r3, #0
 800839a:	71fb      	strb	r3, [r7, #7]
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	71bb      	strb	r3, [r7, #6]
 80083a0:	f7ff fef6 	bl	8008190 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781a      	ldrb	r2, [r3, #0]
 80083a8:	79b9      	ldrb	r1, [r7, #6]
 80083aa:	79f8      	ldrb	r0, [r7, #7]
 80083ac:	2301      	movs	r3, #1
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	230c      	movs	r3, #12
 80083b2:	f7ff ff6b 	bl	800828c <OLED_ShowChar>
        x+=8;
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	3308      	adds	r3, #8
 80083ba:	71fb      	strb	r3, [r7, #7]
        p++;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	3301      	adds	r3, #1
 80083c0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1db      	bne.n	8008382 <OLED_ShowString+0x12>
    }  
}	 
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <OLED_Init>:

void OLED_Init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80083d8:	f7fa fe04 	bl	8002fe4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80083dc:	4b41      	ldr	r3, [pc, #260]	; (80084e4 <OLED_Init+0x110>)
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	4a40      	ldr	r2, [pc, #256]	; (80084e4 <OLED_Init+0x110>)
 80083e2:	f023 0301 	bic.w	r3, r3, #1
 80083e6:	6213      	str	r3, [r2, #32]
 80083e8:	4b3e      	ldr	r3, [pc, #248]	; (80084e4 <OLED_Init+0x110>)
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	4a3d      	ldr	r2, [pc, #244]	; (80084e4 <OLED_Init+0x110>)
 80083ee:	f023 0304 	bic.w	r3, r3, #4
 80083f2:	6213      	str	r3, [r2, #32]
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80083f4:	f7fa fe02 	bl	8002ffc <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80083f8:	2200      	movs	r2, #0
 80083fa:	2180      	movs	r1, #128	; 0x80
 80083fc:	483a      	ldr	r0, [pc, #232]	; (80084e8 <OLED_Init+0x114>)
 80083fe:	f7fa fda7 	bl	8002f50 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8008402:	2064      	movs	r0, #100	; 0x64
 8008404:	f7fa f99c 	bl	8002740 <HAL_Delay>
	OLED_RST_Set();
 8008408:	2201      	movs	r2, #1
 800840a:	2180      	movs	r1, #128	; 0x80
 800840c:	4836      	ldr	r0, [pc, #216]	; (80084e8 <OLED_Init+0x114>)
 800840e:	f7fa fd9f 	bl	8002f50 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8008412:	2100      	movs	r1, #0
 8008414:	20ae      	movs	r0, #174	; 0xae
 8008416:	f7ff fe71 	bl	80080fc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800841a:	2100      	movs	r1, #0
 800841c:	20d5      	movs	r0, #213	; 0xd5
 800841e:	f7ff fe6d 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8008422:	2100      	movs	r1, #0
 8008424:	2050      	movs	r0, #80	; 0x50
 8008426:	f7ff fe69 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800842a:	2100      	movs	r1, #0
 800842c:	20a8      	movs	r0, #168	; 0xa8
 800842e:	f7ff fe65 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8008432:	2100      	movs	r1, #0
 8008434:	203f      	movs	r0, #63	; 0x3f
 8008436:	f7ff fe61 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800843a:	2100      	movs	r1, #0
 800843c:	20d3      	movs	r0, #211	; 0xd3
 800843e:	f7ff fe5d 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8008442:	2100      	movs	r1, #0
 8008444:	2000      	movs	r0, #0
 8008446:	f7ff fe59 	bl	80080fc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800844a:	2100      	movs	r1, #0
 800844c:	2040      	movs	r0, #64	; 0x40
 800844e:	f7ff fe55 	bl	80080fc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8008452:	2100      	movs	r1, #0
 8008454:	208d      	movs	r0, #141	; 0x8d
 8008456:	f7ff fe51 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800845a:	2100      	movs	r1, #0
 800845c:	2014      	movs	r0, #20
 800845e:	f7ff fe4d 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8008462:	2100      	movs	r1, #0
 8008464:	2020      	movs	r0, #32
 8008466:	f7ff fe49 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800846a:	2100      	movs	r1, #0
 800846c:	2002      	movs	r0, #2
 800846e:	f7ff fe45 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8008472:	2100      	movs	r1, #0
 8008474:	20a1      	movs	r0, #161	; 0xa1
 8008476:	f7ff fe41 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800847a:	2100      	movs	r1, #0
 800847c:	20c0      	movs	r0, #192	; 0xc0
 800847e:	f7ff fe3d 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8008482:	2100      	movs	r1, #0
 8008484:	20da      	movs	r0, #218	; 0xda
 8008486:	f7ff fe39 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800848a:	2100      	movs	r1, #0
 800848c:	2012      	movs	r0, #18
 800848e:	f7ff fe35 	bl	80080fc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8008492:	2100      	movs	r1, #0
 8008494:	2081      	movs	r0, #129	; 0x81
 8008496:	f7ff fe31 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800849a:	2100      	movs	r1, #0
 800849c:	20ef      	movs	r0, #239	; 0xef
 800849e:	f7ff fe2d 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80084a2:	2100      	movs	r1, #0
 80084a4:	20d9      	movs	r0, #217	; 0xd9
 80084a6:	f7ff fe29 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80084aa:	2100      	movs	r1, #0
 80084ac:	20f1      	movs	r0, #241	; 0xf1
 80084ae:	f7ff fe25 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80084b2:	2100      	movs	r1, #0
 80084b4:	20db      	movs	r0, #219	; 0xdb
 80084b6:	f7ff fe21 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80084ba:	2100      	movs	r1, #0
 80084bc:	2030      	movs	r0, #48	; 0x30
 80084be:	f7ff fe1d 	bl	80080fc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80084c2:	2100      	movs	r1, #0
 80084c4:	20a4      	movs	r0, #164	; 0xa4
 80084c6:	f7ff fe19 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80084ca:	2100      	movs	r1, #0
 80084cc:	20a6      	movs	r0, #166	; 0xa6
 80084ce:	f7ff fe15 	bl	80080fc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80084d2:	2100      	movs	r1, #0
 80084d4:	20af      	movs	r0, #175	; 0xaf
 80084d6:	f7ff fe11 	bl	80080fc <OLED_WR_Byte>
	OLED_Clear(); 
 80084da:	f7ff fe59 	bl	8008190 <OLED_Clear>
 80084de:	bf00      	nop
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	40021000 	.word	0x40021000
 80084e8:	40011800 	.word	0x40011800

080084ec <__errno>:
 80084ec:	4b01      	ldr	r3, [pc, #4]	; (80084f4 <__errno+0x8>)
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20000018 	.word	0x20000018

080084f8 <__libc_init_array>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	2600      	movs	r6, #0
 80084fc:	4d0c      	ldr	r5, [pc, #48]	; (8008530 <__libc_init_array+0x38>)
 80084fe:	4c0d      	ldr	r4, [pc, #52]	; (8008534 <__libc_init_array+0x3c>)
 8008500:	1b64      	subs	r4, r4, r5
 8008502:	10a4      	asrs	r4, r4, #2
 8008504:	42a6      	cmp	r6, r4
 8008506:	d109      	bne.n	800851c <__libc_init_array+0x24>
 8008508:	f000 fc5c 	bl	8008dc4 <_init>
 800850c:	2600      	movs	r6, #0
 800850e:	4d0a      	ldr	r5, [pc, #40]	; (8008538 <__libc_init_array+0x40>)
 8008510:	4c0a      	ldr	r4, [pc, #40]	; (800853c <__libc_init_array+0x44>)
 8008512:	1b64      	subs	r4, r4, r5
 8008514:	10a4      	asrs	r4, r4, #2
 8008516:	42a6      	cmp	r6, r4
 8008518:	d105      	bne.n	8008526 <__libc_init_array+0x2e>
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008520:	4798      	blx	r3
 8008522:	3601      	adds	r6, #1
 8008524:	e7ee      	b.n	8008504 <__libc_init_array+0xc>
 8008526:	f855 3b04 	ldr.w	r3, [r5], #4
 800852a:	4798      	blx	r3
 800852c:	3601      	adds	r6, #1
 800852e:	e7f2      	b.n	8008516 <__libc_init_array+0x1e>
 8008530:	08009a18 	.word	0x08009a18
 8008534:	08009a18 	.word	0x08009a18
 8008538:	08009a18 	.word	0x08009a18
 800853c:	08009a1c 	.word	0x08009a1c

08008540 <memcpy>:
 8008540:	440a      	add	r2, r1
 8008542:	4291      	cmp	r1, r2
 8008544:	f100 33ff 	add.w	r3, r0, #4294967295
 8008548:	d100      	bne.n	800854c <memcpy+0xc>
 800854a:	4770      	bx	lr
 800854c:	b510      	push	{r4, lr}
 800854e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008552:	4291      	cmp	r1, r2
 8008554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008558:	d1f9      	bne.n	800854e <memcpy+0xe>
 800855a:	bd10      	pop	{r4, pc}

0800855c <memset>:
 800855c:	4603      	mov	r3, r0
 800855e:	4402      	add	r2, r0
 8008560:	4293      	cmp	r3, r2
 8008562:	d100      	bne.n	8008566 <memset+0xa>
 8008564:	4770      	bx	lr
 8008566:	f803 1b01 	strb.w	r1, [r3], #1
 800856a:	e7f9      	b.n	8008560 <memset+0x4>

0800856c <siprintf>:
 800856c:	b40e      	push	{r1, r2, r3}
 800856e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008572:	b500      	push	{lr}
 8008574:	b09c      	sub	sp, #112	; 0x70
 8008576:	ab1d      	add	r3, sp, #116	; 0x74
 8008578:	9002      	str	r0, [sp, #8]
 800857a:	9006      	str	r0, [sp, #24]
 800857c:	9107      	str	r1, [sp, #28]
 800857e:	9104      	str	r1, [sp, #16]
 8008580:	4808      	ldr	r0, [pc, #32]	; (80085a4 <siprintf+0x38>)
 8008582:	4909      	ldr	r1, [pc, #36]	; (80085a8 <siprintf+0x3c>)
 8008584:	f853 2b04 	ldr.w	r2, [r3], #4
 8008588:	9105      	str	r1, [sp, #20]
 800858a:	6800      	ldr	r0, [r0, #0]
 800858c:	a902      	add	r1, sp, #8
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	f000 f868 	bl	8008664 <_svfiprintf_r>
 8008594:	2200      	movs	r2, #0
 8008596:	9b02      	ldr	r3, [sp, #8]
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	b01c      	add	sp, #112	; 0x70
 800859c:	f85d eb04 	ldr.w	lr, [sp], #4
 80085a0:	b003      	add	sp, #12
 80085a2:	4770      	bx	lr
 80085a4:	20000018 	.word	0x20000018
 80085a8:	ffff0208 	.word	0xffff0208

080085ac <__ssputs_r>:
 80085ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	688e      	ldr	r6, [r1, #8]
 80085b2:	4682      	mov	sl, r0
 80085b4:	429e      	cmp	r6, r3
 80085b6:	460c      	mov	r4, r1
 80085b8:	4690      	mov	r8, r2
 80085ba:	461f      	mov	r7, r3
 80085bc:	d838      	bhi.n	8008630 <__ssputs_r+0x84>
 80085be:	898a      	ldrh	r2, [r1, #12]
 80085c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085c4:	d032      	beq.n	800862c <__ssputs_r+0x80>
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	6909      	ldr	r1, [r1, #16]
 80085ca:	3301      	adds	r3, #1
 80085cc:	eba5 0901 	sub.w	r9, r5, r1
 80085d0:	6965      	ldr	r5, [r4, #20]
 80085d2:	444b      	add	r3, r9
 80085d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085dc:	106d      	asrs	r5, r5, #1
 80085de:	429d      	cmp	r5, r3
 80085e0:	bf38      	it	cc
 80085e2:	461d      	movcc	r5, r3
 80085e4:	0553      	lsls	r3, r2, #21
 80085e6:	d531      	bpl.n	800864c <__ssputs_r+0xa0>
 80085e8:	4629      	mov	r1, r5
 80085ea:	f000 fb45 	bl	8008c78 <_malloc_r>
 80085ee:	4606      	mov	r6, r0
 80085f0:	b950      	cbnz	r0, 8008608 <__ssputs_r+0x5c>
 80085f2:	230c      	movs	r3, #12
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	f8ca 3000 	str.w	r3, [sl]
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008602:	81a3      	strh	r3, [r4, #12]
 8008604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008608:	464a      	mov	r2, r9
 800860a:	6921      	ldr	r1, [r4, #16]
 800860c:	f7ff ff98 	bl	8008540 <memcpy>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	6126      	str	r6, [r4, #16]
 800861e:	444e      	add	r6, r9
 8008620:	6026      	str	r6, [r4, #0]
 8008622:	463e      	mov	r6, r7
 8008624:	6165      	str	r5, [r4, #20]
 8008626:	eba5 0509 	sub.w	r5, r5, r9
 800862a:	60a5      	str	r5, [r4, #8]
 800862c:	42be      	cmp	r6, r7
 800862e:	d900      	bls.n	8008632 <__ssputs_r+0x86>
 8008630:	463e      	mov	r6, r7
 8008632:	4632      	mov	r2, r6
 8008634:	4641      	mov	r1, r8
 8008636:	6820      	ldr	r0, [r4, #0]
 8008638:	f000 fab8 	bl	8008bac <memmove>
 800863c:	68a3      	ldr	r3, [r4, #8]
 800863e:	6822      	ldr	r2, [r4, #0]
 8008640:	1b9b      	subs	r3, r3, r6
 8008642:	4432      	add	r2, r6
 8008644:	2000      	movs	r0, #0
 8008646:	60a3      	str	r3, [r4, #8]
 8008648:	6022      	str	r2, [r4, #0]
 800864a:	e7db      	b.n	8008604 <__ssputs_r+0x58>
 800864c:	462a      	mov	r2, r5
 800864e:	f000 fb6d 	bl	8008d2c <_realloc_r>
 8008652:	4606      	mov	r6, r0
 8008654:	2800      	cmp	r0, #0
 8008656:	d1e1      	bne.n	800861c <__ssputs_r+0x70>
 8008658:	4650      	mov	r0, sl
 800865a:	6921      	ldr	r1, [r4, #16]
 800865c:	f000 fac0 	bl	8008be0 <_free_r>
 8008660:	e7c7      	b.n	80085f2 <__ssputs_r+0x46>
	...

08008664 <_svfiprintf_r>:
 8008664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008668:	4698      	mov	r8, r3
 800866a:	898b      	ldrh	r3, [r1, #12]
 800866c:	4607      	mov	r7, r0
 800866e:	061b      	lsls	r3, r3, #24
 8008670:	460d      	mov	r5, r1
 8008672:	4614      	mov	r4, r2
 8008674:	b09d      	sub	sp, #116	; 0x74
 8008676:	d50e      	bpl.n	8008696 <_svfiprintf_r+0x32>
 8008678:	690b      	ldr	r3, [r1, #16]
 800867a:	b963      	cbnz	r3, 8008696 <_svfiprintf_r+0x32>
 800867c:	2140      	movs	r1, #64	; 0x40
 800867e:	f000 fafb 	bl	8008c78 <_malloc_r>
 8008682:	6028      	str	r0, [r5, #0]
 8008684:	6128      	str	r0, [r5, #16]
 8008686:	b920      	cbnz	r0, 8008692 <_svfiprintf_r+0x2e>
 8008688:	230c      	movs	r3, #12
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	f04f 30ff 	mov.w	r0, #4294967295
 8008690:	e0d1      	b.n	8008836 <_svfiprintf_r+0x1d2>
 8008692:	2340      	movs	r3, #64	; 0x40
 8008694:	616b      	str	r3, [r5, #20]
 8008696:	2300      	movs	r3, #0
 8008698:	9309      	str	r3, [sp, #36]	; 0x24
 800869a:	2320      	movs	r3, #32
 800869c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086a0:	2330      	movs	r3, #48	; 0x30
 80086a2:	f04f 0901 	mov.w	r9, #1
 80086a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008850 <_svfiprintf_r+0x1ec>
 80086ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086b2:	4623      	mov	r3, r4
 80086b4:	469a      	mov	sl, r3
 80086b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ba:	b10a      	cbz	r2, 80086c0 <_svfiprintf_r+0x5c>
 80086bc:	2a25      	cmp	r2, #37	; 0x25
 80086be:	d1f9      	bne.n	80086b4 <_svfiprintf_r+0x50>
 80086c0:	ebba 0b04 	subs.w	fp, sl, r4
 80086c4:	d00b      	beq.n	80086de <_svfiprintf_r+0x7a>
 80086c6:	465b      	mov	r3, fp
 80086c8:	4622      	mov	r2, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	4638      	mov	r0, r7
 80086ce:	f7ff ff6d 	bl	80085ac <__ssputs_r>
 80086d2:	3001      	adds	r0, #1
 80086d4:	f000 80aa 	beq.w	800882c <_svfiprintf_r+0x1c8>
 80086d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086da:	445a      	add	r2, fp
 80086dc:	9209      	str	r2, [sp, #36]	; 0x24
 80086de:	f89a 3000 	ldrb.w	r3, [sl]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80a2 	beq.w	800882c <_svfiprintf_r+0x1c8>
 80086e8:	2300      	movs	r3, #0
 80086ea:	f04f 32ff 	mov.w	r2, #4294967295
 80086ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f2:	f10a 0a01 	add.w	sl, sl, #1
 80086f6:	9304      	str	r3, [sp, #16]
 80086f8:	9307      	str	r3, [sp, #28]
 80086fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008700:	4654      	mov	r4, sl
 8008702:	2205      	movs	r2, #5
 8008704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008708:	4851      	ldr	r0, [pc, #324]	; (8008850 <_svfiprintf_r+0x1ec>)
 800870a:	f000 fa41 	bl	8008b90 <memchr>
 800870e:	9a04      	ldr	r2, [sp, #16]
 8008710:	b9d8      	cbnz	r0, 800874a <_svfiprintf_r+0xe6>
 8008712:	06d0      	lsls	r0, r2, #27
 8008714:	bf44      	itt	mi
 8008716:	2320      	movmi	r3, #32
 8008718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800871c:	0711      	lsls	r1, r2, #28
 800871e:	bf44      	itt	mi
 8008720:	232b      	movmi	r3, #43	; 0x2b
 8008722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008726:	f89a 3000 	ldrb.w	r3, [sl]
 800872a:	2b2a      	cmp	r3, #42	; 0x2a
 800872c:	d015      	beq.n	800875a <_svfiprintf_r+0xf6>
 800872e:	4654      	mov	r4, sl
 8008730:	2000      	movs	r0, #0
 8008732:	f04f 0c0a 	mov.w	ip, #10
 8008736:	9a07      	ldr	r2, [sp, #28]
 8008738:	4621      	mov	r1, r4
 800873a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873e:	3b30      	subs	r3, #48	; 0x30
 8008740:	2b09      	cmp	r3, #9
 8008742:	d94e      	bls.n	80087e2 <_svfiprintf_r+0x17e>
 8008744:	b1b0      	cbz	r0, 8008774 <_svfiprintf_r+0x110>
 8008746:	9207      	str	r2, [sp, #28]
 8008748:	e014      	b.n	8008774 <_svfiprintf_r+0x110>
 800874a:	eba0 0308 	sub.w	r3, r0, r8
 800874e:	fa09 f303 	lsl.w	r3, r9, r3
 8008752:	4313      	orrs	r3, r2
 8008754:	46a2      	mov	sl, r4
 8008756:	9304      	str	r3, [sp, #16]
 8008758:	e7d2      	b.n	8008700 <_svfiprintf_r+0x9c>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	1d19      	adds	r1, r3, #4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	9103      	str	r1, [sp, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	bfbb      	ittet	lt
 8008766:	425b      	neglt	r3, r3
 8008768:	f042 0202 	orrlt.w	r2, r2, #2
 800876c:	9307      	strge	r3, [sp, #28]
 800876e:	9307      	strlt	r3, [sp, #28]
 8008770:	bfb8      	it	lt
 8008772:	9204      	strlt	r2, [sp, #16]
 8008774:	7823      	ldrb	r3, [r4, #0]
 8008776:	2b2e      	cmp	r3, #46	; 0x2e
 8008778:	d10c      	bne.n	8008794 <_svfiprintf_r+0x130>
 800877a:	7863      	ldrb	r3, [r4, #1]
 800877c:	2b2a      	cmp	r3, #42	; 0x2a
 800877e:	d135      	bne.n	80087ec <_svfiprintf_r+0x188>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	3402      	adds	r4, #2
 8008784:	1d1a      	adds	r2, r3, #4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	9203      	str	r2, [sp, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	bfb8      	it	lt
 800878e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008792:	9305      	str	r3, [sp, #20]
 8008794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008860 <_svfiprintf_r+0x1fc>
 8008798:	2203      	movs	r2, #3
 800879a:	4650      	mov	r0, sl
 800879c:	7821      	ldrb	r1, [r4, #0]
 800879e:	f000 f9f7 	bl	8008b90 <memchr>
 80087a2:	b140      	cbz	r0, 80087b6 <_svfiprintf_r+0x152>
 80087a4:	2340      	movs	r3, #64	; 0x40
 80087a6:	eba0 000a 	sub.w	r0, r0, sl
 80087aa:	fa03 f000 	lsl.w	r0, r3, r0
 80087ae:	9b04      	ldr	r3, [sp, #16]
 80087b0:	3401      	adds	r4, #1
 80087b2:	4303      	orrs	r3, r0
 80087b4:	9304      	str	r3, [sp, #16]
 80087b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ba:	2206      	movs	r2, #6
 80087bc:	4825      	ldr	r0, [pc, #148]	; (8008854 <_svfiprintf_r+0x1f0>)
 80087be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087c2:	f000 f9e5 	bl	8008b90 <memchr>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d038      	beq.n	800883c <_svfiprintf_r+0x1d8>
 80087ca:	4b23      	ldr	r3, [pc, #140]	; (8008858 <_svfiprintf_r+0x1f4>)
 80087cc:	bb1b      	cbnz	r3, 8008816 <_svfiprintf_r+0x1b2>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	3307      	adds	r3, #7
 80087d2:	f023 0307 	bic.w	r3, r3, #7
 80087d6:	3308      	adds	r3, #8
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087dc:	4433      	add	r3, r6
 80087de:	9309      	str	r3, [sp, #36]	; 0x24
 80087e0:	e767      	b.n	80086b2 <_svfiprintf_r+0x4e>
 80087e2:	460c      	mov	r4, r1
 80087e4:	2001      	movs	r0, #1
 80087e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80087ea:	e7a5      	b.n	8008738 <_svfiprintf_r+0xd4>
 80087ec:	2300      	movs	r3, #0
 80087ee:	f04f 0c0a 	mov.w	ip, #10
 80087f2:	4619      	mov	r1, r3
 80087f4:	3401      	adds	r4, #1
 80087f6:	9305      	str	r3, [sp, #20]
 80087f8:	4620      	mov	r0, r4
 80087fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087fe:	3a30      	subs	r2, #48	; 0x30
 8008800:	2a09      	cmp	r2, #9
 8008802:	d903      	bls.n	800880c <_svfiprintf_r+0x1a8>
 8008804:	2b00      	cmp	r3, #0
 8008806:	d0c5      	beq.n	8008794 <_svfiprintf_r+0x130>
 8008808:	9105      	str	r1, [sp, #20]
 800880a:	e7c3      	b.n	8008794 <_svfiprintf_r+0x130>
 800880c:	4604      	mov	r4, r0
 800880e:	2301      	movs	r3, #1
 8008810:	fb0c 2101 	mla	r1, ip, r1, r2
 8008814:	e7f0      	b.n	80087f8 <_svfiprintf_r+0x194>
 8008816:	ab03      	add	r3, sp, #12
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	462a      	mov	r2, r5
 800881c:	4638      	mov	r0, r7
 800881e:	4b0f      	ldr	r3, [pc, #60]	; (800885c <_svfiprintf_r+0x1f8>)
 8008820:	a904      	add	r1, sp, #16
 8008822:	f3af 8000 	nop.w
 8008826:	1c42      	adds	r2, r0, #1
 8008828:	4606      	mov	r6, r0
 800882a:	d1d6      	bne.n	80087da <_svfiprintf_r+0x176>
 800882c:	89ab      	ldrh	r3, [r5, #12]
 800882e:	065b      	lsls	r3, r3, #25
 8008830:	f53f af2c 	bmi.w	800868c <_svfiprintf_r+0x28>
 8008834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008836:	b01d      	add	sp, #116	; 0x74
 8008838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883c:	ab03      	add	r3, sp, #12
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	462a      	mov	r2, r5
 8008842:	4638      	mov	r0, r7
 8008844:	4b05      	ldr	r3, [pc, #20]	; (800885c <_svfiprintf_r+0x1f8>)
 8008846:	a904      	add	r1, sp, #16
 8008848:	f000 f87c 	bl	8008944 <_printf_i>
 800884c:	e7eb      	b.n	8008826 <_svfiprintf_r+0x1c2>
 800884e:	bf00      	nop
 8008850:	080099e4 	.word	0x080099e4
 8008854:	080099ee 	.word	0x080099ee
 8008858:	00000000 	.word	0x00000000
 800885c:	080085ad 	.word	0x080085ad
 8008860:	080099ea 	.word	0x080099ea

08008864 <_printf_common>:
 8008864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008868:	4616      	mov	r6, r2
 800886a:	4699      	mov	r9, r3
 800886c:	688a      	ldr	r2, [r1, #8]
 800886e:	690b      	ldr	r3, [r1, #16]
 8008870:	4607      	mov	r7, r0
 8008872:	4293      	cmp	r3, r2
 8008874:	bfb8      	it	lt
 8008876:	4613      	movlt	r3, r2
 8008878:	6033      	str	r3, [r6, #0]
 800887a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800887e:	460c      	mov	r4, r1
 8008880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008884:	b10a      	cbz	r2, 800888a <_printf_common+0x26>
 8008886:	3301      	adds	r3, #1
 8008888:	6033      	str	r3, [r6, #0]
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	0699      	lsls	r1, r3, #26
 800888e:	bf42      	ittt	mi
 8008890:	6833      	ldrmi	r3, [r6, #0]
 8008892:	3302      	addmi	r3, #2
 8008894:	6033      	strmi	r3, [r6, #0]
 8008896:	6825      	ldr	r5, [r4, #0]
 8008898:	f015 0506 	ands.w	r5, r5, #6
 800889c:	d106      	bne.n	80088ac <_printf_common+0x48>
 800889e:	f104 0a19 	add.w	sl, r4, #25
 80088a2:	68e3      	ldr	r3, [r4, #12]
 80088a4:	6832      	ldr	r2, [r6, #0]
 80088a6:	1a9b      	subs	r3, r3, r2
 80088a8:	42ab      	cmp	r3, r5
 80088aa:	dc28      	bgt.n	80088fe <_printf_common+0x9a>
 80088ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088b0:	1e13      	subs	r3, r2, #0
 80088b2:	6822      	ldr	r2, [r4, #0]
 80088b4:	bf18      	it	ne
 80088b6:	2301      	movne	r3, #1
 80088b8:	0692      	lsls	r2, r2, #26
 80088ba:	d42d      	bmi.n	8008918 <_printf_common+0xb4>
 80088bc:	4649      	mov	r1, r9
 80088be:	4638      	mov	r0, r7
 80088c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088c4:	47c0      	blx	r8
 80088c6:	3001      	adds	r0, #1
 80088c8:	d020      	beq.n	800890c <_printf_common+0xa8>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	68e5      	ldr	r5, [r4, #12]
 80088ce:	f003 0306 	and.w	r3, r3, #6
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	bf18      	it	ne
 80088d6:	2500      	movne	r5, #0
 80088d8:	6832      	ldr	r2, [r6, #0]
 80088da:	f04f 0600 	mov.w	r6, #0
 80088de:	68a3      	ldr	r3, [r4, #8]
 80088e0:	bf08      	it	eq
 80088e2:	1aad      	subeq	r5, r5, r2
 80088e4:	6922      	ldr	r2, [r4, #16]
 80088e6:	bf08      	it	eq
 80088e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088ec:	4293      	cmp	r3, r2
 80088ee:	bfc4      	itt	gt
 80088f0:	1a9b      	subgt	r3, r3, r2
 80088f2:	18ed      	addgt	r5, r5, r3
 80088f4:	341a      	adds	r4, #26
 80088f6:	42b5      	cmp	r5, r6
 80088f8:	d11a      	bne.n	8008930 <_printf_common+0xcc>
 80088fa:	2000      	movs	r0, #0
 80088fc:	e008      	b.n	8008910 <_printf_common+0xac>
 80088fe:	2301      	movs	r3, #1
 8008900:	4652      	mov	r2, sl
 8008902:	4649      	mov	r1, r9
 8008904:	4638      	mov	r0, r7
 8008906:	47c0      	blx	r8
 8008908:	3001      	adds	r0, #1
 800890a:	d103      	bne.n	8008914 <_printf_common+0xb0>
 800890c:	f04f 30ff 	mov.w	r0, #4294967295
 8008910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008914:	3501      	adds	r5, #1
 8008916:	e7c4      	b.n	80088a2 <_printf_common+0x3e>
 8008918:	2030      	movs	r0, #48	; 0x30
 800891a:	18e1      	adds	r1, r4, r3
 800891c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008926:	4422      	add	r2, r4
 8008928:	3302      	adds	r3, #2
 800892a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800892e:	e7c5      	b.n	80088bc <_printf_common+0x58>
 8008930:	2301      	movs	r3, #1
 8008932:	4622      	mov	r2, r4
 8008934:	4649      	mov	r1, r9
 8008936:	4638      	mov	r0, r7
 8008938:	47c0      	blx	r8
 800893a:	3001      	adds	r0, #1
 800893c:	d0e6      	beq.n	800890c <_printf_common+0xa8>
 800893e:	3601      	adds	r6, #1
 8008940:	e7d9      	b.n	80088f6 <_printf_common+0x92>
	...

08008944 <_printf_i>:
 8008944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008948:	460c      	mov	r4, r1
 800894a:	7e27      	ldrb	r7, [r4, #24]
 800894c:	4691      	mov	r9, r2
 800894e:	2f78      	cmp	r7, #120	; 0x78
 8008950:	4680      	mov	r8, r0
 8008952:	469a      	mov	sl, r3
 8008954:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008956:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800895a:	d807      	bhi.n	800896c <_printf_i+0x28>
 800895c:	2f62      	cmp	r7, #98	; 0x62
 800895e:	d80a      	bhi.n	8008976 <_printf_i+0x32>
 8008960:	2f00      	cmp	r7, #0
 8008962:	f000 80d9 	beq.w	8008b18 <_printf_i+0x1d4>
 8008966:	2f58      	cmp	r7, #88	; 0x58
 8008968:	f000 80a4 	beq.w	8008ab4 <_printf_i+0x170>
 800896c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008974:	e03a      	b.n	80089ec <_printf_i+0xa8>
 8008976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800897a:	2b15      	cmp	r3, #21
 800897c:	d8f6      	bhi.n	800896c <_printf_i+0x28>
 800897e:	a001      	add	r0, pc, #4	; (adr r0, 8008984 <_printf_i+0x40>)
 8008980:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008984:	080089dd 	.word	0x080089dd
 8008988:	080089f1 	.word	0x080089f1
 800898c:	0800896d 	.word	0x0800896d
 8008990:	0800896d 	.word	0x0800896d
 8008994:	0800896d 	.word	0x0800896d
 8008998:	0800896d 	.word	0x0800896d
 800899c:	080089f1 	.word	0x080089f1
 80089a0:	0800896d 	.word	0x0800896d
 80089a4:	0800896d 	.word	0x0800896d
 80089a8:	0800896d 	.word	0x0800896d
 80089ac:	0800896d 	.word	0x0800896d
 80089b0:	08008aff 	.word	0x08008aff
 80089b4:	08008a21 	.word	0x08008a21
 80089b8:	08008ae1 	.word	0x08008ae1
 80089bc:	0800896d 	.word	0x0800896d
 80089c0:	0800896d 	.word	0x0800896d
 80089c4:	08008b21 	.word	0x08008b21
 80089c8:	0800896d 	.word	0x0800896d
 80089cc:	08008a21 	.word	0x08008a21
 80089d0:	0800896d 	.word	0x0800896d
 80089d4:	0800896d 	.word	0x0800896d
 80089d8:	08008ae9 	.word	0x08008ae9
 80089dc:	680b      	ldr	r3, [r1, #0]
 80089de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089e2:	1d1a      	adds	r2, r3, #4
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	600a      	str	r2, [r1, #0]
 80089e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089ec:	2301      	movs	r3, #1
 80089ee:	e0a4      	b.n	8008b3a <_printf_i+0x1f6>
 80089f0:	6825      	ldr	r5, [r4, #0]
 80089f2:	6808      	ldr	r0, [r1, #0]
 80089f4:	062e      	lsls	r6, r5, #24
 80089f6:	f100 0304 	add.w	r3, r0, #4
 80089fa:	d50a      	bpl.n	8008a12 <_printf_i+0xce>
 80089fc:	6805      	ldr	r5, [r0, #0]
 80089fe:	600b      	str	r3, [r1, #0]
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	da03      	bge.n	8008a0c <_printf_i+0xc8>
 8008a04:	232d      	movs	r3, #45	; 0x2d
 8008a06:	426d      	negs	r5, r5
 8008a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a0c:	230a      	movs	r3, #10
 8008a0e:	485e      	ldr	r0, [pc, #376]	; (8008b88 <_printf_i+0x244>)
 8008a10:	e019      	b.n	8008a46 <_printf_i+0x102>
 8008a12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a16:	6805      	ldr	r5, [r0, #0]
 8008a18:	600b      	str	r3, [r1, #0]
 8008a1a:	bf18      	it	ne
 8008a1c:	b22d      	sxthne	r5, r5
 8008a1e:	e7ef      	b.n	8008a00 <_printf_i+0xbc>
 8008a20:	680b      	ldr	r3, [r1, #0]
 8008a22:	6825      	ldr	r5, [r4, #0]
 8008a24:	1d18      	adds	r0, r3, #4
 8008a26:	6008      	str	r0, [r1, #0]
 8008a28:	0628      	lsls	r0, r5, #24
 8008a2a:	d501      	bpl.n	8008a30 <_printf_i+0xec>
 8008a2c:	681d      	ldr	r5, [r3, #0]
 8008a2e:	e002      	b.n	8008a36 <_printf_i+0xf2>
 8008a30:	0669      	lsls	r1, r5, #25
 8008a32:	d5fb      	bpl.n	8008a2c <_printf_i+0xe8>
 8008a34:	881d      	ldrh	r5, [r3, #0]
 8008a36:	2f6f      	cmp	r7, #111	; 0x6f
 8008a38:	bf0c      	ite	eq
 8008a3a:	2308      	moveq	r3, #8
 8008a3c:	230a      	movne	r3, #10
 8008a3e:	4852      	ldr	r0, [pc, #328]	; (8008b88 <_printf_i+0x244>)
 8008a40:	2100      	movs	r1, #0
 8008a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a46:	6866      	ldr	r6, [r4, #4]
 8008a48:	2e00      	cmp	r6, #0
 8008a4a:	bfa8      	it	ge
 8008a4c:	6821      	ldrge	r1, [r4, #0]
 8008a4e:	60a6      	str	r6, [r4, #8]
 8008a50:	bfa4      	itt	ge
 8008a52:	f021 0104 	bicge.w	r1, r1, #4
 8008a56:	6021      	strge	r1, [r4, #0]
 8008a58:	b90d      	cbnz	r5, 8008a5e <_printf_i+0x11a>
 8008a5a:	2e00      	cmp	r6, #0
 8008a5c:	d04d      	beq.n	8008afa <_printf_i+0x1b6>
 8008a5e:	4616      	mov	r6, r2
 8008a60:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a64:	fb03 5711 	mls	r7, r3, r1, r5
 8008a68:	5dc7      	ldrb	r7, [r0, r7]
 8008a6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a6e:	462f      	mov	r7, r5
 8008a70:	42bb      	cmp	r3, r7
 8008a72:	460d      	mov	r5, r1
 8008a74:	d9f4      	bls.n	8008a60 <_printf_i+0x11c>
 8008a76:	2b08      	cmp	r3, #8
 8008a78:	d10b      	bne.n	8008a92 <_printf_i+0x14e>
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	07df      	lsls	r7, r3, #31
 8008a7e:	d508      	bpl.n	8008a92 <_printf_i+0x14e>
 8008a80:	6923      	ldr	r3, [r4, #16]
 8008a82:	6861      	ldr	r1, [r4, #4]
 8008a84:	4299      	cmp	r1, r3
 8008a86:	bfde      	ittt	le
 8008a88:	2330      	movle	r3, #48	; 0x30
 8008a8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a92:	1b92      	subs	r2, r2, r6
 8008a94:	6122      	str	r2, [r4, #16]
 8008a96:	464b      	mov	r3, r9
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	f8cd a000 	str.w	sl, [sp]
 8008aa0:	aa03      	add	r2, sp, #12
 8008aa2:	f7ff fedf 	bl	8008864 <_printf_common>
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d14c      	bne.n	8008b44 <_printf_i+0x200>
 8008aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008aae:	b004      	add	sp, #16
 8008ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab4:	4834      	ldr	r0, [pc, #208]	; (8008b88 <_printf_i+0x244>)
 8008ab6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008aba:	680e      	ldr	r6, [r1, #0]
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ac2:	061f      	lsls	r7, r3, #24
 8008ac4:	600e      	str	r6, [r1, #0]
 8008ac6:	d514      	bpl.n	8008af2 <_printf_i+0x1ae>
 8008ac8:	07d9      	lsls	r1, r3, #31
 8008aca:	bf44      	itt	mi
 8008acc:	f043 0320 	orrmi.w	r3, r3, #32
 8008ad0:	6023      	strmi	r3, [r4, #0]
 8008ad2:	b91d      	cbnz	r5, 8008adc <_printf_i+0x198>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	f023 0320 	bic.w	r3, r3, #32
 8008ada:	6023      	str	r3, [r4, #0]
 8008adc:	2310      	movs	r3, #16
 8008ade:	e7af      	b.n	8008a40 <_printf_i+0xfc>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	f043 0320 	orr.w	r3, r3, #32
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	2378      	movs	r3, #120	; 0x78
 8008aea:	4828      	ldr	r0, [pc, #160]	; (8008b8c <_printf_i+0x248>)
 8008aec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008af0:	e7e3      	b.n	8008aba <_printf_i+0x176>
 8008af2:	065e      	lsls	r6, r3, #25
 8008af4:	bf48      	it	mi
 8008af6:	b2ad      	uxthmi	r5, r5
 8008af8:	e7e6      	b.n	8008ac8 <_printf_i+0x184>
 8008afa:	4616      	mov	r6, r2
 8008afc:	e7bb      	b.n	8008a76 <_printf_i+0x132>
 8008afe:	680b      	ldr	r3, [r1, #0]
 8008b00:	6826      	ldr	r6, [r4, #0]
 8008b02:	1d1d      	adds	r5, r3, #4
 8008b04:	6960      	ldr	r0, [r4, #20]
 8008b06:	600d      	str	r5, [r1, #0]
 8008b08:	0635      	lsls	r5, r6, #24
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	d501      	bpl.n	8008b12 <_printf_i+0x1ce>
 8008b0e:	6018      	str	r0, [r3, #0]
 8008b10:	e002      	b.n	8008b18 <_printf_i+0x1d4>
 8008b12:	0671      	lsls	r1, r6, #25
 8008b14:	d5fb      	bpl.n	8008b0e <_printf_i+0x1ca>
 8008b16:	8018      	strh	r0, [r3, #0]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	4616      	mov	r6, r2
 8008b1c:	6123      	str	r3, [r4, #16]
 8008b1e:	e7ba      	b.n	8008a96 <_printf_i+0x152>
 8008b20:	680b      	ldr	r3, [r1, #0]
 8008b22:	1d1a      	adds	r2, r3, #4
 8008b24:	600a      	str	r2, [r1, #0]
 8008b26:	681e      	ldr	r6, [r3, #0]
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	6862      	ldr	r2, [r4, #4]
 8008b2e:	f000 f82f 	bl	8008b90 <memchr>
 8008b32:	b108      	cbz	r0, 8008b38 <_printf_i+0x1f4>
 8008b34:	1b80      	subs	r0, r0, r6
 8008b36:	6060      	str	r0, [r4, #4]
 8008b38:	6863      	ldr	r3, [r4, #4]
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b42:	e7a8      	b.n	8008a96 <_printf_i+0x152>
 8008b44:	4632      	mov	r2, r6
 8008b46:	4649      	mov	r1, r9
 8008b48:	4640      	mov	r0, r8
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	47d0      	blx	sl
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d0ab      	beq.n	8008aaa <_printf_i+0x166>
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	079b      	lsls	r3, r3, #30
 8008b56:	d413      	bmi.n	8008b80 <_printf_i+0x23c>
 8008b58:	68e0      	ldr	r0, [r4, #12]
 8008b5a:	9b03      	ldr	r3, [sp, #12]
 8008b5c:	4298      	cmp	r0, r3
 8008b5e:	bfb8      	it	lt
 8008b60:	4618      	movlt	r0, r3
 8008b62:	e7a4      	b.n	8008aae <_printf_i+0x16a>
 8008b64:	2301      	movs	r3, #1
 8008b66:	4632      	mov	r2, r6
 8008b68:	4649      	mov	r1, r9
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	47d0      	blx	sl
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d09b      	beq.n	8008aaa <_printf_i+0x166>
 8008b72:	3501      	adds	r5, #1
 8008b74:	68e3      	ldr	r3, [r4, #12]
 8008b76:	9903      	ldr	r1, [sp, #12]
 8008b78:	1a5b      	subs	r3, r3, r1
 8008b7a:	42ab      	cmp	r3, r5
 8008b7c:	dcf2      	bgt.n	8008b64 <_printf_i+0x220>
 8008b7e:	e7eb      	b.n	8008b58 <_printf_i+0x214>
 8008b80:	2500      	movs	r5, #0
 8008b82:	f104 0619 	add.w	r6, r4, #25
 8008b86:	e7f5      	b.n	8008b74 <_printf_i+0x230>
 8008b88:	080099f5 	.word	0x080099f5
 8008b8c:	08009a06 	.word	0x08009a06

08008b90 <memchr>:
 8008b90:	4603      	mov	r3, r0
 8008b92:	b510      	push	{r4, lr}
 8008b94:	b2c9      	uxtb	r1, r1
 8008b96:	4402      	add	r2, r0
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	d101      	bne.n	8008ba2 <memchr+0x12>
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	e003      	b.n	8008baa <memchr+0x1a>
 8008ba2:	7804      	ldrb	r4, [r0, #0]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	428c      	cmp	r4, r1
 8008ba8:	d1f6      	bne.n	8008b98 <memchr+0x8>
 8008baa:	bd10      	pop	{r4, pc}

08008bac <memmove>:
 8008bac:	4288      	cmp	r0, r1
 8008bae:	b510      	push	{r4, lr}
 8008bb0:	eb01 0402 	add.w	r4, r1, r2
 8008bb4:	d902      	bls.n	8008bbc <memmove+0x10>
 8008bb6:	4284      	cmp	r4, r0
 8008bb8:	4623      	mov	r3, r4
 8008bba:	d807      	bhi.n	8008bcc <memmove+0x20>
 8008bbc:	1e43      	subs	r3, r0, #1
 8008bbe:	42a1      	cmp	r1, r4
 8008bc0:	d008      	beq.n	8008bd4 <memmove+0x28>
 8008bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bca:	e7f8      	b.n	8008bbe <memmove+0x12>
 8008bcc:	4601      	mov	r1, r0
 8008bce:	4402      	add	r2, r0
 8008bd0:	428a      	cmp	r2, r1
 8008bd2:	d100      	bne.n	8008bd6 <memmove+0x2a>
 8008bd4:	bd10      	pop	{r4, pc}
 8008bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bde:	e7f7      	b.n	8008bd0 <memmove+0x24>

08008be0 <_free_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4605      	mov	r5, r0
 8008be4:	2900      	cmp	r1, #0
 8008be6:	d043      	beq.n	8008c70 <_free_r+0x90>
 8008be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bec:	1f0c      	subs	r4, r1, #4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bfb8      	it	lt
 8008bf2:	18e4      	addlt	r4, r4, r3
 8008bf4:	f000 f8d0 	bl	8008d98 <__malloc_lock>
 8008bf8:	4a1e      	ldr	r2, [pc, #120]	; (8008c74 <_free_r+0x94>)
 8008bfa:	6813      	ldr	r3, [r2, #0]
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	b933      	cbnz	r3, 8008c0e <_free_r+0x2e>
 8008c00:	6063      	str	r3, [r4, #4]
 8008c02:	6014      	str	r4, [r2, #0]
 8008c04:	4628      	mov	r0, r5
 8008c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c0a:	f000 b8cb 	b.w	8008da4 <__malloc_unlock>
 8008c0e:	42a3      	cmp	r3, r4
 8008c10:	d90a      	bls.n	8008c28 <_free_r+0x48>
 8008c12:	6821      	ldr	r1, [r4, #0]
 8008c14:	1862      	adds	r2, r4, r1
 8008c16:	4293      	cmp	r3, r2
 8008c18:	bf01      	itttt	eq
 8008c1a:	681a      	ldreq	r2, [r3, #0]
 8008c1c:	685b      	ldreq	r3, [r3, #4]
 8008c1e:	1852      	addeq	r2, r2, r1
 8008c20:	6022      	streq	r2, [r4, #0]
 8008c22:	6063      	str	r3, [r4, #4]
 8008c24:	6004      	str	r4, [r0, #0]
 8008c26:	e7ed      	b.n	8008c04 <_free_r+0x24>
 8008c28:	461a      	mov	r2, r3
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	b10b      	cbz	r3, 8008c32 <_free_r+0x52>
 8008c2e:	42a3      	cmp	r3, r4
 8008c30:	d9fa      	bls.n	8008c28 <_free_r+0x48>
 8008c32:	6811      	ldr	r1, [r2, #0]
 8008c34:	1850      	adds	r0, r2, r1
 8008c36:	42a0      	cmp	r0, r4
 8008c38:	d10b      	bne.n	8008c52 <_free_r+0x72>
 8008c3a:	6820      	ldr	r0, [r4, #0]
 8008c3c:	4401      	add	r1, r0
 8008c3e:	1850      	adds	r0, r2, r1
 8008c40:	4283      	cmp	r3, r0
 8008c42:	6011      	str	r1, [r2, #0]
 8008c44:	d1de      	bne.n	8008c04 <_free_r+0x24>
 8008c46:	6818      	ldr	r0, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	4401      	add	r1, r0
 8008c4c:	6011      	str	r1, [r2, #0]
 8008c4e:	6053      	str	r3, [r2, #4]
 8008c50:	e7d8      	b.n	8008c04 <_free_r+0x24>
 8008c52:	d902      	bls.n	8008c5a <_free_r+0x7a>
 8008c54:	230c      	movs	r3, #12
 8008c56:	602b      	str	r3, [r5, #0]
 8008c58:	e7d4      	b.n	8008c04 <_free_r+0x24>
 8008c5a:	6820      	ldr	r0, [r4, #0]
 8008c5c:	1821      	adds	r1, r4, r0
 8008c5e:	428b      	cmp	r3, r1
 8008c60:	bf01      	itttt	eq
 8008c62:	6819      	ldreq	r1, [r3, #0]
 8008c64:	685b      	ldreq	r3, [r3, #4]
 8008c66:	1809      	addeq	r1, r1, r0
 8008c68:	6021      	streq	r1, [r4, #0]
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	6054      	str	r4, [r2, #4]
 8008c6e:	e7c9      	b.n	8008c04 <_free_r+0x24>
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
 8008c72:	bf00      	nop
 8008c74:	200019d0 	.word	0x200019d0

08008c78 <_malloc_r>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	1ccd      	adds	r5, r1, #3
 8008c7c:	f025 0503 	bic.w	r5, r5, #3
 8008c80:	3508      	adds	r5, #8
 8008c82:	2d0c      	cmp	r5, #12
 8008c84:	bf38      	it	cc
 8008c86:	250c      	movcc	r5, #12
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	db01      	blt.n	8008c92 <_malloc_r+0x1a>
 8008c8e:	42a9      	cmp	r1, r5
 8008c90:	d903      	bls.n	8008c9a <_malloc_r+0x22>
 8008c92:	230c      	movs	r3, #12
 8008c94:	6033      	str	r3, [r6, #0]
 8008c96:	2000      	movs	r0, #0
 8008c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c9a:	f000 f87d 	bl	8008d98 <__malloc_lock>
 8008c9e:	4921      	ldr	r1, [pc, #132]	; (8008d24 <_malloc_r+0xac>)
 8008ca0:	680a      	ldr	r2, [r1, #0]
 8008ca2:	4614      	mov	r4, r2
 8008ca4:	b99c      	cbnz	r4, 8008cce <_malloc_r+0x56>
 8008ca6:	4f20      	ldr	r7, [pc, #128]	; (8008d28 <_malloc_r+0xb0>)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	b923      	cbnz	r3, 8008cb6 <_malloc_r+0x3e>
 8008cac:	4621      	mov	r1, r4
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f000 f862 	bl	8008d78 <_sbrk_r>
 8008cb4:	6038      	str	r0, [r7, #0]
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f000 f85d 	bl	8008d78 <_sbrk_r>
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	d123      	bne.n	8008d0a <_malloc_r+0x92>
 8008cc2:	230c      	movs	r3, #12
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	6033      	str	r3, [r6, #0]
 8008cc8:	f000 f86c 	bl	8008da4 <__malloc_unlock>
 8008ccc:	e7e3      	b.n	8008c96 <_malloc_r+0x1e>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	1b5b      	subs	r3, r3, r5
 8008cd2:	d417      	bmi.n	8008d04 <_malloc_r+0x8c>
 8008cd4:	2b0b      	cmp	r3, #11
 8008cd6:	d903      	bls.n	8008ce0 <_malloc_r+0x68>
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	441c      	add	r4, r3
 8008cdc:	6025      	str	r5, [r4, #0]
 8008cde:	e004      	b.n	8008cea <_malloc_r+0x72>
 8008ce0:	6863      	ldr	r3, [r4, #4]
 8008ce2:	42a2      	cmp	r2, r4
 8008ce4:	bf0c      	ite	eq
 8008ce6:	600b      	streq	r3, [r1, #0]
 8008ce8:	6053      	strne	r3, [r2, #4]
 8008cea:	4630      	mov	r0, r6
 8008cec:	f000 f85a 	bl	8008da4 <__malloc_unlock>
 8008cf0:	f104 000b 	add.w	r0, r4, #11
 8008cf4:	1d23      	adds	r3, r4, #4
 8008cf6:	f020 0007 	bic.w	r0, r0, #7
 8008cfa:	1ac2      	subs	r2, r0, r3
 8008cfc:	d0cc      	beq.n	8008c98 <_malloc_r+0x20>
 8008cfe:	1a1b      	subs	r3, r3, r0
 8008d00:	50a3      	str	r3, [r4, r2]
 8008d02:	e7c9      	b.n	8008c98 <_malloc_r+0x20>
 8008d04:	4622      	mov	r2, r4
 8008d06:	6864      	ldr	r4, [r4, #4]
 8008d08:	e7cc      	b.n	8008ca4 <_malloc_r+0x2c>
 8008d0a:	1cc4      	adds	r4, r0, #3
 8008d0c:	f024 0403 	bic.w	r4, r4, #3
 8008d10:	42a0      	cmp	r0, r4
 8008d12:	d0e3      	beq.n	8008cdc <_malloc_r+0x64>
 8008d14:	1a21      	subs	r1, r4, r0
 8008d16:	4630      	mov	r0, r6
 8008d18:	f000 f82e 	bl	8008d78 <_sbrk_r>
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d1dd      	bne.n	8008cdc <_malloc_r+0x64>
 8008d20:	e7cf      	b.n	8008cc2 <_malloc_r+0x4a>
 8008d22:	bf00      	nop
 8008d24:	200019d0 	.word	0x200019d0
 8008d28:	200019d4 	.word	0x200019d4

08008d2c <_realloc_r>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	4607      	mov	r7, r0
 8008d30:	4614      	mov	r4, r2
 8008d32:	460e      	mov	r6, r1
 8008d34:	b921      	cbnz	r1, 8008d40 <_realloc_r+0x14>
 8008d36:	4611      	mov	r1, r2
 8008d38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d3c:	f7ff bf9c 	b.w	8008c78 <_malloc_r>
 8008d40:	b922      	cbnz	r2, 8008d4c <_realloc_r+0x20>
 8008d42:	f7ff ff4d 	bl	8008be0 <_free_r>
 8008d46:	4625      	mov	r5, r4
 8008d48:	4628      	mov	r0, r5
 8008d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d4c:	f000 f830 	bl	8008db0 <_malloc_usable_size_r>
 8008d50:	42a0      	cmp	r0, r4
 8008d52:	d20f      	bcs.n	8008d74 <_realloc_r+0x48>
 8008d54:	4621      	mov	r1, r4
 8008d56:	4638      	mov	r0, r7
 8008d58:	f7ff ff8e 	bl	8008c78 <_malloc_r>
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d0f2      	beq.n	8008d48 <_realloc_r+0x1c>
 8008d62:	4631      	mov	r1, r6
 8008d64:	4622      	mov	r2, r4
 8008d66:	f7ff fbeb 	bl	8008540 <memcpy>
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f7ff ff37 	bl	8008be0 <_free_r>
 8008d72:	e7e9      	b.n	8008d48 <_realloc_r+0x1c>
 8008d74:	4635      	mov	r5, r6
 8008d76:	e7e7      	b.n	8008d48 <_realloc_r+0x1c>

08008d78 <_sbrk_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4d05      	ldr	r5, [pc, #20]	; (8008d94 <_sbrk_r+0x1c>)
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	602b      	str	r3, [r5, #0]
 8008d84:	f7f9 fad6 	bl	8002334 <_sbrk>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d102      	bne.n	8008d92 <_sbrk_r+0x1a>
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	b103      	cbz	r3, 8008d92 <_sbrk_r+0x1a>
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	200025b4 	.word	0x200025b4

08008d98 <__malloc_lock>:
 8008d98:	4801      	ldr	r0, [pc, #4]	; (8008da0 <__malloc_lock+0x8>)
 8008d9a:	f000 b811 	b.w	8008dc0 <__retarget_lock_acquire_recursive>
 8008d9e:	bf00      	nop
 8008da0:	200025bc 	.word	0x200025bc

08008da4 <__malloc_unlock>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__malloc_unlock+0x8>)
 8008da6:	f000 b80c 	b.w	8008dc2 <__retarget_lock_release_recursive>
 8008daa:	bf00      	nop
 8008dac:	200025bc 	.word	0x200025bc

08008db0 <_malloc_usable_size_r>:
 8008db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db4:	1f18      	subs	r0, r3, #4
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfbc      	itt	lt
 8008dba:	580b      	ldrlt	r3, [r1, r0]
 8008dbc:	18c0      	addlt	r0, r0, r3
 8008dbe:	4770      	bx	lr

08008dc0 <__retarget_lock_acquire_recursive>:
 8008dc0:	4770      	bx	lr

08008dc2 <__retarget_lock_release_recursive>:
 8008dc2:	4770      	bx	lr

08008dc4 <_init>:
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	bf00      	nop
 8008dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dca:	bc08      	pop	{r3}
 8008dcc:	469e      	mov	lr, r3
 8008dce:	4770      	bx	lr

08008dd0 <_fini>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	bf00      	nop
 8008dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd6:	bc08      	pop	{r3}
 8008dd8:	469e      	mov	lr, r3
 8008dda:	4770      	bx	lr
